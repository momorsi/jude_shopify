2025-09-01 15:46:32,368 - sync_service - INFO -    üìç Bill To: SAMIRA ELADAWY - Bab El Louq, Near Mall El Boustan
2025-09-01 15:46:32,375 - sync_service - INFO - Processing order #1563 (ID: gid://shopify/Order/6352528965698)
2025-09-01 15:46:32,377 - sync_service - INFO - Processing order: #1563 | Payment: PENDING | Fulfillment: FULFILLED
2025-09-01 15:46:32,379 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-01 15:46:32,381 - sync_service - INFO - üìç SHIP TO: Farah Haroun | 127b les rois compound new cairo | New Cairo, Cairo | 01015970111
2025-09-01 15:46:32,382 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 127b les rois compound new cairo, New Cairo, Cairo
Egypt
2025-09-01 15:46:32,387 - sync_service - INFO - üìç BILL TO: Farah Haroun | 127b les rois compound new cairo | New Cairo, Cairo | 01015970111
2025-09-01 15:46:32,388 - sync_service - INFO - üìç SAP BILLING ADDRESS: 127b les rois compound new cairo, New Cairo, Cairo
Egypt
2025-09-01 15:46:32,389 - sync_service - INFO - Order #1563 is pending payment - will process anyway
2025-09-01 15:46:33,434 - sync_service - INFO - Found existing customer: C0007676
2025-09-01 15:46:33,436 - sync_service - INFO - Using location-based costing codes for order #1563: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 15:46:33,438 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-01 15:46:35,733 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-01 15:46:35,736 - sync_service - INFO - Created invoice in SAP: 23140
2025-09-01 15:46:35,737 - sync_service - INFO - Order #1563 is not paid (status: PENDING) - skipping payment creation
2025-09-01 15:46:48,582 - sync_service - INFO - Added tag 'sap_invoice_23140' to order gid://shopify/Order/6352528965698
2025-09-01 15:46:48,584 - sync_service - INFO - Successfully processed order #1563
2025-09-01 15:46:48,586 - sync_service - INFO - ‚úÖ Processed order #1563 -> SAP Invoice: 23140
2025-09-01 15:46:48,586 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-01 15:46:48,588 - sync_service - INFO -    üìç Ship To: Farah Haroun - New Cairo
2025-09-01 15:46:48,589 - sync_service - INFO -    üìç Bill To: Farah Haroun - New Cairo
2025-09-01 15:46:48,590 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 15:46:49,207 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['sap_invoice_23138', 'sap_payment_failed', 'take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 15:46:49,209 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 15:46:49,211 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 15:46:49,212 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 15:46:49,213 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 15:46:49,214 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 15:46:49,216 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 15:46:49,219 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 15:46:49,221 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 15:46:49,222 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 15:46:49,223 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 15:46:49,803 - sync_service - INFO - Found existing customer: C0021066
2025-09-01 15:46:49,804 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 15:46:49,805 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 15:46:51,689 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-01 15:46:51,691 - sync_service - INFO - Created invoice in SAP: 23141
2025-09-01 15:46:51,693 - sync_service - INFO - Order #1015 is paid - creating incoming payment in SAP
2025-09-01 15:46:51,695 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-01 15:46:53,432 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-01 15:46:53,435 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1250000090 - Account currency 10801237 not the same as document currency ; select a document currency that is the same as the account currency"
      }
   }
}

2025-09-01 15:46:53,438 - sync_service - WARNING - Failed to create incoming payment for #1015: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1250000090 - Account currency 10801237 not the same as document currency ; select a document currency that is the same as the account currency"
      }
   }
}

2025-09-01 15:47:01,298 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6947886202970
2025-09-01 15:47:13,896 - sync_service - INFO - Added tag 'sap_invoice_23141' to order gid://shopify/Order/6947886202970
2025-09-01 15:47:13,900 - sync_service - INFO - Successfully processed order #1015
2025-09-01 15:47:13,902 - sync_service - INFO - ‚úÖ Processed order #1015 -> SAP Invoice: 23141
2025-09-01 15:47:13,903 - sync_service - INFO -    üîë Payment ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 15:47:13,904 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 345.0
2025-09-01 15:47:13,905 - sync_service - INFO -    üìç Ship To: Catherine Patton - Sag Harbor
2025-09-01 15:47:13,906 - sync_service - INFO -    üìç Bill To: Catherine Patton - Miami Beach
2025-09-01 15:47:13,907 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 3, 'success_count': 3, 'error_count': 0, 'details': None}
2025-09-01 15:47:13,909 - sync_service - INFO - Orders sync completed. Processed: 3, Success: 3, Errors: 0
2025-09-01 15:55:11,920 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 15:55:11,963 - sync_service - INFO - Starting sales orders sync...
2025-09-01 15:55:11,965 - sync_service - INFO - Starting orders sync...
2025-09-01 15:55:11,966 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 15:55:21,994 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 15:55:23,271 - sync_service - INFO - SAP logging client login successful
2025-09-01 15:55:24,197 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 15:55:24,202 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-01 15:55:24,205 - sync_service - INFO - Retrying in 2 seconds...
2025-09-01 15:55:26,219 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 15:55:26,859 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['sap_invoice_23141', 'take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 15:55:26,864 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 15:55:26,865 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 15:55:26,866 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 15:55:26,867 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 15:55:26,868 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 15:55:26,869 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 15:55:26,870 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 15:55:26,874 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 15:55:26,877 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 15:55:26,878 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 15:55:27,777 - sync_service - INFO - SAP login successful
2025-09-01 15:55:28,798 - sync_service - INFO - Found existing customer: C0021066
2025-09-01 15:55:28,803 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 15:55:28,806 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 15:55:30,743 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-01 15:55:30,744 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -5002,
      "message" : {
         "lang" : "en-us",
         "value" : "Enter valid currency code  [OINV.DocCur] , 'USD'"
      }
   }
}

2025-09-01 15:55:30,747 - sync_service - ERROR - Failed to process order #1015: HTTP 400: {
   "error" : {
      "code" : -5002,
      "message" : {
         "lang" : "en-us",
         "value" : "Enter valid currency code  [OINV.DocCur] , 'USD'"
      }
   }
}

2025-09-01 15:55:43,872 - sync_service - INFO - Added tag 'sap_sync_failed' to order gid://shopify/Order/6947886202970
2025-09-01 15:55:43,874 - sync_service - INFO - Added failed tag to order #1015
2025-09-01 15:55:43,875 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -5002,
      "message" : {
         "lang" : "en-us",
         "value" : "Enter valid currency code  [OINV.DocCur] , 'USD'"
      }
   }
}

2025-09-01 15:55:43,876 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-01 15:55:43,877 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-01 16:04:13,796 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:04:13,851 - sync_service - INFO - Starting sales orders sync...
2025-09-01 16:04:13,852 - sync_service - INFO - Starting orders sync...
2025-09-01 16:04:13,853 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:04:14,515 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['sap_invoice_23141', 'sap_sync_failed', 'take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 16:04:14,519 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 16:04:14,521 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 16:04:14,523 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 16:04:14,524 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 16:04:14,526 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 16:04:14,528 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:04:14,529 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 16:04:14,530 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 16:04:14,531 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 16:04:14,532 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 16:04:15,484 - sync_service - INFO - SAP login successful
2025-09-01 16:04:16,381 - sync_service - INFO - Creating new customer in SAP
2025-09-01 16:04:17,608 - sync_service - INFO - Created customer in SAP: C0021068
2025-09-01 16:04:17,612 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 16:04:17,615 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 16:04:19,652 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:04:20,555 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-01 16:04:20,557 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-01 16:04:20,558 - sync_service - ERROR - Failed to process order #1015: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-01 16:04:26,579 - sync_service - INFO - Added tag 'sap_sync_failed' to order gid://shopify/Order/6947886202970
2025-09-01 16:04:26,582 - sync_service - INFO - Added failed tag to order #1015
2025-09-01 16:04:26,583 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-01 16:04:26,583 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-01 16:04:26,584 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-01 16:07:14,775 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:07:14,827 - sync_service - INFO - Starting sales orders sync...
2025-09-01 16:07:14,828 - sync_service - INFO - Starting orders sync...
2025-09-01 16:07:14,829 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:07:15,494 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 16:07:15,497 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 16:07:15,498 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 16:07:15,499 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 16:07:15,501 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 16:07:15,503 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 16:07:15,504 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:07:15,506 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 16:07:15,507 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 16:07:15,508 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 16:07:15,510 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 16:07:16,852 - sync_service - INFO - SAP login successful
2025-09-01 16:07:18,229 - sync_service - INFO - Found existing customer: C0021068
2025-09-01 16:07:18,231 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 16:07:18,232 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 16:07:21,104 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:07:22,323 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-01 16:07:22,324 - sync_service - INFO - Created invoice in SAP: 23142
2025-09-01 16:07:22,324 - sync_service - INFO - Order #1015 is paid - creating incoming payment in SAP
2025-09-01 16:07:22,325 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-01 16:07:24,718 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-01 16:07:24,721 - sync_service - INFO - Created incoming payment in SAP: 22338
2025-09-01 16:07:24,722 - sync_service - INFO - Successfully created incoming payment: 22338
2025-09-01 16:07:37,485 - sync_service - INFO - Added tag 'sap_payment_22338' to order gid://shopify/Order/6947886202970
2025-09-01 16:07:50,258 - sync_service - INFO - Added tag 'sap_invoice_23142' to order gid://shopify/Order/6947886202970
2025-09-01 16:07:50,263 - sync_service - INFO - Successfully processed order #1015
2025-09-01 16:07:50,268 - sync_service - INFO - ‚úÖ Processed order #1015 -> SAP Invoice: 23142
2025-09-01 16:07:50,274 - sync_service - INFO -    üîë Payment ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:07:50,280 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 345.0
2025-09-01 16:07:50,283 - sync_service - INFO -    üìç Ship To: Catherine Patton - Sag Harbor
2025-09-01 16:07:50,285 - sync_service - INFO -    üìç Bill To: Catherine Patton - Miami Beach
2025-09-01 16:07:50,287 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-01 16:07:50,288 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-01 16:26:02,182 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:26:20,734 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:26:42,393 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:26:42,396 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:27:08,265 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:27:08,270 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:27:08,273 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take -tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:27:18,303 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:27:19,674 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:27:20,567 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:27:20,570 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take'}}, 'response': None, 'status': None}
2025-09-01 16:27:21,440 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'tags': ['sap_invoice_23142', 'sap_payment_22338', 'take']}}]}}, 'status': 'success'}
2025-09-01 16:27:21,441 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': '-tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:27:21,932 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'tags': ['sap_invoice_23142', 'sap_payment_22338', 'take']}}, {'node': {'id': 'gid://shopify/Order/6943630327898', 'name': '#1014', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6943024840794', 'name': '#1013', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6932423409754', 'name': '#1012', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6928607739994', 'name': '#1011', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6925940260954', 'name': '#1010', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6913894023258', 'name': '#1009', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6913879670874', 'name': '#1008', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6905664405594', 'name': '#1007', 'tags': []}}, {'node': {'id': 'gid://shopify/Order/6876038955098', 'name': '#1006', 'tags': []}}]}}, 'status': 'success'}
2025-09-01 16:27:21,934 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:27:22,514 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': []}}, 'status': 'success'}
2025-09-01 16:32:33,729 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:32:33,738 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:32:33,741 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take AND NOT tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:32:43,769 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:32:46,308 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:32:47,209 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:32:47,210 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': '(tag:take) AND (NOT tag:sap_invoice_*)'}}, 'response': None, 'status': None}
2025-09-01 16:32:57,226 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:32:58,159 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:32:58,160 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take -tag:sap_invoice'}}, 'response': None, 'status': None}
2025-09-01 16:32:58,903 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'tags': ['sap_invoice_23142', 'sap_payment_22338', 'take']}}]}}, 'status': 'success'}
2025-09-01 16:32:58,905 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take -tag:sap_invoice_23142'}}, 'response': None, 'status': None}
2025-09-01 16:33:08,898 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:33:09,793 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:33:09,794 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'tag:take NOT tag:sap_invoice_*'}}, 'response': None, 'status': None}
2025-09-01 16:33:10,302 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'tags': ['sap_invoice_23142', 'sap_payment_22338', 'take']}}]}}, 'status': 'success'}
2025-09-01 16:33:44,992 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:33:45,037 - sync_service - INFO - Starting sales orders sync...
2025-09-01 16:33:45,039 - sync_service - INFO - Starting orders sync...
2025-09-01 16:33:45,040 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take'}}, 'response': None, 'status': None}
2025-09-01 16:55:33,669 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:55:33,773 - sync_service - INFO - Starting sales orders sync...
2025-09-01 16:55:33,775 - sync_service - INFO - Starting orders sync...
2025-09-01 16:55:33,777 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 16:55:43,833 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:55:44,768 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:55:45,642 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:55:45,643 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-01 16:55:45,643 - sync_service - INFO - Retrying in 2 seconds...
2025-09-01 16:55:47,645 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 16:55:48,343 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['sap_invoice_23142', 'sap_payment_22338', 'take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 16:55:48,343 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 16:55:48,344 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 16:55:48,345 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 16:55:48,345 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 16:55:48,348 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 16:55:48,349 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:55:48,351 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 16:55:48,352 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 16:55:48,354 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 16:55:48,357 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 16:55:49,078 - sync_service - INFO - SAP login successful
2025-09-01 16:55:49,905 - sync_service - INFO - Found existing customer: C0021068
2025-09-01 16:55:49,907 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 16:55:49,909 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 16:55:51,753 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-01 16:55:51,754 - sync_service - INFO - Created invoice in SAP: 23143
2025-09-01 16:55:51,755 - sync_service - INFO - Order #1015 is paid - creating incoming payment in SAP
2025-09-01 16:55:51,756 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-01 16:55:53,416 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-01 16:55:53,418 - sync_service - INFO - Created incoming payment in SAP: 22339
2025-09-01 16:55:53,419 - sync_service - INFO - Successfully created incoming payment: 22339
2025-09-01 16:56:06,194 - sync_service - INFO - Added tag 'sap_payment_22339' to order gid://shopify/Order/6947886202970
2025-09-01 16:56:18,961 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6947886202970
2025-09-01 16:56:31,778 - sync_service - INFO - Added tag 'sap_invoice_23143' to order gid://shopify/Order/6947886202970
2025-09-01 16:56:33,499 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6947886202970
2025-09-01 16:56:33,504 - sync_service - INFO - Successfully processed order #1015
2025-09-01 16:56:33,506 - sync_service - INFO - ‚úÖ Processed order #1015 -> SAP Invoice: 23143
2025-09-01 16:56:33,507 - sync_service - INFO -    üîë Payment ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:56:33,508 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 345.0
2025-09-01 16:56:33,510 - sync_service - INFO -    üìç Ship To: Catherine Patton - Sag Harbor
2025-09-01 16:56:33,510 - sync_service - INFO -    üìç Bill To: Catherine Patton - Miami Beach
2025-09-01 16:56:33,511 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-01 16:56:33,512 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-01 16:58:34,159 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:58:34,163 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:58:34,165 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        tags\n                    }\n                }\n            }\n        }\n    ', 'variables': {'first': 10, 'after': None, 'query': 'name:#1015'}}, 'response': None, 'status': None}
2025-09-01 16:58:44,185 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:58:51,734 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:58:52,574 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:59:08,632 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 16:59:08,754 - sync_service - INFO - Starting sales orders sync...
2025-09-01 16:59:08,757 - sync_service - INFO - Starting orders sync...
2025-09-01 16:59:08,758 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 16:59:18,820 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 16:59:19,566 - sync_service - INFO - SAP logging client login successful
2025-09-01 16:59:20,547 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 16:59:20,549 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-01 16:59:20,555 - sync_service - INFO - Retrying in 2 seconds...
2025-09-01 16:59:22,572 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 16:59:23,260 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '25.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8382961221722', 'firstName': 'Catherine', 'lastName': 'Patton', 'email': 'catherinepatton01@gmail.com', 'phone': None, 'addresses': [{'address1': '1030 15th St', 'address2': None, 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}, {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356'}, {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None}]}, 'metafields': {'edges': []}, 'tags': ['sap_invoice_23142', 'sap_payment_22339', 'sap_payment_synced', 'take'], 'shippingAddress': {'address1': '1587 Millstone Rd', 'address2': None, 'city': 'Sag Harbor', 'province': 'New York', 'zip': '11963', 'country': 'United States', 'phone': '6145573356', 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'billingAddress': {'address1': '1030 15th Street', 'address2': 'PH 1', 'city': 'Miami Beach', 'province': 'Florida', 'zip': '33139', 'country': 'United States', 'phone': None, 'firstName': 'Catherine', 'lastName': 'Patton', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19149663469658', 'name': 'Medusa Earrings', 'quantity': 1, 'sku': 'FG-0000344', 'originalUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '320.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/41920089587802', 'sku': 'FG-0000344', 'price': '320.00', 'product': {'id': 'gid://shopify/Product/7465071181914', 'title': 'Medusa Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9072713531482', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:41:12Z', 'receiptJson': '{"payment_id":"rgbpjMDC1tTtwUAniNZ3sblMW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072718446682', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:43:50Z', 'receiptJson': '{"payment_id":"rUiVbb0ThZZkWlooBzclmtaL3","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072721297498', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:45:26Z', 'receiptJson': '{"payment_id":"rispaBPcsGU5p0YFubRutHIzW","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072725753946', 'kind': 'SALE', 'status': 'FAILURE', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:48:00Z', 'receiptJson': '{"payment_id":"rSAIZPBoDcCHWzJuZTsMp4HqU","error_code":"processing_error"}'}, {'id': 'gid://shopify/OrderTransaction/9072729030746', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '345.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-08-28T00:49:50Z', 'receiptJson': '{"payment_id":"r40IWk8ImdYLwC09pLErZXQ51"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTQ3ODg2MjAyOTcwLCJsYXN0X3ZhbHVlIjoxNzU2MzQyMjcxMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 16:59:23,263 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 16:59:23,267 - sync_service - INFO - Processing 1 orders from store international
2025-09-01 16:59:23,270 - sync_service - INFO - Processing order #1015 (ID: gid://shopify/Order/6947886202970)
2025-09-01 16:59:23,272 - sync_service - INFO - Processing order: #1015 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 16:59:23,274 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 345.0
2025-09-01 16:59:23,277 - sync_service - INFO - üîë ONLINE PAYMENT ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:59:23,278 - sync_service - INFO - üìç SHIP TO: Catherine Patton | 1587 Millstone Rd | Sag Harbor, New York | 6145573356
2025-09-01 16:59:23,280 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: 1587 Millstone Rd, 11963, Sag Harbor
New York, United States
2025-09-01 16:59:23,281 - sync_service - INFO - üìç BILL TO: Catherine Patton | 1030 15th Street | Miami Beach, Florida | None
2025-09-01 16:59:23,283 - sync_service - INFO - üìç SAP BILLING ADDRESS: 1030 15th Street, PH 1, 33139
Miami Beach, Florida, United States
2025-09-01 16:59:24,061 - sync_service - INFO - SAP login successful
2025-09-01 16:59:25,137 - sync_service - INFO - Found existing customer: C0021068
2025-09-01 16:59:25,139 - sync_service - INFO - Using location-based costing codes for order #1015: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 16:59:25,142 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 25.0}
2025-09-01 16:59:27,043 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-01 16:59:27,047 - sync_service - INFO - Created invoice in SAP: 23144
2025-09-01 16:59:27,049 - sync_service - INFO - Order #1015 is paid - creating incoming payment in SAP
2025-09-01 16:59:27,052 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-01 16:59:28,677 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-01 16:59:28,681 - sync_service - INFO - Created incoming payment in SAP: 22340
2025-09-01 16:59:28,684 - sync_service - INFO - Successfully created incoming payment: 22340
2025-09-01 16:59:30,421 - sync_service - INFO - Added tag 'sap_payment_22340' to order gid://shopify/Order/6947886202970
2025-09-01 16:59:32,056 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6947886202970
2025-09-01 16:59:41,339 - sync_service - INFO - Added tag 'sap_invoice_23144' to order gid://shopify/Order/6947886202970
2025-09-01 16:59:43,010 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6947886202970
2025-09-01 16:59:43,014 - sync_service - INFO - Successfully processed order #1015
2025-09-01 16:59:43,019 - sync_service - INFO - ‚úÖ Processed order #1015 -> SAP Invoice: 23144
2025-09-01 16:59:43,024 - sync_service - INFO -    üîë Payment ID: r40IWk8ImdYLwC09pLErZXQ51
2025-09-01 16:59:43,027 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 345.0
2025-09-01 16:59:43,028 - sync_service - INFO -    üìç Ship To: Catherine Patton - Sag Harbor
2025-09-01 16:59:43,030 - sync_service - INFO -    üìç Bill To: Catherine Patton - Miami Beach
2025-09-01 16:59:43,031 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-01 16:59:43,032 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-01 17:01:16,813 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 17:01:16,899 - sync_service - INFO - Starting sales orders sync...
2025-09-01 17:01:16,900 - sync_service - INFO - Starting orders sync...
2025-09-01 17:01:16,903 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 17:01:17,512 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-01 17:01:17,530 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 17:01:17,661 - sync_service - INFO - No orders to process for store international
2025-09-01 17:01:17,789 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-01 17:01:17,801 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-01 17:51:53,989 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 17:51:54,148 - sync_service - INFO - Starting sales orders sync...
2025-09-01 17:51:54,150 - sync_service - INFO - Starting orders sync...
2025-09-01 17:51:54,153 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 17:52:04,267 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 17:52:06,426 - sync_service - INFO - SAP logging client login successful
2025-09-01 17:52:07,223 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:52:07,232 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-01 17:52:07,238 - sync_service - INFO - Retrying in 2 seconds...
2025-09-01 17:52:09,249 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 17:52:09,929 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-01 17:52:09,937 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 17:52:09,938 - sync_service - INFO - No orders to process for store international
2025-09-01 17:52:09,943 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-01 17:52:09,946 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-01 17:54:41,611 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-01 17:54:41,613 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 17:54:41,647 - sync_service - INFO - Starting sales orders sync...
2025-09-01 17:54:41,649 - sync_service - INFO - Starting orders sync...
2025-09-01 17:54:41,650 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 17:54:42,381 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6321602822210', 'name': '#1484', 'createdAt': '2025-08-07T07:03:43Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': [{'node': {'targetType': 'LINE_ITEM', 'allocationMethod': 'ACROSS', 'value': {'__typename': 'PricingPercentageValue', 'percentage': 10.0}, 'code': 'Cart10'}}]}, 'customer': {'id': 'gid://shopify/Customer/7731241648194', 'firstName': 'Lobna', 'lastName': 'Ghoneim', 'email': 'lobnaghoneim2@gmail.com', 'phone': None, 'addresses': [{'address1': None, 'address2': None, 'city': None, 'province': None, 'zip': None, 'country': 'Egypt', 'phone': None}, {'address1': 'Group 109, Building 8', 'address2': '22', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085'}, {'address1': '215 One katameya, memaar el morshedy', 'address2': None, 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085'}]}, 'metafields': {'edges': []}, 'tags': ['take'], 'shippingAddress': None, 'billingAddress': {'address1': '215 One katameya, memaar el morshedy', 'address2': None, 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085', 'firstName': 'Lobna', 'lastName': 'Ghoneim', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15838190862402', 'name': 'Selene Earrings - Pearl White', 'quantity': 1, 'sku': 'FG-0000271', 'originalUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '590.0', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Cart10'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42003147653186', 'sku': 'FG-0000271', 'price': '5900.00', 'product': {'id': 'gid://shopify/Product/7442023317570', 'title': 'Selene Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8071142998082', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-08-07T07:02:08Z', 'receiptJson': '{"payment_id":"riU3ZmcDnAKmVjWukUESZ4ZoD"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzIxNjAyODIyMjEwLCJsYXN0X3ZhbHVlIjoxNzU0NTUwMjIzMDAwfQ=='}}}, 'status': 'success'}
2025-09-01 17:54:42,381 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-01 17:54:42,383 - sync_service - INFO - Processing 1 orders from store local
2025-09-01 17:54:42,383 - sync_service - INFO - Processing order #1484 (ID: gid://shopify/Order/6321602822210)
2025-09-01 17:54:42,384 - sync_service - INFO - Processing order: #1484 | Payment: PAID | Fulfillment: FULFILLED
2025-09-01 17:54:42,385 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 5310.0
2025-09-01 17:54:42,386 - sync_service - INFO - üîë ONLINE PAYMENT ID: riU3ZmcDnAKmVjWukUESZ4ZoD
2025-09-01 17:54:42,389 - sync_service - INFO - üìç BILL TO: Lobna Ghoneim | 215 One katameya, memaar el morshedy | New cairo, Cairo | 01063178085
2025-09-01 17:54:42,389 - sync_service - INFO - üìç SAP BILLING ADDRESS: 215 One katameya, memaar el morshedy, New cairo, Cairo
Egypt
2025-09-01 17:54:43,334 - sync_service - INFO - SAP login successful
2025-09-01 17:54:44,314 - sync_service - INFO - Found existing customer: C0003041
2025-09-01 17:54:44,319 - sync_service - INFO - Using location-based costing codes for order #1484: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-01 17:54:44,321 - sync_service - INFO - Added discount reason to invoice: Cart10
2025-09-01 17:54:47,333 - sync_service - INFO - SAP logging client login successful
2025-09-01 17:54:48,197 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-01 17:54:48,198 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-01 17:54:48,199 - sync_service - ERROR - Failed to process order #1484: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-01 17:54:50,311 - sync_service - INFO - Added tag 'sap_invoice_failed' to order gid://shopify/Order/6321602822210
2025-09-01 17:54:50,314 - sync_service - INFO - Added invoice failed tag to order #1484
2025-09-01 17:54:50,315 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-01 17:54:50,317 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-01 17:54:50,845 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-01 17:54:50,846 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-01 17:54:50,847 - sync_service - INFO - No orders to process for store international
2025-09-01 17:54:50,848 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-01 17:54:50,849 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-01 17:58:16,520 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-01 17:58:16,522 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-01 17:58:16,560 - sync_service - INFO - Starting price changes sync...
2025-09-01 17:58:16,562 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-01 17:58:16,562 - sync_service - INFO - Processing price changes for store: local
2025-09-01 17:58:17,509 - sync_service - INFO - SAP login successful
2025-09-01 17:58:19,227 - sync_service - INFO - SAP logging client login successful
2025-09-01 17:58:20,081 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-01 17:58:20,084 - sync_service - INFO - Found 3 price changes for store local
2025-09-01 17:58:20,087 - sync_service - INFO - Processing 3 price changes for store local
2025-09-01 17:58:20,087 - sync_service - INFO - Processing variant price change for FG-0000715 (variant ID: gid://shopify/ProductVariant/42387257458754)
2025-09-01 17:58:20,862 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-01 17:58:20,864 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-01 17:58:30,884 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-01 17:58:31,778 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-01 17:58:32,949 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-01 17:58:32,955 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42387257458754 price in store local: GraphQL query error for store local: 
2025-09-01 17:58:33,840 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:58:33,843 - sync_service - INFO - Successfully logged price change for FG-0000715-local: 5000.0
2025-09-01 17:58:33,847 - sync_service - INFO - Successfully processed price change for FG-0000715 (price: 5000.0)
2025-09-01 17:58:34,357 - sync_service - INFO - Processing variant price change for FG-0000716 (variant ID: gid://shopify/ProductVariant/42387257491522)
2025-09-01 17:58:35,425 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-01 17:58:35,444 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257491522'}}, 'response': None, 'status': None}
2025-09-01 17:58:35,959 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}, 'status': 'success'}
2025-09-01 17:58:35,961 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-01 17:58:36,477 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-01 17:58:37,359 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-01 17:58:37,359 - sync_service - ERROR - Error updating variant gid://shopify/ProductVariant/42387257491522 price in store local: 'title'
2025-09-01 17:58:38,426 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:58:38,428 - sync_service - INFO - Successfully logged price change for FG-0000716-local: 5000.0
2025-09-01 17:58:38,431 - sync_service - INFO - Successfully processed price change for FG-0000716 (price: 5000.0)
2025-09-01 17:58:38,939 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-01 17:58:38,940 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-01 17:58:39,462 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'handle': 'mm-whoop-1', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44529379573826'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-01 17:58:39,464 - sync_service - INFO - Updating default variant gid://shopify/ProductVariant/42428545040450 price for product gid://shopify/Product/7539303645250
2025-09-01 17:58:39,941 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-01 17:58:39,941 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42428545040450'}}, 'response': None, 'status': None}
2025-09-01 17:58:40,434 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'compareAtPrice': '5000.00', 'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-01 17:58:40,436 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-01 17:58:40,982 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'handle': 'mm-whoop-1', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44529379573826'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-01 17:58:41,680 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-01 17:58:41,681 - sync_service - ERROR - Error updating product gid://shopify/Product/7539303645250 price in store local: 'title'
2025-09-01 17:58:42,148 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:58:42,150 - sync_service - INFO - Successfully logged price change for FG-0000717-local: 4500.0
2025-09-01 17:58:42,151 - sync_service - INFO - Successfully processed price change for FG-0000717 (price: 4500.0)
2025-09-01 17:58:42,664 - sync_service - INFO - Processing price changes for store: international
2025-09-01 17:58:44,038 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-01 17:58:44,044 - sync_service - INFO - Found 3 price changes for store international
2025-09-01 17:58:44,047 - sync_service - INFO - Processing 3 price changes for store international
2025-09-01 17:58:44,049 - sync_service - INFO - Processing variant price change for FG-0000715 (variant ID: gid://shopify/ProductVariant/42244618616922)
2025-09-01 17:58:44,532 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-01 17:58:44,534 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244618616922'}}, 'response': None, 'status': None}
2025-09-01 17:58:54,555 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 17:58:55,057 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:58:55,559 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:58:55,561 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42244618616922 price in store international: GraphQL query error for store international: 
2025-09-01 17:58:56,047 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:58:56,049 - sync_service - INFO - Successfully logged price change for FG-0000715-international: 0.0
2025-09-01 17:58:56,052 - sync_service - INFO - Successfully processed price change for FG-0000715 (price: 0.0)
2025-09-01 17:58:56,556 - sync_service - INFO - Processing variant price change for FG-0000716 (variant ID: gid://shopify/ProductVariant/42244618649690)
2025-09-01 17:58:57,184 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-01 17:58:57,187 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244618649690'}}, 'response': None, 'status': None}
2025-09-01 17:59:07,215 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-01 17:59:07,571 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:59:07,922 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:59:07,924 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42244618649690 price in store international: GraphQL query error for store international: 
2025-09-01 17:59:08,292 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:59:08,293 - sync_service - INFO - Successfully logged price change for FG-0000716-international: 0.0
2025-09-01 17:59:08,296 - sync_service - INFO - Successfully processed price change for FG-0000716 (price: 0.0)
2025-09-01 17:59:08,811 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-01 17:59:08,817 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-01 17:59:09,316 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'handle': 'mm-whoop', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341850079322'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-01 17:59:09,317 - sync_service - INFO - Updating default variant gid://shopify/ProductVariant/42244570579034 price for product gid://shopify/Product/7573041905754
2025-09-01 17:59:09,728 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-01 17:59:09,731 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244570579034'}}, 'response': None, 'status': None}
2025-09-01 17:59:10,229 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-01 17:59:10,234 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-01 17:59:10,804 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'handle': 'mm-whoop', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341850079322'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-01 17:59:11,195 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-01 17:59:11,197 - sync_service - ERROR - Error updating product gid://shopify/Product/7573041905754 price in store international: 'title'
2025-09-01 17:59:11,601 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-01 17:59:11,604 - sync_service - INFO - Successfully logged price change for FG-0000717-international: 0.0
2025-09-01 17:59:11,608 - sync_service - INFO - Successfully processed price change for FG-0000717 (price: 0.0)
2025-09-01 17:59:12,116 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 6, 'success_count': 6, 'error_count': 0, 'details': None}
2025-09-01 17:59:12,120 - sync_service - INFO - Price changes sync completed: 6 processed, 6 successful, 0 errors
2025-09-02 17:05:48,607 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 17:05:48,610 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 17:05:48,645 - sync_service - INFO - Starting price changes sync...
2025-09-02 17:05:48,645 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 17:05:48,646 - sync_service - INFO - Processing price changes for store: local
2025-09-02 17:05:49,605 - sync_service - INFO - SAP login successful
2025-09-02 17:05:51,566 - sync_service - INFO - SAP logging client login successful
2025-09-02 17:05:52,475 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 17:05:52,479 - sync_service - INFO - Found 3 price changes for store local
2025-09-02 17:05:52,513 - sync_service - INFO - Processing 3 price changes for store local
2025-09-02 17:05:52,513 - sync_service - INFO - Processing variant price change for FG-0000715 (variant ID: gid://shopify/ProductVariant/42387257458754)
2025-09-02 17:05:53,394 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 17:05:53,396 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 17:06:03,407 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 17:06:04,233 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 17:06:05,024 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 17:06:05,025 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42387257458754 price in store local: GraphQL query error for store local: 
2025-09-02 17:06:05,774 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:05,777 - sync_service - INFO - Successfully logged price change for FG-0000715-local: 5000.0
2025-09-02 17:06:05,778 - sync_service - INFO - Successfully processed price change for FG-0000715 (price: 5000.0)
2025-09-02 17:06:06,287 - sync_service - INFO - Processing variant price change for FG-0000716 (variant ID: gid://shopify/ProductVariant/42387257491522)
2025-09-02 17:06:07,045 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 17:06:07,047 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257491522'}}, 'response': None, 'status': None}
2025-09-02 17:06:07,597 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}, 'status': 'success'}
2025-09-02 17:06:07,598 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-02 17:06:08,091 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:08,777 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 17:06:08,779 - sync_service - ERROR - Error updating variant gid://shopify/ProductVariant/42387257491522 price in store local: 'title'
2025-09-02 17:06:09,429 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:09,430 - sync_service - INFO - Successfully logged price change for FG-0000716-local: 5000.0
2025-09-02 17:06:09,432 - sync_service - INFO - Successfully processed price change for FG-0000716 (price: 5000.0)
2025-09-02 17:06:09,949 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-02 17:06:09,952 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 17:06:18,623 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'handle': 'mm-whoop-1', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44529379573826'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:18,627 - sync_service - INFO - Updating default variant gid://shopify/ProductVariant/42428545040450 price for product gid://shopify/Product/7539303645250
2025-09-02 17:06:19,008 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 17:06:19,010 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42428545040450'}}, 'response': None, 'status': None}
2025-09-02 17:06:19,523 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'compareAtPrice': '5000.00', 'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-02 17:06:19,524 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 17:06:20,027 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'handle': 'mm-whoop-1', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44529379573826'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:20,377 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 17:06:20,379 - sync_service - ERROR - Error updating product gid://shopify/Product/7539303645250 price in store local: 'title'
2025-09-02 17:06:20,730 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:20,732 - sync_service - INFO - Successfully logged price change for FG-0000717-local: 4000.0
2025-09-02 17:06:20,737 - sync_service - INFO - Successfully processed price change for FG-0000717 (price: 4000.0)
2025-09-02 17:06:21,243 - sync_service - INFO - Processing price changes for store: international
2025-09-02 17:06:22,495 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 17:06:22,498 - sync_service - INFO - Found 3 price changes for store international
2025-09-02 17:06:22,499 - sync_service - INFO - Processing 3 price changes for store international
2025-09-02 17:06:22,501 - sync_service - INFO - Processing variant price change for FG-0000715 (variant ID: gid://shopify/ProductVariant/42244618616922)
2025-09-02 17:06:22,944 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 17:06:22,946 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244618616922'}}, 'response': None, 'status': None}
2025-09-02 17:06:23,508 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42244618616922', 'sku': 'FG-0000715', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7573054095450', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 17:06:23,509 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573054095450'}}, 'response': None, 'status': None}
2025-09-02 17:06:33,523 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-02 17:06:33,882 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 17:06:34,243 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 17:06:34,246 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42244618616922 price in store international: GraphQL query error for store international: 
2025-09-02 17:06:34,644 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:34,646 - sync_service - INFO - Successfully logged price change for FG-0000715-international: 300.0
2025-09-02 17:06:34,647 - sync_service - INFO - Successfully processed price change for FG-0000715 (price: 300.0)
2025-09-02 17:06:35,163 - sync_service - INFO - Processing variant price change for FG-0000716 (variant ID: gid://shopify/ProductVariant/42244618649690)
2025-09-02 17:06:35,733 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 17:06:35,738 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244618649690'}}, 'response': None, 'status': None}
2025-09-02 17:06:36,219 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42244618649690', 'sku': 'FG-0000716', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7573054095450', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}, 'status': 'success'}
2025-09-02 17:06:36,221 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573054095450'}}, 'response': None, 'status': None}
2025-09-02 17:06:36,728 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573054095450', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244618616922', 'sku': 'FG-0000715', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341898117210'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42244618649690', 'sku': 'FG-0000716', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341898149978'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:37,044 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 17:06:37,045 - sync_service - ERROR - Error updating variant gid://shopify/ProductVariant/42244618649690 price in store international: 'title'
2025-09-02 17:06:37,440 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:37,441 - sync_service - INFO - Successfully logged price change for FG-0000716-international: 300.0
2025-09-02 17:06:37,443 - sync_service - INFO - Successfully processed price change for FG-0000716 (price: 300.0)
2025-09-02 17:06:37,961 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-02 17:06:37,963 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 17:06:38,502 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'handle': 'mm-whoop', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341850079322'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:38,504 - sync_service - INFO - Updating default variant gid://shopify/ProductVariant/42244570579034 price for product gid://shopify/Product/7573041905754
2025-09-02 17:06:38,823 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 17:06:38,825 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244570579034'}}, 'response': None, 'status': None}
2025-09-02 17:06:39,309 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-02 17:06:39,312 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 17:06:39,774 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'handle': 'mm-whoop', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341850079322'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-02 17:06:40,065 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 17:06:40,069 - sync_service - ERROR - Error updating product gid://shopify/Product/7573041905754 price in store international: 'title'
2025-09-02 17:06:40,365 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 17:06:40,370 - sync_service - INFO - Successfully logged price change for FG-0000717-international: 320.0
2025-09-02 17:06:40,373 - sync_service - INFO - Successfully processed price change for FG-0000717 (price: 320.0)
2025-09-02 17:06:40,876 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 6, 'success_count': 6, 'error_count': 0, 'details': None}
2025-09-02 17:06:40,878 - sync_service - INFO - Price changes sync completed: 6 processed, 6 successful, 0 errors
2025-09-02 17:06:40,879 - sync_service - INFO - Starting sales orders sync...
2025-09-02 17:06:40,879 - sync_service - INFO - Starting orders sync...
2025-09-02 17:06:40,880 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-02 17:06:50,909 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 17:06:51,191 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 17:06:51,225 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-02 17:06:51,226 - sync_service - INFO - Retrying in 2 seconds...
2025-09-02 17:06:53,237 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-02 17:06:53,952 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6321602822210', 'name': '#1484', 'createdAt': '2025-08-07T07:03:43Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': [{'node': {'targetType': 'LINE_ITEM', 'allocationMethod': 'ACROSS', 'value': {'__typename': 'PricingPercentageValue', 'percentage': 10.0}, 'code': 'Cart10'}}]}, 'customer': {'id': 'gid://shopify/Customer/7731241648194', 'firstName': 'Lobna', 'lastName': 'Ghoneim', 'email': 'lobnaghoneim2@gmail.com', 'phone': None, 'addresses': [{'address1': None, 'address2': None, 'city': None, 'province': None, 'zip': None, 'country': 'Egypt', 'phone': None}, {'address1': 'Group 109, Building 8', 'address2': '22', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085'}, {'address1': '215 One katameya, memaar el morshedy', 'address2': None, 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085'}]}, 'metafields': {'edges': []}, 'tags': ['take'], 'shippingAddress': None, 'billingAddress': {'address1': '215 One katameya, memaar el morshedy', 'address2': None, 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01063178085', 'firstName': 'Lobna', 'lastName': 'Ghoneim', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15838190862402', 'name': 'Selene Earrings - Pearl White', 'quantity': 1, 'sku': 'FG-0000271', 'originalUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '590.0', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Cart10'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42003147653186', 'sku': 'FG-0000271', 'price': '5900.00', 'product': {'id': 'gid://shopify/Product/7442023317570', 'title': 'Selene Earrings'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8071142998082', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '5310.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-08-07T07:02:08Z', 'receiptJson': '{"payment_id":"riU3ZmcDnAKmVjWukUESZ4ZoD"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzIxNjAyODIyMjEwLCJsYXN0X3ZhbHVlIjoxNzU0NTUwMjIzMDAwfQ=='}}}, 'status': 'success'}
2025-09-02 17:06:53,954 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-02 17:06:53,955 - sync_service - INFO - Processing 1 orders from store local
2025-09-02 17:06:53,955 - sync_service - INFO - Processing order #1484 (ID: gid://shopify/Order/6321602822210)
2025-09-02 17:06:53,956 - sync_service - INFO - Processing order: #1484 | Payment: PAID | Fulfillment: FULFILLED
2025-09-02 17:06:53,956 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 5310.0
2025-09-02 17:06:53,956 - sync_service - INFO - üîë ONLINE PAYMENT ID: riU3ZmcDnAKmVjWukUESZ4ZoD
2025-09-02 17:06:53,957 - sync_service - INFO - üìç BILL TO: Lobna Ghoneim | 215 One katameya, memaar el morshedy | New cairo, Cairo | 01063178085
2025-09-02 17:06:53,957 - sync_service - INFO - üìç SAP BILLING ADDRESS: 215 One katameya, memaar el morshedy, New cairo, Cairo
Egypt
2025-09-02 17:06:54,373 - sync_service - INFO - Found existing customer: C0003041
2025-09-02 17:06:54,375 - sync_service - INFO - Using location-based costing codes for order #1484: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-02 17:06:54,376 - sync_service - INFO - Added discount reason to invoice: Cart10
2025-09-02 17:06:56,192 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-02 17:06:56,194 - sync_service - INFO - Created invoice in SAP: 23146
2025-09-02 17:06:56,196 - sync_service - INFO - Order #1484 is paid - creating incoming payment in SAP
2025-09-02 17:06:56,197 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-02 17:06:57,348 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-02 17:06:57,352 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-02 17:06:57,354 - sync_service - WARNING - Failed to create incoming payment for #1484: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-02 17:07:06,117 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6321602822210
2025-09-02 17:07:08,026 - sync_service - INFO - Added tag 'sap_invoice_23146' to order gid://shopify/Order/6321602822210
2025-09-02 17:07:09,731 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6321602822210
2025-09-02 17:07:09,737 - sync_service - INFO - Successfully processed order #1484
2025-09-02 17:07:09,741 - sync_service - INFO - ‚úÖ Processed order #1484 -> SAP Invoice: 23146
2025-09-02 17:07:09,743 - sync_service - INFO -    üîë Payment ID: riU3ZmcDnAKmVjWukUESZ4ZoD
2025-09-02 17:07:09,744 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 5310.0
2025-09-02 17:07:09,753 - sync_service - INFO -    üìç Bill To: Lobna Ghoneim - New cairo
2025-09-02 17:07:09,757 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-02 17:07:19,789 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-02 17:07:20,116 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 17:07:20,117 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-02 17:07:20,117 - sync_service - INFO - Retrying in 2 seconds...
2025-09-02 17:07:22,126 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 5, 'after': None, 'query': 'tag:take -tag:sap_invoice_synced -tag:sap_invoice_failed'}}, 'response': None, 'status': None}
2025-09-02 17:07:22,662 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-02 17:07:22,697 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-02 17:07:22,698 - sync_service - INFO - No orders to process for store international
2025-09-02 17:07:22,699 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-02 17:07:22,700 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-02 18:43:47,017 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:43:47,017 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:43:47,031 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:43:47,033 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:43:47,037 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:43:47,616 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'title': 'Blue', 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:43:47,619 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    title\n                    handle\n                    description\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                sku\n                                price\n                                title\n                                inventoryItem {\n                                    id\n                                }\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-02 18:43:48,083 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-02 18:44:41,828 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:44:41,829 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:44:41,839 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:44:41,840 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:44:41,841 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:44:42,459 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'title': 'Blue', 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:44:42,461 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query GetProduct($id: ID!) {\n                product(id: $id) {\n                    id\n                    title\n                    handle\n                    description\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                sku\n                                price\n                                title\n                                inventoryItem {\n                                    id\n                                }\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-02 18:44:42,951 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-02 18:44:42,951 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            mutation productUpdate($input: ProductInput!) {\n                productUpdate(input: $input) {\n                    product {\n                        id\n                        title\n                        variants(first: 10) {\n                            edges {\n                                node {\n                                    id\n                                    sku\n                                    price\n                                    title\n                                    selectedOptions {\n                                        name\n                                        value\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n            ', 'variables': {'input': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '4500.00', 'title': 'Blue'}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow'}]}}}, 'response': None, 'status': None}
2025-09-02 18:44:43,412 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '4500.00', 'title': 'Blue'}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42387257458754",
            "sku": "FG-0000715",
            "price": "4500.00",
            "title": "Blue"
          },
          {
            "id": "gid://shopify/ProductVariant/42387257491522",
            "sku": "FG-0000716",
            "price": "5000.00",
            "title": "Yellow"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-02 18:45:05,310 - sync_service - ERROR - SAP logging client login error: All connection attempts failed
2025-09-02 18:45:05,310 - sync_service - ERROR - Failed to add API log to SAP: Failed to login to SAP
2025-09-02 18:46:42,412 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:46:42,412 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:46:42,414 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:46:42,418 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:46:42,418 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:46:42,913 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'title': 'Blue', 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:46:42,915 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantUpdate($input: ProductVariantInput!) {\n            productVariantUpdate(input: $input) {\n                productVariant {\n                    id\n                    sku\n                    price\n                    title\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/ProductVariant/42387257458754', 'price': '4500.00'}}}, 'response': None, 'status': None}
2025-09-02 18:46:43,389 - sync_service - ERROR - GraphQL query error for store local: {'message': "Field 'productVariantUpdate' doesn't exist on type 'Mutation'", 'locations': [{'line': 2, 'column': 3}], 'path': ['mutation productVariantUpdate', 'productVariantUpdate'], 'extensions': {'code': 'undefinedField', 'typeName': 'Mutation', 'fieldName': 'productVariantUpdate'}}
GraphQL Errors: [
  {
    "message": "Field 'productVariantUpdate' doesn't exist on type 'Mutation'",
    "locations": [
      {
        "line": 2,
        "column": 3
      }
    ],
    "path": [
      "mutation productVariantUpdate",
      "productVariantUpdate"
    ],
    "extensions": {
      "code": "undefinedField",
      "typeName": "Mutation",
      "fieldName": "productVariantUpdate"
    }
  },
  {
    "message": "Variable $input is declared by productVariantUpdate but not used",
    "locations": [
      {
        "line": 1,
        "column": 1
      }
    ],
    "path": [
      "mutation productVariantUpdate"
    ],
    "extensions": {
      "code": "variableNotUsed",
      "variableName": "input"
    }
  }
]
2025-09-02 18:47:05,043 - sync_service - ERROR - SAP logging client login error: All connection attempts failed
2025-09-02 18:47:05,049 - sync_service - ERROR - Failed to add API log to SAP: Failed to login to SAP
2025-09-02 18:47:05,056 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query IntrospectProductVariantInput {\n                __type(name: "ProductVariantInput") {\n                    inputFields {\n                        name\n                        type {\n                            name\n                            kind\n                        }\n                    }\n                }\n            }\n            ', 'variables': {}}, 'response': None, 'status': None}
2025-09-02 18:47:05,580 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'__type': None}, 'status': 'success'}
2025-09-02 18:47:46,609 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:47:46,609 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:47:46,614 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:47:46,614 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:47:46,616 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:47:47,152 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'title': 'Blue', 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:47:47,152 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantUpdate($input: ProductVariantInput!) {\n            productVariantUpdate(input: $input) {\n                productVariant {\n                    id\n                    sku\n                    price\n                    title\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/ProductVariant/42387257458754', 'price': '4500.00'}}}, 'response': None, 'status': None}
2025-09-02 18:47:47,683 - sync_service - ERROR - GraphQL query error for store local: {'message': "Field 'productVariantUpdate' doesn't exist on type 'Mutation'", 'locations': [{'line': 2, 'column': 3}], 'path': ['mutation productVariantUpdate', 'productVariantUpdate'], 'extensions': {'code': 'undefinedField', 'typeName': 'Mutation', 'fieldName': 'productVariantUpdate'}}
GraphQL Errors: [
  {
    "message": "Field 'productVariantUpdate' doesn't exist on type 'Mutation'",
    "locations": [
      {
        "line": 2,
        "column": 3
      }
    ],
    "path": [
      "mutation productVariantUpdate",
      "productVariantUpdate"
    ],
    "extensions": {
      "code": "undefinedField",
      "typeName": "Mutation",
      "fieldName": "productVariantUpdate"
    }
  },
  {
    "message": "Variable $input is declared by productVariantUpdate but not used",
    "locations": [
      {
        "line": 1,
        "column": 1
      }
    ],
    "path": [
      "mutation productVariantUpdate"
    ],
    "extensions": {
      "code": "variableNotUsed",
      "variableName": "input"
    }
  }
]
2025-09-02 18:48:09,214 - sync_service - ERROR - SAP logging client login error: All connection attempts failed
2025-09-02 18:48:09,215 - sync_service - ERROR - Failed to add API log to SAP: Failed to login to SAP
2025-09-02 18:48:09,218 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query IntrospectMutation {\n                __type(name: "Mutation") {\n                    fields {\n                        name\n                        description\n                    }\n                }\n            }\n            ', 'variables': {}}, 'response': None, 'status': None}
2025-09-02 18:48:09,927 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'__type': {'fields': [{'name': 'abandonmentUpdateActivitiesDeliveryStatuses', 'description': 'Updates the marketing activities delivery statuses for an abandonment.'}, {'name': 'appPurchaseOneTimeCreate', 'description': "Charges a shop for features or services one time.\nThis type of charge is recommended for apps that aren't billed on a recurring basis.\nTest and demo shops aren't charged."}, {'name': 'appRevokeAccessScopes', 'description': 'Revokes access scopes previously granted for an app installation.'}, {'name': 'appSubscriptionCancel', 'description': 'Cancels an app subscription on a store.'}, {'name': 'appSubscriptionCreate', 'description': 'Allows an app to charge a store for features or services on a recurring basis.'}, {'name': 'appSubscriptionLineItemUpdate', 'description': 'Updates the capped amount on the usage pricing plan of an app subscription line item.'}, {'name': 'appSubscriptionTrialExtend', 'description': 'Extends the trial of an app subscription.'}, {'name': 'appUninstall', 'description': 'Uninstalls an app.'}, {'name': 'appUsageRecordCreate', 'description': 'Enables an app to charge a store for features or services on a per-use basis.\nThe usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.\nIf you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.'}, {'name': 'articleCreate', 'description': 'Creates an article.'}, {'name': 'articleDelete', 'description': 'Deletes an article.'}, {'name': 'articleUpdate', 'description': 'Updates an article.'}, {'name': 'backupRegionUpdate', 'description': 'Update the backup region that is used when we have no better signal of what region a buyer is in.'}, {'name': 'blogCreate', 'description': 'Creates a blog.'}, {'name': 'blogDelete', 'description': 'Deletes a blog.'}, {'name': 'blogUpdate', 'description': 'Updates a blog.'}, {'name': 'bulkOperationCancel', 'description': 'Starts the cancelation process of a running bulk operation.\n\nThere may be a short delay from when a cancelation starts until the operation is actually canceled.'}, {'name': 'bulkOperationRunMutation', 'description': 'Creates and runs a bulk operation mutation.\n\nTo learn how to bulk import large volumes of data asynchronously, refer to the\n[bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).'}, {'name': 'bulkOperationRunQuery', 'description': 'Creates and runs a bulk operation query.\n\nSee the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/queries) for more details.'}, {'name': 'bulkProductResourceFeedbackCreate', 'description': 'Creates product feedback for multiple products.'}, {'name': 'carrierServiceCreate', 'description': 'Creates a new carrier service.'}, {'name': 'carrierServiceDelete', 'description': 'Removes an existing carrier service.'}, {'name': 'carrierServiceUpdate', 'description': 'Updates a carrier service. Only the app that creates a carrier service can update it.'}, {'name': 'cartTransformCreate', 'description': 'Create a CartTransform function to the Shop.'}, {'name': 'cartTransformDelete', 'description': 'Destroy a cart transform function from the Shop.'}, {'name': 'catalogContextUpdate', 'description': 'Updates the context of a catalog.'}, {'name': 'catalogCreate', 'description': 'Creates a new catalog.'}, {'name': 'catalogDelete', 'description': 'Delete a catalog.'}, {'name': 'catalogUpdate', 'description': 'Updates an existing catalog.'}, {'name': 'checkoutBrandingUpsert', 'description': "Updates the checkout branding settings for a\n[checkout profile](https://shopify.dev/api/admin-graphql/unstable/queries/checkoutProfile).\n\nIf the settings don't exist, then new settings are created. The checkout branding settings applied to a\npublished checkout profile will be immediately visible within the store's checkout. The checkout branding\nsettings applied to a draft checkout profile could be previewed within the admin checkout editor.\n\nTo learn more about updating checkout branding settings, refer to the checkout branding\n[tutorial](https://shopify.dev/docs/apps/checkout/styling)."}, {'name': 'collectionAddProducts', 'description': 'Adds multiple products to an existing collection in a single operation. This mutation provides an efficient way to bulk-manage collection membership without individual product updates.\n\nFor example, when merchants create seasonal collections, they can add dozens of related products at once rather than updating each product individually. A clothing store might add all winter jackets to a "Winter Collection" in one operation.\n\nUse `CollectionAddProducts` to:\n- Bulk-add products to collections for efficient catalog management\n- Implement collection building tools in admin interfaces\n- Organize collection membership during bulk product operations\n- Reduce API calls when managing large product sets\n\nThe mutation processes multiple product additions and returns success status along with any errors encountered during the operation. Products are added to the collection while preserving existing collection settings.\n\nThis operation only works with manual collections where merchants explicitly choose which products to include. It will return an error if used with smart collections that automatically include products based on conditions.\n\nLearn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).'}, {'name': 'collectionAddProductsV2', 'description': 'Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.'}, {'name': 'collectionCreate', 'description': 'Creates a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)\nto group [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) together\nin the [online store](https://shopify.dev/docs/apps/build/online-store) and\nother [sales channels](https://shopify.dev/docs/apps/build/sales-channels).\nFor example, an athletics store might create different collections for running attire, shoes, and accessories.\n\nThere are two types of collections:\n\n- **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.\n- **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically\nincluded in the collection.\n\nUse the `collectionCreate` mutation when you need to:\n\n- Create a new collection for a product launch or campaign\n- Organize products by category, season, or promotion\n- Automate product grouping using rules (for example, by tag, type, or price)\n\n> Note:\n> The created collection is unpublished by default. To make it available to customers,\nuse the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)\nmutation after creation.\n\nLearn more about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).'}, {'name': 'collectionDelete', 'description': 'Deletes a collection and removes it permanently from the store. This operation cannot be undone and will remove the collection from all sales channels where it was published.\n\nFor example, when merchants discontinue seasonal promotions or reorganize their catalog structure, they can delete outdated collections like "Back to School 2023" to keep their store organized.\n\nUse `CollectionDelete` to:\n- Remove outdated or unused collections from stores\n- Clean up collection structures during catalog reorganization\n- Implement collection management tools with deletion capabilities\n\nProducts within the deleted collection remain in the store but are no longer grouped under that collection.\n\nLearn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).'}, {'name': 'collectionRemoveProducts', 'description': 'Removes multiple products from a collection in a single operation. This mutation can process large product sets (up to 250 products) and may take significant time to complete for collections with many products.\n\nFor example, when ending a seasonal promotion, merchants can remove all sale items from a "Summer Clearance" collection at once rather than editing each product individually.\n\nUse `CollectionRemoveProducts` to:\n- Bulk-remove products from collections efficiently\n- Clean up collection membership during catalog updates\n- Implement automated collection management workflows\n\nThe operation processes asynchronously to avoid timeouts and performance issues, especially for large product sets.\n\nLearn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).'}, {'name': 'collectionReorderProducts', 'description': 'Asynchronously reorders products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder) must be `MANUAL`.\n\nHow to use this mutation:\n- Provide only the products that actually moved in the `moves` list; do not send the entire product list. For example: to move the product at index 1 to index N, send a single move for that product with `newPosition: N`.\n- Each move is applied sequentially in the order provided.\n- `newPosition` is a zero-based index within the collection at the moment the move is applied (after any prior moves in the list).\n- Products not included in `moves` keep their relative order, aside from any displacement caused by the moves.\n- If `newPosition` is greater than or equal to the number of products, the product is placed at the end.\n\nExample:\n- Initial order: [A, B, C, D, E] (indices 0..4)\n- Moves (applied in order):\n  - E -> newPosition: 1\n  - C -> newPosition: 4\n- Result: [A, E, B, D, C]\n\nDisplaced products will have their position altered in a consistent manner with no gaps.'}, {'name': 'collectionUpdate', 'description': "Updates a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection),\nmodifying its properties, products, or publication settings. Collections help organize\n[products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) together\nin the [online store](https://shopify.dev/docs/apps/build/online-store) and\nother [sales channels](https://shopify.dev/docs/apps/build/sales-channels).\n\nUse the `collectionUpdate` mutation to programmatically modify collections in scenarios such as:\n\n- Updating collection details, like title, description, or image\n- Modifying SEO metadata for better search visibility\n- Changing which products are included (using rule updates for smart collections)\n- Publishing or unpublishing collections across different sales channels\n- Updating custom data using [metafields](https://shopify.dev/docs/apps/build/custom-data/metafields)\n\nThere are two types of collections with different update capabilities:\n\n- **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You can update collection properties, but rule sets can't be modified since products are manually selected.\n- **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You can update both collection properties and the rules that automatically determine which products are included.\nWhen updating [rule sets](https://shopify.dev/docs/api/admin-graphql/latest/objects/CollectionRuleConditions) for smart collections, the operation might be processed asynchronously. In these cases, the mutation returns a [`job`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Job) object that you can use to track the progress of the update.\n\nTo publish or unpublish collections to specific sales channels, use the dedicated\n[`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish) and\n[`publishableUnpublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishableUnpublish) mutations.\n\nLearn more about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities)."}, {'name': 'combinedListingUpdate', 'description': 'Add, remove and update `CombinedListing`s of a given Product.\n\n`CombinedListing`s are comprised of multiple products to create a single listing. There are two kinds of products used in a `CombinedListing`:\n\n1. Parent products\n2. Child products\n\nThe parent product is created with a `productCreate` with a `CombinedListingRole` of `PARENT`. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).\n\nChild products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).\n\nThe combined listing is the association of parent product to one or more child products.\n\nLearn more about [Combined Listings](https://shopify.dev/apps/selling-strategies/combined-listings).'}, {'name': 'commentApprove', 'description': 'Approves a comment.'}, {'name': 'commentDelete', 'description': 'Deletes a comment.'}, {'name': 'commentNotSpam', 'description': 'Marks a comment as not spam.'}, {'name': 'commentSpam', 'description': 'Marks a comment as spam.'}, {'name': 'companiesDelete', 'description': 'Deletes a list of companies.'}, {'name': 'companyAddressDelete', 'description': 'Deletes a company address.'}, {'name': 'companyAssignCustomerAsContact', 'description': 'Assigns the customer as a company contact.'}, {'name': 'companyAssignMainContact', 'description': 'Assigns the main contact for the company.'}, {'name': 'companyContactAssignRole', 'description': 'Assigns a role to a contact for a location.'}, {'name': 'companyContactAssignRoles', 'description': 'Assigns roles on a company contact.'}, {'name': 'companyContactCreate', 'description': 'Creates a company contact and the associated customer.'}, {'name': 'companyContactDelete', 'description': 'Deletes a company contact.'}, {'name': 'companyContactRemoveFromCompany', 'description': 'Removes a company contact from a Company.'}, {'name': 'companyContactRevokeRole', 'description': 'Revokes a role on a company contact.'}, {'name': 'companyContactRevokeRoles', 'description': 'Revokes roles on a company contact.'}, {'name': 'companyContactSendWelcomeEmail', 'description': 'Sends the company contact a welcome email.'}, {'name': 'companyContactUpdate', 'description': 'Updates a company contact.'}, {'name': 'companyContactsDelete', 'description': 'Deletes one or more company contacts.'}, {'name': 'companyCreate', 'description': 'Creates a company.'}, {'name': 'companyDelete', 'description': 'Deletes a company.'}, {'name': 'companyLocationAssignAddress', 'description': 'Updates an address on a company location.'}, {'name': 'companyLocationAssignRoles', 'description': 'Assigns roles on a company location.'}, {'name': 'companyLocationAssignStaffMembers', 'description': 'Creates one or more mappings between a staff member at a shop and a company location.'}, {'name': 'companyLocationCreate', 'description': 'Creates a company location.'}, {'name': 'companyLocationDelete', 'description': 'Deletes a company location.'}, {'name': 'companyLocationRemoveStaffMembers', 'description': 'Deletes one or more existing mappings between a staff member at a shop and a company location.'}, {'name': 'companyLocationRevokeRoles', 'description': 'Revokes roles on a company location.'}, {'name': 'companyLocationTaxSettingsUpdate', 'description': 'Sets the tax settings for a company location.'}, {'name': 'companyLocationUpdate', 'description': 'Updates a company location.'}, {'name': 'companyLocationsDelete', 'description': 'Deletes a list of company locations.'}, {'name': 'companyRevokeMainContact', 'description': 'Revokes the main contact from the company.'}, {'name': 'companyUpdate', 'description': 'Updates a company.'}, {'name': 'consentPolicyUpdate', 'description': 'Update or create consent policies in bulk.'}, {'name': 'customerAddTaxExemptions', 'description': 'Add tax exemptions for the customer.'}, {'name': 'customerAddressCreate', 'description': 'Create a new customer address.'}, {'name': 'customerAddressDelete', 'description': "Deletes a customer's address."}, {'name': 'customerAddressUpdate', 'description': "Update a customer's address information."}, {'name': 'customerCancelDataErasure', 'description': "Cancels a pending erasure of a customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#cancel-customer-data-erasure).\n\nTo request an erasure of a customer's data use the [customerRequestDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerRequestDataErasure)."}, {'name': 'customerCreate', 'description': 'Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).'}, {'name': 'customerDelete', 'description': 'Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).'}, {'name': 'customerEmailMarketingConsentUpdate', 'description': "Update a customer's email marketing information information."}, {'name': 'customerGenerateAccountActivationUrl', 'description': 'Generate an account activation URL for a customer.'}, {'name': 'customerMerge', 'description': 'Merges two customers.'}, {'name': 'customerPaymentMethodCreateFromDuplicationData', 'description': 'Creates a vaulted payment method for a customer from duplication data.\n\nThis data must be obtained from another shop within the same organization.\n\nCurrently, this only supports Shop Pay payment methods. This is only available for selected partner apps.'}, {'name': 'customerPaymentMethodCreditCardCreate', 'description': 'Creates a credit card payment method for a customer using a session id.\nThese values are only obtained through card imports happening from a PCI compliant environment.\nPlease use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.'}, {'name': 'customerPaymentMethodCreditCardUpdate', 'description': 'Updates the credit card payment method for a customer.'}, {'name': 'customerPaymentMethodGetDuplicationData', 'description': 'Returns encrypted data that can be used to duplicate the payment method in another shop within the same organization.\n\nCurrently, this only supports Shop Pay payment methods. This is only available for selected partner apps.'}, {'name': 'customerPaymentMethodGetUpdateUrl', 'description': 'Returns a URL that allows the customer to update a specific payment method.\n\nCurrently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.'}, {'name': 'customerPaymentMethodPaypalBillingAgreementCreate', 'description': 'Creates a PayPal billing agreement for a customer.'}, {'name': 'customerPaymentMethodPaypalBillingAgreementUpdate', 'description': 'Updates a PayPal billing agreement for a customer.'}, {'name': 'customerPaymentMethodRemoteCreate', 'description': 'Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds).'}, {'name': 'customerPaymentMethodRevoke', 'description': "Revokes a customer's payment method."}, {'name': 'customerPaymentMethodSendUpdateEmail', 'description': 'Sends a link to the customer so they can update a specific payment method.'}, {'name': 'customerRemoveTaxExemptions', 'description': 'Remove tax exemptions from a customer.'}, {'name': 'customerReplaceTaxExemptions', 'description': 'Replace tax exemptions for a customer.'}, {'name': 'customerRequestDataErasure', 'description': "Enqueues a request to erase customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#erase-customer-personal-data).\n\nTo cancel the data erasure request use the [customerCancelDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerCancelDataErasure)."}, {'name': 'customerSegmentMembersQueryCreate', 'description': 'Creates a customer segment members query.'}, {'name': 'customerSendAccountInviteEmail', 'description': 'Sends the customer an account invite email.'}, {'name': 'customerSet', 'description': "Creates or updates a customer in a single mutation.\n\nUse this mutation when syncing information from an external data source into Shopify.\n\nThis mutation can be used to create a new customer, update an existing customer by id, or\nupsert a customer by a unique key (email or phone).\n\nTo create a new customer omit the `identifier` argument.\nTo update an existing customer, include the `identifier` with the id of the customer to update.\n\nTo perform an 'upsert' by unique key (email or phone)\nuse the `identifier` argument to upsert a customer by a unique key (email or phone). If a customer\nwith the specified unique key exists, it will be updated. If not, a new customer will be created with\nthat unique key.\n\nAs of API version 2022-10, apps using protected customer data must meet the\nprotected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data)\n\nAny list field (e.g.\n[addresses](https://shopify.dev/api/admin-graphql/unstable/input-objects/MailingAddressInput),\nwill be updated so that all included entries are either created or updated, and all existing entries not\nincluded will be deleted.\n\nAll other fields will be updated to the value passed. Omitted fields will not be updated."}, {'name': 'customerSmsMarketingConsentUpdate', 'description': "Update a customer's SMS marketing consent information."}, {'name': 'customerUpdate', 'description': "Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data)."}, {'name': 'customerUpdateDefaultAddress', 'description': "Updates a customer's default address."}, {'name': 'dataSaleOptOut', 'description': 'Opt out a customer from data sale.'}, {'name': 'delegateAccessTokenCreate', 'description': 'Creates a delegate access token.\n\nTo learn more about creating delegate access tokens, refer to\n[Delegate OAuth access tokens to subsystems](https://shopify.dev/docs/apps/build/authentication-authorization/access-tokens/use-delegate-tokens).'}, {'name': 'delegateAccessTokenDestroy', 'description': 'Destroys a delegate access token.'}, {'name': 'deliveryCustomizationActivation', 'description': 'Activates and deactivates delivery customizations.'}, {'name': 'deliveryCustomizationCreate', 'description': 'Creates a delivery customization.'}, {'name': 'deliveryCustomizationDelete', 'description': 'Creates a delivery customization.'}, {'name': 'deliveryCustomizationUpdate', 'description': 'Updates a delivery customization.'}, {'name': 'deliveryProfileCreate', 'description': 'Create a delivery profile.'}, {'name': 'deliveryProfileRemove', 'description': 'Enqueue the removal of a delivery profile.'}, {'name': 'deliveryProfileUpdate', 'description': 'Update a delivery profile.'}, {'name': 'deliveryPromiseParticipantsUpdate', 'description': 'Updates the delivery promise participants by adding or removing owners based on a branded promise handle.'}, {'name': 'deliveryPromiseProviderUpsert', 'description': 'Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners.'}, {'name': 'deliverySettingUpdate', 'description': 'Set the delivery settings for a shop.'}, {'name': 'deliveryShippingOriginAssign', 'description': 'Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.'}, {'name': 'discountAutomaticActivate', 'description': 'Activates an automatic discount.'}, {'name': 'discountAutomaticAppCreate', 'description': 'Creates an automatic discount that\'s managed by an app.\nUse this mutation with [Shopify Functions](https://shopify.dev/docs/apps/build/functions)\nwhen you need advanced, custom, or dynamic discount capabilities that aren\'t supported by\n[Shopify\'s native discount types](https://help.shopify.com/manual/discounts/discount-types).\n\nFor example, use this mutation to create an automatic discount using an app\'s\n"Volume" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).\n\n> Note:\n> To create code discounts with custom logic, use the\n[`discountCodeAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppCreate)\nmutation.'}, {'name': 'discountAutomaticAppUpdate', 'description': 'Updates an existing automatic discount that\'s managed by an app using\n[Shopify Functions](https://shopify.dev/docs/apps/build/functions).\nUse this mutation when you need advanced, custom, or\ndynamic discount capabilities that aren\'t supported by\n[Shopify\'s native discount types](https://help.shopify.com/manual/discounts/discount-types).\n\nFor example, use this mutation to update a new "Volume" discount type that applies a percentage\noff when customers purchase more than the minimum quantity of a product. For an example implementation,\nrefer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).\n\n> Note:\n> To update code discounts with custom logic, use the\n[`discountCodeAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppUpdate)\nmutation instead.'}, {'name': 'discountAutomaticBasicCreate', 'description': "Creates an\n[amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To create code discounts, use the\n[`discountCodeBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicCreate)\nmutation."}, {'name': 'discountAutomaticBasicUpdate', 'description': "Updates an existing\n[amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To update code discounts, use the\n[`discountCodeBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicUpdate)\nmutation instead."}, {'name': 'discountAutomaticBulkDelete', 'description': 'Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a\nmaximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.\n**Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.'}, {'name': 'discountAutomaticBxgyCreate', 'description': "Creates a\n[buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To create code discounts, use the\n[`discountCodeBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyCreate)\nmutation."}, {'name': 'discountAutomaticBxgyUpdate', 'description': "Updates an existing\n[buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To update code discounts, use the\n[`discountCodeBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyUpdate)\nmutation instead."}, {'name': 'discountAutomaticDeactivate', 'description': 'Deactivates an automatic discount.'}, {'name': 'discountAutomaticDelete', 'description': 'Deletes an existing automatic discount from the store, permanently removing it from all future order calculations. This mutation provides a clean way to remove promotional campaigns that are no longer needed.\n\nFor example, when a seasonal promotion ends or a flash sale concludes, merchants can use this mutation to ensure the discount no longer applies to new orders while preserving historical order data.\n\nUse `DiscountAutomaticDelete` to:\n- Remove expired promotional campaigns\n- Clean up test discounts during development\n- Delete automatic discounts that conflict with new promotions\n- Maintain a clean discount configuration\n\nThe mutation returns the ID of the deleted discount for confirmation and any validation errors if the deletion cannot be completed. Once deleted, the automatic discount will no longer appear in discount lists or apply to new customer orders.'}, {'name': 'discountAutomaticFreeShippingCreate', 'description': "Creates a\n[free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To create code discounts, use the\n[`discountCodeFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingCreate)\nmutation."}, {'name': 'discountAutomaticFreeShippingUpdate', 'description': "Updates an existing\n[free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)\nthat's automatically applied on a cart and at checkout.\n\n> Note:\n> To update code discounts, use the\n[`discountCodeFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingUpdate)\nmutation instead."}, {'name': 'discountCodeActivate', 'description': 'Activates a previously created code discount, making it available for customers to use during checkout. This mutation transitions inactive discount codes into an active state where they can be applied to orders.\n\nFor example, after creating a "SUMMER20" discount code but leaving it inactive during setup, merchants can activate it when ready to launch their summer promotion campaign.\n\nUse `DiscountCodeActivate` to:\n- Launch scheduled promotional campaigns\n- Reactivate previously paused discount codes\n- Enable discount codes after configuration changes\n- Control the timing of discount availability\n\nThe mutation returns the updated discount code node with its new active status and handles any validation errors that might prevent activation, such as conflicting discount rules or invalid date ranges.'}, {'name': 'discountCodeAppCreate', 'description': 'Creates a code discount. The discount type must be provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Functions can implement [order](https://shopify.dev/docs/api/functions/reference/order-discounts), [product](https://shopify.dev/docs/api/functions/reference/product-discounts), or [shipping](https://shopify.dev/docs/api/functions/reference/shipping-discounts) discount functions. Use this mutation with Shopify Functions when you need custom logic beyond [Shopify\'s native discount types](https://help.shopify.com/manual/discounts/discount-types).\n\nFor example, use this mutation to create a code discount using an app\'s "Volume" discount type that applies a percentage off when customers purchase more than the minimum quantity\nof a product. For an example implementation, refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).\n\n> Note:\n> To create automatic discounts with custom logic, use [`discountAutomaticAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppCreate).'}, {'name': 'discountCodeAppUpdate', 'description': "Updates a code discount, where the discount type is provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).\n\n> Note:\n> To update automatic discounts, use [`discountAutomaticAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppUpdate)."}, {'name': 'discountCodeBasicCreate', 'description': "Creates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\n\n> Note:\n> To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicCreate) mutation."}, {'name': 'discountCodeBasicUpdate', 'description': "Updates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.\n\n> Note:\n> To update discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicUpdate) mutation."}, {'name': 'discountCodeBulkActivate', 'description': 'Activates multiple [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:\n- A search query\n- A saved search ID\n- A list of discount code IDs\n\nFor example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.'}, {'name': 'discountCodeBulkDeactivate', 'description': 'Deactivates multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:\n- A search query\n- A saved search ID\n- A list of discount code IDs\n\nFor example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.'}, {'name': 'discountCodeBulkDelete', 'description': 'Deletes multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:\n- A search query\n- A saved search ID\n- A list of discount code IDs\n\nFor example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.'}, {'name': 'discountCodeBxgyCreate', 'description': "Creates a\n[buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)\nthat's applied on a cart and at checkout when a customer enters a code.\n\n> Note:\n> To create discounts that are automatically applied on a cart and at checkout, use the\n[`discountAutomaticBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyCreate)\nmutation."}, {'name': 'discountCodeBxgyUpdate', 'description': "Updates a\n[buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)\nthat's applied on a cart and at checkout when a customer enters a code.\n\n> Note:\n> To update discounts that are automatically applied on a cart and at checkout, use the\n[`discountAutomaticBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyUpdate)\nmutation."}, {'name': 'discountCodeDeactivate', 'description': 'Temporarily suspends a code discount without permanently removing it from the store. Deactivation allows merchants to pause promotional campaigns while preserving the discount configuration for potential future use.\n\nFor example, when a flash sale needs to end immediately or a discount code requires temporary suspension due to inventory issues, merchants can deactivate it to stop new redemptions while keeping the discount structure intact.\n\nUse `DiscountCodeDeactivate` to:\n- Pause active promotional campaigns timely\n- Temporarily suspend problematic discount codes\n- Control discount availability during inventory shortages\n- Maintain discount history while stopping usage\n\nDeactivated discounts remain in the system and can be reactivated later, unlike deletion which persistently removes the code. Customers attempting to use deactivated codes will receive appropriate error messages.'}, {'name': 'discountCodeDelete', 'description': 'Removes a code discount from the store, making it permanently unavailable for customer use. This mutation provides a clean way to eliminate discount codes that are no longer needed or have been replaced.\n\nFor example, when a seasonal promotion ends or a discount code has been compromised, merchants can delete it entirely rather than just deactivating it, ensuring customers cannot attempt to use expired promotional codes.\n\nUse `DiscountCodeDelete` to:\n- persistently remove outdated promotional codes\n- Clean up discount code lists after campaigns end\n- Eliminate compromised or leaked discount codes\n- Maintain organized discount management\n\nOnce deleted, the discount code cannot be recovered and any customer attempts to use it will fail. This differs from deactivation, which preserves the code for potential future reactivation.'}, {'name': 'discountCodeFreeShippingCreate', 'description': "Creates an [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.\n\n> Note:\n> To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingCreate) mutation."}, {'name': 'discountCodeFreeShippingUpdate', 'description': "Updates a [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.\n\n> Note:\n> To update a free shipping discount that's automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingUpdate) mutation."}, {'name': 'discountCodeRedeemCodeBulkDelete', 'description': 'Asynchronously delete\n[discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)\nin bulk that customers can use to redeem a discount.'}, {'name': 'discountRedeemCodeBulkAdd', 'description': 'Asynchronously add\n[discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)\nin bulk that customers can use to redeem a discount. You can use the `discountRedeemCodeBulkAdd` mutation\nto automate the distribution of discount codes through emails or other\nmarketing channels.'}, {'name': 'disputeEvidenceUpdate', 'description': 'Updates a dispute evidence.'}, {'name': 'draftOrderBulkAddTags', 'description': 'Adds tags to multiple draft orders.'}, {'name': 'draftOrderBulkDelete', 'description': 'Deletes multiple draft orders.'}, {'name': 'draftOrderBulkRemoveTags', 'description': 'Removes tags from multiple draft orders.'}, {'name': 'draftOrderCalculate', 'description': 'Calculates the properties of a draft order. Useful for determining information\nsuch as total taxes or price without actually creating a draft order.'}, {'name': 'draftOrderComplete', 'description': "Completes a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder) and\nconverts it into a [regular order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).\nThe order appears in the merchant's orders list, and the customer can be notified about their order.\n\nUse the `draftOrderComplete` mutation when a merchant is ready to finalize a draft order and create a real\norder in their store. The `draftOrderComplete` mutation also supports sales channel attribution for tracking\norder sources using the [`sourceName`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete#arguments-sourceName)\nargument, [cart validation](https://shopify.dev/docs/apps/build/checkout/cart-checkout-validation)\ncontrols for app integrations, and detailed error reporting for failed completions.\n\nYou can complete a draft order with different [payment scenarios](https://help.shopify.com/manual/fulfillment/managing-orders/payments):\n\n- Mark the order as paid immediately.\n- Set the order as payment pending using [payment terms](https://shopify.dev/docs/api/admin-graphql/latest/objects/PaymentTerms).\n- Specify a custom payment amount.\n- Select a specific payment gateway.\n\n> Note:\n> When completing a draft order, inventory is [reserved](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states)\nfor the items in the order. This means the items will no longer be available for other customers to purchase.\nMake sure to verify inventory availability before completing the draft order."}, {'name': 'draftOrderCreate', 'description': "Creates a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder)\nwith attributes such as customer information, line items, shipping and billing addresses, and payment terms.\nDraft orders are useful for merchants that need to:\n\n- Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.\n- Send invoices to customers with a secure checkout link.\n- Use custom items to represent additional costs or products not in inventory.\n- Re-create orders manually from active sales channels.\n- Sell products at discount or wholesale rates.\n- Take pre-orders.\n\nAfter creating a draft order, you can:\n- Send an invoice to the customer using the [`draftOrderInvoiceSend`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderInvoiceSend) mutation.\n- Complete the draft order using the [`draftOrderComplete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete) mutation.\n- Update the draft order using the [`draftOrderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderUpdate) mutation.\n- Duplicate a draft order using the [`draftOrderDuplicate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderDuplicate) mutation.\n- Delete the draft order using the [`draftOrderDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderDelete) mutation.\n\n> Note:\n> When you create a draft order, you can't [reserve or hold inventory](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states) for the items in the order by default.\n> However, you can reserve inventory using the [`reserveInventoryUntil`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderCreate#arguments-input.fields.reserveInventoryUntil) input."}, {'name': 'draftOrderCreateFromOrder', 'description': 'Creates a draft order from order.'}, {'name': 'draftOrderDelete', 'description': 'Deletes a draft order.'}, {'name': 'draftOrderDuplicate', 'description': 'Duplicates a draft order.'}, {'name': 'draftOrderInvoicePreview', 'description': 'Previews a draft order invoice email.'}, {'name': 'draftOrderInvoiceSend', 'description': 'Sends an email invoice for a draft order.'}, {'name': 'draftOrderUpdate', 'description': 'Updates a draft order.\n\nIf a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts\nare created but not immediately completed when opening the merchant credit card modal in the admin, and when a\nbuyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress\nand the draft is updated before the checkout completes. This will not interfere with the checkout and order\ncreation, but if the link from draft to checkout is broken the draft will remain open even after the order is\ncreated.'}, {'name': 'eventBridgeServerPixelUpdate', 'description': 'Updates the server pixel to connect to an EventBridge endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.'}, {'name': 'fileAcknowledgeUpdateFailed', 'description': 'Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.'}, {'name': 'fileCreate', 'description': 'Creates file assets for a store from external URLs or files that were previously uploaded using the\n[`stagedUploadsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/stageduploadscreate)\nmutation.\n\nUse the `fileCreate` mutation to add various types of media and documents to your store. These files are added to the\n[**Files** page](https://shopify.com/admin/settings/files) in the Shopify admin and can be referenced by other\nresources in your store.\n\nThe `fileCreate` mutation supports multiple file types:\n\n- **Images**: Product photos, variant images, and general store imagery\n- **Videos**: Shopify-hosted videos for product demonstrations and marketing\n- **External videos**: YouTube and Vimeo videos for enhanced product experiences\n- **3D models**: Interactive 3D representations of products\n- **Generic files**: PDFs, documents, and other file types for store resources\n\nThe mutation handles duplicate filenames using configurable resolution modes that automatically append UUIDs,\nreplace existing files, or raise errors when conflicts occur.\n\n> Note:\n> Files are processed asynchronously. Check the\n> [`fileStatus`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/File#fields-fileStatus)\n> field to monitor processing completion. The maximum number of files that can be created in a single batch is 250.\n\nAfter creating files, you can make subsequent updates using the following mutations:\n\n- [`fileUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileUpdate):\nUpdate file properties such as alt text or replace file contents while preserving the same URL.\n- [`fileDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileDelete):\nRemove files from your store when they are no longer needed.\n\nTo list all files in your store, use the\n[`files`](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) query.\n\nLearn how to manage\n[product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)\nin your app.'}, {'name': 'fileDelete', 'description': "Deletes file assets that were previously uploaded to your store.\n\nUse the `fileDelete` mutation to permanently remove media and file assets from your store when they are no longer needed.\nThis mutation handles the complete removal of files from both your store's file library and any associated references\nto products or other resources.\n\nThe `fileDelete` mutation supports removal of multiple file types:\n\n- **Images**: Product photos, variant images, and general store imagery\n- **Videos**: Shopify-hosted videos for product demonstrations and marketing content\n- **External Videos**: YouTube and Vimeo videos linked to your products\n- **3D models**: Interactive 3D representations of products\n- **Generic files**: PDFs, documents, and other file types stored in your\n[**Files** page](https://shopify.com/admin/settings/files)\n\nWhen you delete files that are referenced by products, the mutation automatically removes those references and\nreorders any remaining media to maintain proper positioning. Product file references are database relationships\nmanaged through a media reference system, not just links in product descriptions. The Shopify admin provides a UI\nto manage these relationships, and when files are deleted, the system automatically cleans up all references.\nFiles that are currently being processed by other operations are rejected to prevent conflicts.\n\n> Caution:\n> File deletion is permanent and can't be undone. When you delete a file that's being used in your store,\n> it will immediately stop appearing wherever it was displayed. For example, if you delete a product image,\n> that product will show a broken image or placeholder on your storefront and in the admin. The same applies\n> to any other files linked from themes, blog posts, or pages. Before deleting files, you can use the\n> [`files` query](https://shopify.dev/api/admin-graphql/latest/queries/files) to list and review\n> your store's file assets.\n\nLearn how to manage\n[product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)\nin your app."}, {'name': 'fileUpdate', 'description': "Updates properties, content, and metadata associated with an existing file asset that has already been uploaded to Shopify.\n\nUse the `fileUpdate` mutation to modify various aspects of files already stored in your store.\nFiles can be updated individually or in batches.\n\nThe `fileUpdate` mutation supports updating multiple file properties:\n\n- **Alt text**: Update accessibility descriptions for images and other media.\n- **File content**: Replace image or generic file content while maintaining the same URL.\n- **Filename**: Modify file names (extension must match the original).\n- **Product references**: Add or remove associations between files and products. Removing file-product associations\ndeletes the file from the product's media gallery and clears the image from any product variants that were using it.\n\nThe mutation handles different file types with specific capabilities:\n\n- **Images**: Update preview images, original source, filename, and alt text.\n- **Generic files**: Update original source, filename, and alt text.\n- **Videos and 3D models**: Update alt text and product references.\n\n> Note:\n> Files must be in `ready` state before they can be updated. The mutation includes file locking to prevent\n> conflicts during updates. You can't simultaneously update both `originalSource` and `previewImageSource`.\n\nAfter updating files, you can use related mutations for additional file management:\n\n- [`fileCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileCreate):\nCreate new file assets from external URLs or staged uploads.\n- [`fileDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileDelete):\nRemove files from your store when they are no longer needed.\n\nLearn how to manage\n[product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)\nin your app."}, {'name': 'flowGenerateSignature', 'description': 'Generates a signature for a Flow action payload.'}, {'name': 'flowTriggerReceive', 'description': 'Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers).'}, {'name': 'fulfillmentCancel', 'description': 'Cancels a fulfillment.'}, {'name': 'fulfillmentConstraintRuleCreate', 'description': 'Creates a fulfillment constraint rule and its metafield.'}, {'name': 'fulfillmentConstraintRuleDelete', 'description': 'Deletes a fulfillment constraint rule and its metafields.'}, {'name': 'fulfillmentConstraintRuleUpdate', 'description': 'Update a fulfillment constraint rule.'}, {'name': 'fulfillmentCreate', 'description': 'Creates a fulfillment for one or many fulfillment orders.\nThe fulfillment orders are associated with the same order and are assigned to the same location.'}, {'name': 'fulfillmentEventCreate', 'description': 'Creates a fulfillment event for a specified fulfillment.'}, {'name': 'fulfillmentOrderAcceptCancellationRequest', 'description': 'Accept a cancellation request sent to a fulfillment service for a fulfillment order.'}, {'name': 'fulfillmentOrderAcceptFulfillmentRequest', 'description': 'Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.'}, {'name': 'fulfillmentOrderCancel', 'description': 'Marks a fulfillment order as canceled.'}, {'name': 'fulfillmentOrderClose', 'description': 'Marks an in-progress fulfillment order as incomplete,\nindicating the fulfillment service is unable to ship any remaining items,\nand closes the fulfillment request.\n\nThis mutation can only be called for fulfillment orders that meet the following criteria:\n  - Assigned to a fulfillment service location,\n  - The fulfillment request has been accepted,\n  - The fulfillment order status is `IN_PROGRESS`.\n\nThis mutation can only be called by the fulfillment service app that accepted the fulfillment request.\nCalling this mutation returns the control of the fulfillment order to the merchant, allowing them to\nmove the fulfillment order line items to another location and fulfill from there,\nremove and refund the line items, or to request fulfillment from the same fulfillment service again.\n\nClosing a fulfillment order is explained in\n[the fulfillment service guide](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-7-optional-close-a-fulfillment-order).'}, {'name': 'fulfillmentOrderHold', 'description': 'Applies a fulfillment hold on a fulfillment order.\n\nAs of the\n[2025-01 API version](https://shopify.dev/changelog/apply-multiple-holds-to-a-single-fulfillment-order),\nthe mutation can be successfully executed on fulfillment orders that are already on hold.\nTo place multiple holds on a fulfillment order, apps need to supply the\n[handle](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentHold#field-handle)\nfield. Each app can place up to\n10 active holds\nper fulfillment order. If an app attempts to place more than this, the mutation will return\n[a user error indicating that the limit has been reached](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderHoldUserErrorCode#value-fulfillmentorderholdlimitreached).\nThe app would need to release one of its existing holds before being able to apply a new one.'}, {'name': 'fulfillmentOrderLineItemsPreparedForPickup', 'description': 'Mark line items associated with a fulfillment order as being ready for pickup by a customer.\n\nSends a Ready For Pickup notification to the customer to let them know that their order is ready\nto be picked up.'}, {'name': 'fulfillmentOrderMerge', 'description': 'Merges a set or multiple sets of fulfillment orders together into one based on\nline item inputs and quantities.'}, {'name': 'fulfillmentOrderMove', 'description': "Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.\n\nMoving a fulfillment order will fail in the following circumstances:\n\n* The fulfillment order is closed.\n* The destination location doesn't stock the requested inventory item.\n* The API client doesn't have the correct permissions.\n\nLine items which have already been fulfilled can't be re-assigned\nand will always remain assigned to the original location.\n\nYou can't change the assigned location while a fulfillment order has a\n[request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)\nof `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.\nThese request statuses mean that a fulfillment order is awaiting action by a fulfillment service\nand can't be re-assigned without first having the fulfillment service accept a cancellation request.\nThis behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.\n\n### How re-assigning line items affects fulfillment orders\n\n**First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.\n\nIn this case, the\n[assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)\nof the original fulfillment order will be updated to the new location.\n\n**Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.\nYou can specify a subset of line items using the `fulfillmentOrderLineItems` parameter\n(available as of the `2023-04` API version),\nor specify that the original fulfillment order contains line items which have already been fulfilled.\n\nIf the new location is already assigned to another active fulfillment order, on the same order, then\na new fulfillment order is created. The existing fulfillment order is closed and line items are recreated\nin a new fulfillment order."}, {'name': 'fulfillmentOrderOpen', 'description': 'Marks a scheduled fulfillment order as open.'}, {'name': 'fulfillmentOrderRejectCancellationRequest', 'description': 'Rejects a cancellation request sent to a fulfillment service for a fulfillment order.'}, {'name': 'fulfillmentOrderRejectFulfillmentRequest', 'description': 'Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.'}, {'name': 'fulfillmentOrderReleaseHold', 'description': 'Releases the fulfillment hold on a fulfillment order.'}, {'name': 'fulfillmentOrderReschedule', 'description': 'Reschedules a scheduled fulfillment order.\n\nUpdates the value of the `fulfillAt` field on a scheduled fulfillment order.\n\nThe fulfillment order will be marked as ready for fulfillment at this date and time.'}, {'name': 'fulfillmentOrderSplit', 'description': 'Splits a fulfillment order or orders based on line item inputs and quantities.'}, {'name': 'fulfillmentOrderSubmitCancellationRequest', 'description': 'Sends a cancellation request to the fulfillment service of a fulfillment order.'}, {'name': 'fulfillmentOrderSubmitFulfillmentRequest', 'description': 'Sends a fulfillment request to the fulfillment service of a fulfillment order.'}, {'name': 'fulfillmentOrdersSetFulfillmentDeadline', 'description': 'Sets the latest date and time by which the fulfillment orders need to be fulfilled.'}, {'name': 'fulfillmentServiceCreate', 'description': "Creates a fulfillment service.\n\n## Fulfillment service location\n\nWhen creating a fulfillment service, a new location will be automatically created on the shop\nand will be associated with this fulfillment service.\nThis location will be named after the fulfillment service and inherit the shop's address.\n\nIf you are using API version `2023-10` or later, and you need to specify custom attributes for the fulfillment service location\n(for example, to change its address to a country different from the shop's country),\nuse the\n[LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)\nmutation after creating the fulfillment service."}, {'name': 'fulfillmentServiceDelete', 'description': 'Deletes a fulfillment service.'}, {'name': 'fulfillmentServiceUpdate', 'description': 'Updates a fulfillment service.\n\nIf you are using API version `2023-10` or later,\nand you need to update the location managed by the fulfillment service\n(for example, to change the address of a fulfillment service),\nuse the\n[LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)\nmutation.'}, {'name': 'fulfillmentTrackingInfoUpdate', 'description': 'Updates tracking information for a fulfillment.'}, {'name': 'giftCardCreate', 'description': 'Create a gift card.'}, {'name': 'giftCardCredit', 'description': 'Credit a gift card.'}, {'name': 'giftCardDeactivate', 'description': 'Deactivate a gift card. A deactivated gift card cannot be used by a customer.\nA deactivated gift card cannot be re-enabled.'}, {'name': 'giftCardDebit', 'description': 'Debit a gift card.'}, {'name': 'giftCardSendNotificationToCustomer', 'description': 'Send notification to the customer of a gift card.'}, {'name': 'giftCardSendNotificationToRecipient', 'description': 'Send notification to the recipient of a gift card.'}, {'name': 'giftCardUpdate', 'description': 'Update a gift card.'}, {'name': 'inventoryActivate', 'description': 'Activate an inventory item at a location.'}, {'name': 'inventoryAdjustQuantities', 'description': 'Apply changes to inventory quantities.'}, {'name': 'inventoryBulkToggleActivation', 'description': "Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location."}, {'name': 'inventoryDeactivate', 'description': "Removes an inventory item's quantities from a location, and turns off inventory at the location."}, {'name': 'inventoryItemUpdate', 'description': 'Updates an inventory item.'}, {'name': 'inventoryMoveQuantities', 'description': 'Moves inventory between inventory quantity names at a single location.'}, {'name': 'inventorySetQuantities', 'description': 'Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle\nconcurrent requests properly. If `ignoreCompareQuantity` is not set to true,\nthe mutation will only update the quantity if the persisted quantity matches the `compareQuantity` value.\nIf the `compareQuantity` value does not match the persisted value, the mutation will return an error. In order to opt out\nof the `compareQuantity` check, the `ignoreCompareQuantity` argument can be set to true.\n\n> Note:\n> Only use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,\n> otherwise please consider using the [inventoryAdjustQuantities](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryAdjustQuantities) mutation.\n>\n>\n> Opting out of the `compareQuantity` check can lead to inaccurate inventory quantities if multiple requests are made concurrently.\n> It is recommended to always include the `compareQuantity` value to ensure the accuracy of the inventory quantities and to opt out\n> of the check using `ignoreCompareQuantity` only when necessary.'}, {'name': 'inventorySetScheduledChanges', 'description': 'Set up scheduled changes of inventory items.'}, {'name': 'inventoryShipmentAddItems', 'description': 'Adds items to an inventory shipment.'}, {'name': 'inventoryShipmentCreate', 'description': 'Adds a draft shipment to an inventory transfer.'}, {'name': 'inventoryShipmentCreateInTransit', 'description': 'Adds an in-transit shipment to an inventory transfer.'}, {'name': 'inventoryShipmentDelete', 'description': 'Deletes an inventory shipment. Only draft shipments can be deleted.'}, {'name': 'inventoryShipmentMarkInTransit', 'description': 'Marks a draft inventory shipment as in transit.'}, {'name': 'inventoryShipmentReceive', 'description': 'Receive an inventory shipment.'}, {'name': 'inventoryShipmentRemoveItems', 'description': 'Remove items from an inventory shipment.'}, {'name': 'inventoryShipmentSetTracking', 'description': 'Edits the tracking info on an inventory shipment.'}, {'name': 'inventoryShipmentUpdateItemQuantities', 'description': 'Updates items on an inventory shipment.'}, {'name': 'inventoryTransferCancel', 'description': 'Cancels an inventory transfer.'}, {'name': 'inventoryTransferCreate', 'description': 'Creates an inventory transfer.'}, {'name': 'inventoryTransferCreateAsReadyToShip', 'description': 'Creates an inventory transfer in ready to ship.'}, {'name': 'inventoryTransferDelete', 'description': 'Deletes an inventory transfer.'}, {'name': 'inventoryTransferDuplicate', 'description': 'This mutation allows duplicating an existing inventory transfer. The duplicated transfer will have the same\nline items and quantities as the original transfer, but will be in a draft state with no shipments.'}, {'name': 'inventoryTransferEdit', 'description': 'Edits an inventory transfer.'}, {'name': 'inventoryTransferMarkAsReadyToShip', 'description': 'Sets an inventory transfer to ready to ship.'}, {'name': 'inventoryTransferRemoveItems', 'description': 'This mutation allows removing the shippable quantities of line items on a Transfer.\nIt removes all quantities of the item from the transfer that are not associated with shipments.'}, {'name': 'inventoryTransferSetItems', 'description': 'This mutation allows for the setting of line items on a Transfer. Will replace the items already set, if any.'}, {'name': 'locationActivate', 'description': 'Activates a location so that you can stock inventory at the location. Refer to the\n[`isActive`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-isactive) and\n[`activatable`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-activatable)\nfields on the `Location` object.'}, {'name': 'locationAdd', 'description': 'Adds a new location.'}, {'name': 'locationDeactivate', 'description': 'Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.'}, {'name': 'locationDelete', 'description': 'Deletes a location.'}, {'name': 'locationEdit', 'description': 'Edits an existing location.\n\n[As of the 2023-10 API version](https://shopify.dev/changelog/apps-can-now-change-the-name-and-address-of-their-fulfillment-service-locations), apps can change the name and address of their fulfillment service locations.'}, {'name': 'locationLocalPickupDisable', 'description': 'Disables local pickup for a location.'}, {'name': 'locationLocalPickupEnable', 'description': 'Enables local pickup for a location.'}, {'name': 'marketCreate', 'description': 'Creates a new market.'}, {'name': 'marketDelete', 'description': 'Deletes a market definition.'}, {'name': 'marketLocalizationsRegister', 'description': 'Creates or updates market localizations.'}, {'name': 'marketLocalizationsRemove', 'description': 'Deletes market localizations.'}, {'name': 'marketUpdate', 'description': 'Updates the properties of a market.'}, {'name': 'marketingActivitiesDeleteAllExternal', 'description': 'Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.'}, {'name': 'marketingActivityCreate', 'description': 'Create new marketing activity. Marketing activity app extensions are deprecated and will be removed in the near future.'}, {'name': 'marketingActivityCreateExternal', 'description': 'Creates a new external marketing activity.'}, {'name': 'marketingActivityDeleteExternal', 'description': 'Deletes an external marketing activity.'}, {'name': 'marketingActivityUpdate', 'description': 'Updates a marketing activity with the latest information. Marketing activity app extensions are deprecated and will be removed in the near future.'}, {'name': 'marketingActivityUpdateExternal', 'description': 'Update an external marketing activity.'}, {'name': 'marketingActivityUpsertExternal', 'description': 'Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.'}, {'name': 'marketingEngagementCreate', 'description': 'Creates a new marketing engagement for a marketing activity or a marketing channel.'}, {'name': 'marketingEngagementsDelete', 'description': 'Marks channel-level engagement data such that it no longer appears in reports.\n          Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to\n          hide it from reports.'}, {'name': 'menuCreate', 'description': 'Creates a menu.'}, {'name': 'menuDelete', 'description': 'Deletes a menu.'}, {'name': 'menuUpdate', 'description': 'Updates a menu.'}, {'name': 'metafieldDefinitionCreate', 'description': 'Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be\nchecked against this definition and will have their type updated accordingly. For metafields that are not\nvalid, they will remain unchanged but any attempts to update them must align with this definition.'}, {'name': 'metafieldDefinitionDelete', 'description': 'Delete a metafield definition.\nOptionally deletes all associated metafields asynchronously when specified.'}, {'name': 'metafieldDefinitionPin', 'description': 'You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.'}, {'name': 'metafieldDefinitionUnpin', 'description': 'You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.\nThe order of your pinned metafield definitions determines the order in which your metafields are displayed\non the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.'}, {'name': 'metafieldDefinitionUpdate', 'description': 'Updates a metafield definition.'}, {'name': 'metafieldsDelete', 'description': 'Deletes multiple metafields in bulk.'}, {'name': 'metafieldsSet', 'description': "Sets metafield values. Metafield values will be set regardless if they were previously created or not.\n\nAllows a maximum of 25 metafields to be set at a time.\n\nThis operation is atomic, meaning no changes are persisted if an error is encountered.\n\nAs of `2024-07`, this operation supports compare-and-set functionality to better handle concurrent requests.\nIf `compareDigest` is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on `compareDigest`.\nIf the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set `compareDigest` to `null`.\nThe `compareDigest` value can be acquired by querying the metafield object and selecting `compareDigest` as a field.\nIf the `compareDigest` value does not match the digest for the persisted value, the mutation will return an error.\nYou can opt out of write guarantees by not sending `compareDigest` in the request."}, {'name': 'metaobjectBulkDelete', 'description': 'Asynchronously delete metaobjects and their associated metafields in bulk.'}, {'name': 'metaobjectCreate', 'description': 'Creates a new metaobject.'}, {'name': 'metaobjectDefinitionCreate', 'description': 'Creates a new metaobject definition.'}, {'name': 'metaobjectDefinitionDelete', 'description': 'Deletes the specified metaobject definition.\nAlso deletes all related metafield definitions, metaobjects, and metafields asynchronously.'}, {'name': 'metaobjectDefinitionUpdate', 'description': 'Updates a metaobject definition with new settings and metafield definitions.'}, {'name': 'metaobjectDelete', 'description': 'Deletes the specified metaobject and its associated metafields.'}, {'name': 'metaobjectUpdate', 'description': 'Updates an existing metaobject.'}, {'name': 'metaobjectUpsert', 'description': 'Retrieves a metaobject by handle, then updates it with the provided input values.\nIf no matching metaobject is found, a new metaobject is created with the provided input values.'}, {'name': 'mobilePlatformApplicationCreate', 'description': 'Create a mobile platform application.'}, {'name': 'mobilePlatformApplicationDelete', 'description': 'Delete a mobile platform application.'}, {'name': 'mobilePlatformApplicationUpdate', 'description': 'Update a mobile platform application.'}, {'name': 'orderCancel', 'description': "Cancels an order, with options for refunding, restocking inventory, and customer notification.\n\n> Caution:\n> Order cancellation is irreversible. An order that has been cancelled can't be restored to its original state.\n\nUse the `orderCancel` mutation to programmatically cancel orders in scenarios such as:\n\n- Customer-requested cancellations due to size, color, or other preference changes\n- Payment processing failures or declined transactions\n- Fraud detection and prevention\n- Insufficient inventory availability\n- Staff errors in order processing\n- Wholesale or B2B order management workflows\n\nThe `orderCancel` mutation provides flexible refund options including refunding to original payment methods\nor issuing store credit. If a payment was only authorized (temporarily held) but not yet charged,\nthat hold will be automatically released when the order is cancelled, even if you choose not to refund other payments.\n\nThe mutation supports different cancellation reasons: customer requests, payment declines, fraud,\ninventory issues, staff errors, or other unspecified reasons. Each cancellation can include optional\nstaff notes for internal documentation (notes aren't visible to customers).\n\nAn order can only be cancelled if it meets the following criteria:\n\n- The order hasn't already been cancelled.\n- The order has no pending payment authorizations.\n- The order has no active returns in progress.\n- The order has no outstanding fulfillments that can't be cancelled.\n\nOrders might be assigned to locations that become\n[deactivated](https://help.shopify.com/manual/fulfillment/setup/locations-management#deactivate-and-reactivate-locations)\nafter the order was created. When cancelling such orders, inventory behavior depends on payment status:\n\n- **Paid orders**: Cancellation will fail with an error if restocking is enabled, since inventory\ncan't be returned to deactivated locations.\n- **Unpaid orders**: Cancellation succeeds but inventory is not restocked anywhere, even when the\nrestock option is enabled. The committed inventory effectively becomes unavailable rather than being\nreturned to stock at the deactivated location.\n\nAfter you cancel an order, you can still make limited updates to certain fields (like\nnotes and tags) using the\n[`orderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderUpdate).\n\nFor partial refunds or more complex refund scenarios on active orders,\nsuch as refunding only specific line items while keeping the rest of the order fulfilled,\nconsider using the [`refundCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate)\nmutation instead of full order cancellation.\n\nLearn how to build apps that integrate with\n[order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment)."}, {'name': 'orderCapture', 'description': "Captures payment for an authorized transaction on an order. Use this mutation to claim the money that was previously\nreserved by an authorization transaction.\n\nThe `orderCapture` mutation can be used in the following scenarios:\n\n- To capture the full amount of an authorized transaction\n- To capture a partial payment by specifying an amount less than the total order amount\n- To perform multiple captures on the same order, as long as the order transaction is\n[multi-capturable](https://shopify.dev/docs/api/admin-graphql/latest/objects/ordertransaction#field-OrderTransaction.fields.multiCapturable)\n\n> Note:\n> Multi-capture functionality is only available to stores on a\n[Shopify Plus plan](https://help.shopify.com/manual/intro-to-shopify/pricing-plans/plans-features/shopify-plus-plan).\nFor multi-currency orders, the [`currency`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderCapture#arguments-input.fields.currency)\nfield is required and should match the presentment currency from the order.\n\nAfter capturing a payment, you can:\n\n- View the transaction details including status, amount, and processing information.\n- Track the captured amount in both shop and presentment currencies.\n- Monitor the transaction's settlement status.\n\nLearn more about [order transactions](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)."}, {'name': 'orderClose', 'description': 'Closes an open order.'}, {'name': 'orderCreate', 'description': "Creates an order with attributes such as customer information, line items, and shipping and billing addresses.\n\nUse the `orderCreate` mutation to programmatically generate orders in scenarios where\norders aren't created through the standard checkout process, such as when importing orders from an external\nsystem or creating orders for wholesale customers.\n\nThe `orderCreate` mutation doesn't support applying multiple discounts, such as discounts on line items.\nAutomatic discounts won't be applied unless you replicate the logic of those discounts in your custom\nimplementation. You can [apply a discount code](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/OrderCreateDiscountCodeInput),\nbut only one discount code can be set for each order.\n\n> Note:\n> If you're using the `orderCreate` mutation with a\n> [trial](https://help.shopify.com/manual/intro-to-shopify/pricing-plans/free-trial) or\n> [development store](https://shopify.dev/docs/api/development-stores), then you can create a\n> maximum of five new orders per minute.\n\nAfter you create an order, you can make subsequent edits to the order using one of the following mutations:\n* [`orderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderUpdate):\nUsed for simple updates to an order, such as changing the order's note, tags, or customer information.\n* [`orderEditBegin`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderEditBegin):\nUsed when you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts. The `orderEditBegin` mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the `orderEditBegin`\nmutation to [edit existing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders).\n\nLearn how to build apps that integrate with\n[order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment)."}, {'name': 'orderCreateMandatePayment', 'description': 'Creates a payment for an order by mandate.'}, {'name': 'orderCreateManualPayment', 'description': "Create a manual payment for an order. You can only create a manual payment for an order if it isn't already\nfully paid."}, {'name': 'orderCustomerRemove', 'description': 'Removes customer from an order.'}, {'name': 'orderCustomerSet', 'description': 'Sets a customer on an order.'}, {'name': 'orderDelete', 'description': 'Deletes an order. For more information on which orders can be deleted, refer to [Delete an order](https://help.shopify.com/manual/orders/cancel-delete-order#delete-an-order).'}, {'name': 'orderEditAddCustomItem', 'description': 'Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditAddLineItemDiscount', 'description': 'Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditAddShippingLine', 'description': 'Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditAddVariant', 'description': 'Adds a line item from an existing product variant. As of API version 2025-04, the [orderEditAddVariant](https://shopify.dev/api/admin-graphql/latest/mutations/ordereditaddvariant) API will respect the contextual pricing of the variant.'}, {'name': 'orderEditBegin', 'description': 'Starts editing an order. Mutations are operating on `OrderEdit`.\nAll order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.'}, {'name': 'orderEditCommit', 'description': 'Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.\nAll order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.'}, {'name': 'orderEditRemoveDiscount', 'description': 'Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditRemoveShippingLine', 'description': 'Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditSetQuantity', 'description': 'Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditUpdateDiscount', 'description': 'Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderEditUpdateShippingLine', 'description': 'Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).'}, {'name': 'orderInvoiceSend', 'description': 'Sends an email invoice for an order.'}, {'name': 'orderMarkAsPaid', 'description': "Marks an order as paid by recording a payment transaction for the outstanding amount.\n\nUse the `orderMarkAsPaid` mutation to record payments received outside the standard checkout\nprocess. The `orderMarkAsPaid` mutation is particularly useful in scenarios where:\n\n- Orders were created with manual payment methods (cash on delivery, bank deposit, money order)\n- Payments were received offline and need to be recorded in the system\n- Previously authorized payments need to be captured manually\n- Orders require manual payment reconciliation due to external payment processing\n\nThe mutation validates that the order can be marked as paid before processing.\nAn order can be marked as paid only if it has a positive outstanding balance and its\n[financial status](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.displayFinancialStatus)\nisn't already `PAID`. The mutation will either create a new sale transaction for the full\noutstanding amount or capture an existing authorized transaction, depending on the order's current payment state.\n\nAfter successfully marking an order as paid, the order's financial status is updated to\nreflect the payment, and payment events are logged for tracking and analytics\npurposes.\n\nLearn more about [managing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps)\nin apps."}, {'name': 'orderOpen', 'description': 'Opens a closed order.'}, {'name': 'orderRiskAssessmentCreate', 'description': 'Create a risk assessment for an order.'}, {'name': 'orderUpdate', 'description': "Updates the attributes of an order, such as the customer's email, the shipping address for the order,\ntags, and [metafields](https://shopify.dev/docs/apps/build/custom-data) associated with the order.\n\nIf you need to make significant updates to an order, such as adding or removing line items, changing\nquantities, or modifying discounts, then use\nthe [`orderEditBegin`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderEditBegin)\nmutation instead. The `orderEditBegin` mutation initiates an order editing session,\nallowing you to make multiple changes before finalizing them. Learn more about using the `orderEditBegin`\nmutation to [edit existing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders).\n\nIf you need to remove a customer from an order, then use the [`orderCustomerRemove`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderCustomerRemove)\nmutation instead.\n\nLearn how to build apps that integrate with\n[order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment)."}, {'name': 'pageCreate', 'description': 'Creates a page.'}, {'name': 'pageDelete', 'description': 'Deletes a page.'}, {'name': 'pageUpdate', 'description': 'Updates a page.'}, {'name': 'paymentCustomizationActivation', 'description': 'Activates and deactivates payment customizations.'}, {'name': 'paymentCustomizationCreate', 'description': 'Creates a payment customization.'}, {'name': 'paymentCustomizationDelete', 'description': 'Deletes a payment customization.'}, {'name': 'paymentCustomizationUpdate', 'description': 'Updates a payment customization.'}, {'name': 'paymentReminderSend', 'description': 'Sends an email payment reminder for a payment schedule.'}, {'name': 'paymentTermsCreate', 'description': 'Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.'}, {'name': 'paymentTermsDelete', 'description': 'Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.'}, {'name': 'paymentTermsUpdate', 'description': 'Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.'}, {'name': 'priceListCreate', 'description': 'Creates a price list. You can use the `priceListCreate` mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing.'}, {'name': 'priceListDelete', 'description': 'Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.'}, {'name': 'priceListFixedPricesAdd', 'description': 'Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.'}, {'name': 'priceListFixedPricesByProductUpdate', 'description': 'Updates the fixed prices for all variants for a product on a price list. You can use the `priceListFixedPricesByProductUpdate` mutation to set or remove a fixed price for all variants of a product associated with the price list.'}, {'name': 'priceListFixedPricesDelete', 'description': 'Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.'}, {'name': 'priceListFixedPricesUpdate', 'description': 'Updates fixed prices on a price list. You can use the `priceListFixedPricesUpdate` mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.'}, {'name': 'priceListUpdate', 'description': 'Updates a price list.\nIf you modify the currency, then any fixed prices set on the price list will be deleted.'}, {'name': 'privacyFeaturesDisable', 'description': "Disable a shop's privacy features."}, {'name': 'productBundleCreate', 'description': 'Creates a new componentized product.'}, {'name': 'productBundleUpdate', 'description': 'Updates a componentized product.'}, {'name': 'productCreate', 'description': "Creates a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)\nwith attributes such as title, description, vendor, and media.\n\nThe `productCreate` mutation helps you create many products at once, avoiding the tedious or time-consuming\nprocess of adding them one by one in the Shopify admin. Common examples include creating products for a\nnew collection, launching a new product line, or adding seasonal products.\n\nYou can define product\n[options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption) and\n[values](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOptionValue),\nallowing you to create products with different variations like sizes or colors. You can also associate media\nfiles to your products, including images and videos.\n\nThe `productCreate` mutation only supports creating a product with its initial\n[product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).\nTo create multiple product variants for a single product and manage prices, use the\n[`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\nmutation.\n\n> Note:\n> The `productCreate` mutation has a [throttle](https://shopify.dev/docs/api/usage/rate-limits#resource-based-rate-limits)\n> that takes effect when a store has 50,000 product variants. After this threshold is reached, no more than\n> 1,000 new product variants can be created per day.\n\nAfter you create a product, you can make subsequent edits to the product using one of the following mutations:\n\n- [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish):\nUsed to publish the product and make it available to customers. The `productCreate` mutation creates products\nin an unpublished state by default, so you must perform a separate operation to publish the product.\n- [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):\nUsed to update a single product, such as changing the product's title, description, vendor, or associated media.\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):\nUsed to perform multiple operations on products, such as creating or modifying product options and variants.\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data)."}, {'name': 'productDelete', 'description': "Permanently deletes a product and all its associated data, including variants, media, publications, and inventory items.\n\nUse the `productDelete` mutation to programmatically remove products from your store when they need to be\npermanently deleted from your catalog, such as when removing discontinued items, cleaning up test data, or\nsynchronizing with external inventory management systems.\n\nThe `productDelete` mutation removes the product from all associated collections,\nand removes all associated data for the product, including:\n\n- All product variants and their inventory items\n- Product media (images, videos) that are not referenced by other products\n- [Product options](https://shopify.dev/api/admin-graphql/latest/objects/ProductOption) and [option values](https://shopify.dev/api/admin-graphql/latest/objects/ProductOptionValue)\n- Product publications across all sales channels\n- Product tags and metadata associations\n\nThe `productDelete` mutation also has the following effects on existing orders and transactions:\n\n- **Draft orders**: Existing draft orders that reference this product will retain the product information as stored data, but the product reference will be removed. Draft orders can still be completed with the stored product details.\n- **Completed orders and refunds**: Previously completed orders that included this product aren't affected. The product information in completed orders is preserved for record-keeping, and existing refunds for this product remain valid and processable.\n\n> Caution:\n> Product deletion is irreversible. After a product is deleted, it can't be recovered. Consider archiving\n> or unpublishing products instead if you might need to restore them later.\n\nIf you need to delete a large product, such as one that has many\n[variants](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant)\nthat are active at several\n[locations](https://shopify.dev/api/admin-graphql/latest/objects/Location),\nyou might encounter timeout errors. To avoid these timeout errors, you can set the\n[`synchronous`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productDelete#arguments-synchronous)\nparameter to `false` to run the deletion asynchronously, which returns a\n[`ProductDeleteOperation`](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductDeleteOperation)\nthat you can monitor for completion status.\n\nIf you need more granular control over product cleanup, consider using these alternative mutations:\n\n- [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):\nUpdate the product status to archived or unpublished instead of deleting.\n- [`productVariantsBulkDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkDelete):\nDelete specific variants while keeping the product.\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete):\nDelete the choices available for a product, such as size, color, or material.\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)."}, {'name': 'productDuplicate', 'description': 'Duplicates a product.\n\nIf you need to duplicate a large product, such as one that has many\n[variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)\nthat are active at several\n[locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),\nyou might encounter timeout errors.\n\nTo avoid these timeout errors, you can instead duplicate the product asynchronously.\n\nIn API version 2024-10 and higher, include `synchronous: false` argument in this mutation to perform the duplication asynchronously.\n\nIn API version 2024-07 and lower, use the asynchronous [`ProductDuplicateAsyncV2`](https://shopify.dev/api/admin-graphql/2024-07/mutations/productDuplicateAsyncV2).\n\nMetafield values are not duplicated if the unique values capability is enabled.'}, {'name': 'productFeedCreate', 'description': 'Creates a product feed for a specific publication.'}, {'name': 'productFeedDelete', 'description': 'Deletes a product feed for a specific publication.'}, {'name': 'productFullSync', 'description': 'Runs the full product sync for a given shop.'}, {'name': 'productJoinSellingPlanGroups', 'description': 'Adds multiple selling plan groups to a product.'}, {'name': 'productLeaveSellingPlanGroups', 'description': 'Removes multiple groups from a product.'}, {'name': 'productOptionUpdate', 'description': 'Updates an [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)\non a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),\nsuch as size, color, or material. Each option includes a name, position, and a list of values. The combination\nof a product option and value creates a [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).\n\nUse the `productOptionUpdate` mutation for the following use cases:\n\n- **Update product choices**: Modify an existing option, like "Size" (Small, Medium, Large) or\n"Color" (Red, Blue, Green), so customers can select their preferred variant.\n- **Enable personalization features**: Update an option (for example, "Engraving text") to let customers customize their purchase.\n- **Offer seasonal or limited edition products**: Update a value\n(for example, "Holiday red") on an existing option to support limited-time or seasonal variants.\n- **Integrate with apps that manage product configuration**: Allow third-party apps to update options, like\n"Bundle size", when customers select or customize\n[product bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles).\n- **Link options to metafields**: Associate a product option with a custom\n[metafield](https://shopify.dev/docs/apps/build/custom-data), like "Fabric code", for\nricher integrations with other systems or apps.\n\n> Note:\n> The `productOptionUpdate` mutation enforces strict data integrity for product options and variants.\nAll option positions must be sequential, and every option should be used by at least one variant.\n\nAfter you update a product option, you can further manage a product\'s configuration using related mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).'}, {'name': 'productOptionsCreate', 'description': 'Creates one or more [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)\non a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),\nsuch as size, color, or material. Each option includes a name, position, and a list of values. The combination\nof a product option and value creates a [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).\n\nUse the `productOptionsCreate` mutation for the following use cases:\n\n- **Add product choices**: Add a new option, like "Size" (Small, Medium, Large) or\n"Color" (Red, Blue, Green), to an existing product so customers can select their preferred variant.\n- **Enable personalization features**: Add options such as "Engraving text" to let customers customize their purchase.\n- **Offer seasonal or limited edition products**: Add a new value\n(for example, "Holiday red") to an existing option to support limited-time or seasonal variants.\n- **Integrate with apps that manage product configuration**: Allow third-party apps to add options, like\n"Bundle size", when customers select or customize\n[product bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles).\n- **Link options to metafields**: Associate a product option with a custom\n[metafield](https://shopify.dev/docs/apps/build/custom-data), like "Fabric code", for\nricher integrations with other systems or apps.\n\n> Note:\n> The `productOptionsCreate` mutation enforces strict data integrity for product options and variants.\nAll option positions must be sequential, and every option should be used by at least one variant.\nIf you use the [`CREATE` variant strategy](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate#arguments-variantStrategy.enums.CREATE), consider the maximum allowed number of variants for each product\n(100 by default, and 2,048 if you\'ve\n[enabled the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)).\n\nAfter you create product options, you can further manage a product\'s configuration using related mutations:\n\n- [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n- [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).'}, {'name': 'productOptionsDelete', 'description': 'Deletes one or more [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)\nfrom a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product). Product options\ndefine the choices available for a product, such as size, color, or material.\n\n> Caution:\n> Removing an option can affect a product\'s\n> [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) and their\n> configuration. Deleting an option might also delete associated option values and, depending on the chosen\n> [strategy](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productoptionsdelete#arguments-strategy),\n> might affect variants.\n\nUse the `productOptionsDelete` mutation for the following use cases:\n\n- **Simplify product configuration**: Remove obsolete or unnecessary options\n(for example, discontinue "Material" if all variants are now the same material).\n- **Clean up after seasonal or limited-time offerings**: Delete options that are no longer\nrelevant (for example, "Holiday edition").\n- **Automate catalog management**: Enable apps or integrations to programmatically remove options as product\ndata changes.\n\n> Note:\n> The `productOptionsDelete` mutation enforces strict data integrity for product options and variants.\n> All option positions must remain sequential, and every remaining option must be used by at least one variant.\n\nAfter you delete a product option, you can further manage a product\'s configuration using related mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).'}, {'name': 'productOptionsReorder', 'description': 'Reorders the [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption) and\n[option values](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOptionValue) on a\n[product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),\nupdating the order in which [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)\nare presented to customers.\n\nThe `productOptionsReorder` mutation accepts a list of product options, each identified by `id` or `name`, and an\noptional list of values (also by `id` or `name`) specifying the new order. The order of options in the\nmutation\'s input determines their new positions (for example, the first option becomes `option1`).\nThe order of values within each option determines their new positions. The mutation recalculates the order of\nvariants based on the new option and value order.\n\nSuppose a product has the following variants:\n\n1. `"Red / Small"`\n2. `"Green / Medium"`\n3. `"Blue / Small"`\n\nYou reorder options and values:\n\n```\noptions: [\n  { name: "Size", values: [{ name: "Small" }, { name: "Medium" }] },\n  { name: "Color", values: [{ name: "Green" }, { name: "Red" }, { name: "Blue" }] }\n]\n```\n\nThe resulting variant order will be:\n\n1. `"Small / Green"`\n2. `"Small / Red"`\n3. `"Small / Blue"`\n4. `"Medium / Green"`\n\nUse the `productOptionsReorder` mutation for the following use cases:\n\n- **Change the order of product options**: For example, display "Color" before "Size" in a store.\n- **Reorder option values within an option**: For example, show "Red" before "Blue" in a color picker.\n- **Control the order of product variants**: The order of options and their values determines the sequence in which variants are listed and selected.\n- **Highlight best-selling options**: Present the most popular or relevant options and values first.\n- **Promote merchandising strategies**: Highlight seasonal colors, limited editions, or featured sizes.\n\n> Note:\n> The `productOptionsReorder` mutation enforces strict data integrity for product options and variants.\n> All option positions must be sequential, and every option should be used by at least one variant.\n\nAfter you reorder product options, you can further manage a product\'s configuration using related mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n- [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [managing product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).'}, {'name': 'productReorderMedia', 'description': 'Asynchronously reorders the media attached to a product, changing the sequence in which images, videos, and other media appear in product displays. This affects how media is presented across all sales channels.\n\nFor example, merchants can move their best product photo to the first position or reorder images to tell a better product story, with changes appearing in storefronts once processing completes.\n\nUse `ProductReorderMedia` to:\n- Optimize media presentation order for better customer experience\n- Implement drag-and-drop media management interfaces\n- Automate media sequencing based on performance or quality metrics\n\nThe operation processes asynchronously to handle products with large media collections without blocking other operations.\n\nLearn more about [product media](https://shopify.dev/docs/api/admin-graphql/latest/objects/Media).'}, {'name': 'productSet', 'description': "Performs multiple operations to create or update products in a single request.\n\nUse the `productSet` mutation to sync information from an external data source into Shopify, manage large\nproduct catalogs, and perform batch updates. The mutation is helpful for bulk product management, including price\nadjustments, inventory updates, and product lifecycle management.\n\nThe behavior of `productSet` depends on the type of field it's modifying:\n\n- **For list fields**: Creates new entries, updates existing entries, and deletes existing entries\nthat aren't included in the mutation's input. Common examples of list fields include\n[`collections`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.collections),\n[`metafields`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.metafields),\nand [`variants`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.variants).\n\n- **For all other field types**: Updates only the included fields. Any omitted fields will remain unchanged.\n\n> Note:\n> By default, stores have a limit of 100 product variants for each product. You can create a development store and\n> [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)\n> to create or update a maximum of 2,048 product variants in a single operation.\n\nYou can run `productSet` in one of the following modes:\n\n- **Synchronously**: Returns the updated product in the response.\n- **Asynchronously**: Returns a [`ProductSetOperation`](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductSetOperation) object.\nUse the [`productOperation`](https://shopify.dev/api/admin-graphql/latest/queries/productOperation) query to check the status of the operation and\nretrieve details of the updated product and its product variants.\n\nIf you need to only manage product variants, then use one of the following mutations:\n\n- [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\n- [`productVariantsBulkDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkDelete)\n\nIf you need to only manage product options, then use one of the following mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n\nLearn more about [syncing product data from an external source](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/sync-data)."}, {'name': 'productUpdate', 'description': "Updates a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)\nwith attributes such as title, description, vendor, and media.\n\nThe `productUpdate` mutation helps you modify many products at once, avoiding the tedious or time-consuming\nprocess of updating them one by one in the Shopify admin. Common examples including updating\nproduct details like status or tags.\n\nThe `productUpdate` mutation doesn't support updating\n[product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).\nTo update multiple product variants for a single product and manage prices, use the\n[`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)\nmutation.\n\n> Note:\n> The `productUpdate` mutation has a [throttle](https://shopify.dev/docs/api/usage/rate-limits#resource-based-rate-limits)\n> that takes effect when a store has 50,000 product variants. After this threshold is reached, no more than\n> 1,000 new product variants can be updated per day.\n\nAfter updating a product, you can make additional changes using one of the following mutations:\n\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):\nUsed to perform multiple operations on products, such as creating or modifying product options and variants.\n- [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish):\nUsed to publish the product and make it available to customers, if the product is currently unpublished.\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data)."}, {'name': 'productVariantAppendMedia', 'description': "Appends existing media from a product to specific variants of that product, creating associations between media files and particular product options. This allows different variants to showcase relevant images or videos.\n\nFor example, a t-shirt product might have color variants where each color variant displays only the images showing that specific color, helping customers see exactly what they're purchasing.\n\nUse `ProductVariantAppendMedia` to:\n- Associate specific images with product variants for accurate display\n- Build variant-specific media management in product interfaces\n- Implement automated media assignment based on variant attributes\n\nThe operation links existing product media to variants without duplicating files, maintaining efficient media storage while enabling variant-specific displays.\n\nLearn more about [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)."}, {'name': 'productVariantDetachMedia', 'description': 'Detaches media from product variants.'}, {'name': 'productVariantJoinSellingPlanGroups', 'description': 'Adds multiple selling plan groups to a product variant.'}, {'name': 'productVariantLeaveSellingPlanGroups', 'description': 'Remove multiple groups from a product variant.'}, {'name': 'productVariantRelationshipBulkUpdate', 'description': 'Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.'}, {'name': 'productVariantsBulkCreate', 'description': 'Creates multiple [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)\nfor a single [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) in one operation.\nYou can run this mutation directly or as part of a [bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/imports)\nfor large-scale catalog updates.\n\nUse the `productVariantsBulkCreate` mutation to efficiently add new product variants‚Äîsuch as different sizes,\ncolors, or materials‚Äîto an existing product. The mutation is helpful if you need to add product variants in bulk,\nsuch as importing from an external system.\n\nThe mutation supports:\n\n- Creating variants with custom options and values\n- Associating media (for example, images, videos, and 3D models) with the product or its variants\n- Handling complex product configurations\n\n> Note:\n> By default, stores have a limit of 100 product variants for each product. You can create a development store and\n> [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)\n> to create a maximum of 2,048 product variants in a single operation.\n\nAfter creating variants, you can make additional changes using one of the following mutations:\n\n- [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate):\nUpdates multiple product variants for a single product in one operation.\n- [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):\nUsed to perform multiple operations on products, such as creating or modifying product options and variants.\n\nYou can also specifically manage product options through related mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).'}, {'name': 'productVariantsBulkDelete', 'description': 'Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation.'}, {'name': 'productVariantsBulkReorder', 'description': 'Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation.'}, {'name': 'productVariantsBulkUpdate', 'description': "Updates multiple [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)\nfor a single [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) in one operation.\nYou can run this mutation directly or as part of a [bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/imports)\nfor large-scale catalog updates.\n\nUse the `productVariantsBulkUpdate` mutation to efficiently modify product variants‚Äîsuch as different sizes,\ncolors, or materials‚Äîassociated with an existing product. The mutation is helpful if you need to update a\nproduct's variants in bulk, such as importing from an external system.\n\nThe mutation supports:\n\n- Updating variants with custom options and values\n- Associating media (for example, images, videos, and 3D models) with the product or its variants\n- Handling complex product configurations\n\n> Note:\n> By default, stores have a limit of 100 product variants for each product. You can create a development store and\n> [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)\n> to update a maximum of 2,048 product variants in a single operation.\n\nAfter creating variants, you can make additional changes using the\n[`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet) mutation,\nwhich is used to perform multiple operations on products, such as creating or modifying product options and variants.\n\nYou can also specifically manage product options through related mutations:\n\n- [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)\n- [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)\n- [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)\n- [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)\n\nLearn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)\nand [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data)."}, {'name': 'pubSubServerPixelUpdate', 'description': 'Updates the server pixel to connect to a Google PubSub endpoint.\nRunning this mutation deletes any previous subscriptions for the server pixel.'}, {'name': 'publicationCreate', 'description': 'Creates a publication.'}, {'name': 'publicationDelete', 'description': 'Deletes a publication.'}, {'name': 'publicationUpdate', 'description': 'Updates a publication.'}, {'name': 'publishablePublish', 'description': "Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores."}, {'name': 'publishablePublishToCurrentChannel', 'description': "Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores."}, {'name': 'publishableUnpublish', 'description': "Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`."}, {'name': 'publishableUnpublishToCurrentChannel', 'description': "Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`."}, {'name': 'quantityPricingByVariantUpdate', 'description': 'Updates quantity pricing on a price list. You can use the `quantityPricingByVariantUpdate` mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.'}, {'name': 'quantityRulesAdd', 'description': 'Creates or updates existing quantity rules on a price list.\nYou can use the `quantityRulesAdd` mutation to set order level minimums, maximumums and increments for specific product variants.'}, {'name': 'quantityRulesDelete', 'description': 'Deletes specific quantity rules from a price list using a product variant ID.\nYou can use the `quantityRulesDelete` mutation to delete a set of quantity rules from a price list.'}, {'name': 'refundCreate', 'description': "Creates a refund for an order, allowing you to process returns and issue payments back to customers.\n\nUse the `refundCreate` mutation to programmatically process refunds in scenarios where you need to\nreturn money to customers, such as when handling returns, processing chargebacks, or correcting\norder errors.\n\nThe `refundCreate` mutation supports various refund scenarios:\n\n- Refunding line items with optional restocking\n- Refunding shipping costs\n- Refunding duties and import taxes\n- Refunding additional fees\n- Processing refunds through different payment methods\n- Issuing store credit refunds (when enabled)\n\nYou can create both full and partial refunds, and optionally allow over-refunding in specific\ncases.\n\nAfter creating a refund, you can track its status and details through the order's\n[`refunds`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.refunds)\nfield. The refund is associated with the order and can be used for reporting and reconciliation purposes.\n\nLearn more about\n[managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)\nand [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties).\n\n> Note:\n> The refunding behavior of the `refundCreate` mutation is similar to the\n[`refundReturn`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnRefund)\nmutation. The key difference is that the `refundCreate` mutation lets you to specify restocking behavior\nfor line items, whereas the `returnRefund` mutation focuses solely on handling the financial refund without\nany restocking input."}, {'name': 'removeFromReturn', 'description': 'Removes return and/or exchange lines from a return.'}, {'name': 'returnApproveRequest', 'description': "Approves a customer's return request.\nIf this mutation is successful, then the `Return.status` field of the\napproved return is set to `OPEN`."}, {'name': 'returnCancel', 'description': 'Cancels a return and restores the items back to being fulfilled.\nCanceling a return is only available before any work has been done\non the return (such as an inspection or refund).'}, {'name': 'returnClose', 'description': 'Indicates a return is complete, either when a refund has been made and items restocked,\nor simply when it has been marked as returned in the system.'}, {'name': 'returnCreate', 'description': "Creates a return from an existing order that has at least one fulfilled\n[line item](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem)\nthat hasn't yet been refunded. If you create a return on an archived order, then the order is automatically\nunarchived.\n\nUse the `returnCreate` mutation when your workflow involves\n[approving](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnApproveRequest) or\n[declining](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnDeclineRequest) requested returns\noutside of the Shopify platform.\n\nThe `returnCreate` mutation performs the following actions:\n\n- Creates a return in the `OPEN` state, and assumes that the return request from the customer has already been\napproved\n- Creates a [reverse fulfillment order](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),\nand enables you to create a [reverse delivery](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)\nfor the reverse fulfillment order\n- Creates a sales agreement with a `RETURN` reason, which links to all sales created for the return or exchange\n- Generates sales records that reverse the sales records for the items being returned\n- Generates sales records for any exchange line items\n\nAfter you've created a return, use the\n[`return`](https://shopify.dev/docs/api/admin-graphql/latest/queries/return) query to retrieve the\nreturn by its ID. Learn more about providing a\n[return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)\nfor merchants."}, {'name': 'returnDeclineRequest', 'description': 'Declines a return on an order.\nWhen a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.\nUse the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.'}, {'name': 'returnProcess', 'description': 'Process a return.'}, {'name': 'returnReopen', 'description': 'Reopens a closed return.'}, {'name': 'returnRequest', 'description': "A customer's return request that hasn't been approved or declined.\nThis mutation sets the value of the `Return.status` field to `REQUESTED`.\nTo create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation."}, {'name': 'reverseDeliveryCreateWithShipping', 'description': 'Creates a new reverse delivery with associated external shipping information.'}, {'name': 'reverseDeliveryShippingUpdate', 'description': 'Updates a reverse delivery with associated external shipping information.'}, {'name': 'reverseFulfillmentOrderDispose', 'description': 'Disposes reverse fulfillment order line items.'}, {'name': 'savedSearchCreate', 'description': 'Creates a saved search.'}, {'name': 'savedSearchDelete', 'description': 'Delete a saved search.'}, {'name': 'savedSearchUpdate', 'description': 'Updates a saved search.'}, {'name': 'scriptTagCreate', 'description': '<div class="note"><h4>Theme app extensions</h4>\n  <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>\n\n<div class="note"><h4>Script tag deprecation</h4>\n  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>\n\n\nCreates a new script tag.'}, {'name': 'scriptTagDelete', 'description': '<div class="note"><h4>Theme app extensions</h4>\n  <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>\n\n<div class="note"><h4>Script tag deprecation</h4>\n  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>\n\n\nDeletes a script tag.'}, {'name': 'scriptTagUpdate', 'description': '<div class="note"><h4>Theme app extensions</h4>\n  <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>\n\n<div class="note"><h4>Script tag deprecation</h4>\n  <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>\n\n\nUpdates a script tag.'}, {'name': 'segmentCreate', 'description': 'Creates a segment.'}, {'name': 'segmentDelete', 'description': 'Deletes a segment.'}, {'name': 'segmentUpdate', 'description': 'Updates a segment.'}, {'name': 'sellingPlanGroupAddProductVariants', 'description': 'Adds multiple product variants to a selling plan group.'}, {'name': 'sellingPlanGroupAddProducts', 'description': 'Adds multiple products to a selling plan group.'}, {'name': 'sellingPlanGroupCreate', 'description': 'Creates a Selling Plan Group.'}, {'name': 'sellingPlanGroupDelete', 'description': 'Delete a Selling Plan Group. This does not affect subscription contracts.'}, {'name': 'sellingPlanGroupRemoveProductVariants', 'description': 'Removes multiple product variants from a selling plan group.'}, {'name': 'sellingPlanGroupRemoveProducts', 'description': 'Removes multiple products from a selling plan group.'}, {'name': 'sellingPlanGroupUpdate', 'description': 'Update a Selling Plan Group.'}, {'name': 'serverPixelCreate', 'description': 'Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.'}, {'name': 'serverPixelDelete', 'description': 'Deletes the Server Pixel associated with the current app & shop.'}, {'name': 'shippingPackageDelete', 'description': 'Deletes a shipping package.'}, {'name': 'shippingPackageMakeDefault', 'description': 'Set a shipping package as the default.\nThe default shipping package is the one used to calculate shipping costs on checkout.'}, {'name': 'shippingPackageUpdate', 'description': 'Updates a shipping package.'}, {'name': 'shopLocaleDisable', 'description': 'Deletes a locale for a shop. This also deletes all translations of this locale.'}, {'name': 'shopLocaleEnable', 'description': 'Adds a locale for a shop. The newly added locale is in the unpublished state.'}, {'name': 'shopLocaleUpdate', 'description': 'Updates a locale for a shop.'}, {'name': 'shopPolicyUpdate', 'description': 'Updates a shop policy.'}, {'name': 'shopResourceFeedbackCreate', 'description': "The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if\nyour app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.\n\nResource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.\n\nThis resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.\n\n## Sending feedback on a shop\n\nYou can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: `requires_action` or `success`. You need to send a `requires_action` feedback request for each step that the merchant is required to complete.\n\nIf there are multiple set-up steps that require merchant action, then send feedback with a state of `requires_action` as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a `success` feedback request.\n\n#### Important\nSending feedback replaces previously sent feedback for the shop. Send a new `shopResourceFeedbackCreate` mutation to push the latest state of a shop or its resources to Shopify."}, {'name': 'shopifyPaymentsPayoutAlternateCurrencyCreate', 'description': 'Creates an alternate currency payout for a Shopify Payments account.'}, {'name': 'stagedUploadsCreate', 'description': "Creates staged upload targets for file uploads such as images, videos, and 3D models.\n\nUse the `stagedUploadsCreate` mutation instead of direct file creation mutations when:\n\n- **Uploading large files**: Files over a few MB benefit from staged uploads for better reliability\n- **Uploading media files**: Videos, 3D models, and high-resolution images\n- **Bulk importing**: CSV files, product catalogs, or other bulk data\n- **Using external file sources**: When files are stored remotely and need to be transferred to Shopify\n\nThe `stagedUploadsCreate` mutation is the first step in Shopify's secure two-step upload process:\n\n**Step 1: Create staged upload targets** (this mutation)\n- Generate secure, temporary upload URLs for your files.\n- Receive authentication parameters for the upload.\n\n**Step 2: Upload files and create assets**\n- Upload your files directly to the provided URLs using the authentication parameters.\n- Use the returned `resourceUrl` as the `originalSource` in subsequent mutations like `fileCreate`.\n\nThis approach provides better performance for large files, handles network interruptions gracefully,\nand ensures secure file transfers to Shopify's storage infrastructure.\n\n> Note:\n> File size is required when uploading\n> [`VIDEO`](https://shopify.dev/docs/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#enums-VIDEO) or\n> [`MODEL_3D`](https://shopify.dev/docs/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#enums-MODEL_3D)\n> resources.\n\nAfter creating staged upload targets, complete the process by:\n\n1. **Uploading files**: Send your files to the returned [`url`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.url) using the provided\n[`parameters`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.parameters)\nfor authentication\n2. **Creating file assets**: Use the [`resourceUrl`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.resourceUrl)\nas the `originalSource` in mutations such as:\n   - [`fileCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileCreate):\n     Creates file assets from staged uploads\n   - [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):\n     Updates products with new media from staged uploads\n\nLearn more about [uploading media to Shopify](https://shopify.dev/apps/online-store/media/products)."}, {'name': 'standardMetafieldDefinitionEnable', 'description': 'Activates the specified standard metafield definition from its template.\n\nRefer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).'}, {'name': 'standardMetaobjectDefinitionEnable', 'description': 'Enables the specified standard metaobject definition from its template.'}, {'name': 'storeCreditAccountCredit', 'description': 'Creates a credit transaction that increases the store credit account balance by the given amount.\nThis operation will create an account if one does not already exist.\nA store credit account owner can hold multiple accounts each with a different currency.\nUse the most appropriate currency for the given store credit account owner.'}, {'name': 'storeCreditAccountDebit', 'description': 'Creates a debit transaction that decreases the store credit account balance by the given amount.'}, {'name': 'storefrontAccessTokenCreate', 'description': 'Creates a storefront access token for use with the [Storefront API](https://shopify.dev/docs/api/storefront).\n\nAn app can have a maximum of 100 active storefront access tokens for each shop.\n\n[Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).'}, {'name': 'storefrontAccessTokenDelete', 'description': 'Deletes a storefront access token.'}, {'name': 'subscriptionBillingAttemptCreate', 'description': 'Creates a new subscription billing attempt. For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).'}, {'name': 'subscriptionBillingCycleBulkCharge', 'description': 'Asynchronously queries and charges all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query.'}, {'name': 'subscriptionBillingCycleBulkSearch', 'description': 'Asynchronously queries all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query.'}, {'name': 'subscriptionBillingCycleCharge', 'description': 'Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for [subscriptionBillingAttemptCreate](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionBillingAttemptCreate). For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).'}, {'name': 'subscriptionBillingCycleContractDraftCommit', 'description': 'Commits the updates of a Subscription Billing Cycle Contract draft.'}, {'name': 'subscriptionBillingCycleContractDraftConcatenate', 'description': 'Concatenates a contract to a Subscription Draft.'}, {'name': 'subscriptionBillingCycleContractEdit', 'description': 'Edit the contents of a subscription contract for the specified billing cycle.'}, {'name': 'subscriptionBillingCycleEditDelete', 'description': 'Delete the schedule and contract edits of the selected subscription billing cycle.'}, {'name': 'subscriptionBillingCycleEditsDelete', 'description': 'Delete the current and future schedule and contract edits of a list of subscription billing cycles.'}, {'name': 'subscriptionBillingCycleScheduleEdit', 'description': 'Modify the schedule of a specific billing cycle.'}, {'name': 'subscriptionBillingCycleSkip', 'description': 'Skips a Subscription Billing Cycle.'}, {'name': 'subscriptionBillingCycleUnskip', 'description': 'Unskips a Subscription Billing Cycle.'}, {'name': 'subscriptionContractActivate', 'description': 'Activates a Subscription Contract. Contract status must be either active, paused, or failed.'}, {'name': 'subscriptionContractAtomicCreate', 'description': 'Creates a Subscription Contract.'}, {'name': 'subscriptionContractCancel', 'description': 'Cancels a Subscription Contract.'}, {'name': 'subscriptionContractCreate', 'description': 'Creates a Subscription Contract Draft.\nYou can submit all the desired information for the draft using [Subscription Draft Input object](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/SubscriptionDraftInput).\nYou can also update the draft using the [Subscription Contract Update](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionContractUpdate) mutation.\nThe draft is not saved until you call the [Subscription Draft Commit](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionDraftCommit) mutation.'}, {'name': 'subscriptionContractExpire', 'description': 'Expires a Subscription Contract.'}, {'name': 'subscriptionContractFail', 'description': 'Fails a Subscription Contract.'}, {'name': 'subscriptionContractPause', 'description': 'Pauses a Subscription Contract.'}, {'name': 'subscriptionContractProductChange', 'description': 'Allows for the easy change of a Product in a Contract or a Product price change.'}, {'name': 'subscriptionContractSetNextBillingDate', 'description': 'Sets the next billing date of a Subscription Contract. This field is managed by the apps.\n        Alternatively you can utilize our\n        [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),\n        which provide auto-computed billing dates and additional functionalities.'}, {'name': 'subscriptionContractUpdate', 'description': 'The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This [draft](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionDraft) can be reviewed and modified as needed. Once the draft is committed with [subscriptionDraftCommit](https://shopify.dev/api/admin-graphql/latest/mutations/subscriptionDraftCommit), the changes are applied to the original subscription contract.'}, {'name': 'subscriptionDraftCommit', 'description': 'Commits the updates of a Subscription Contract draft.'}, {'name': 'subscriptionDraftDiscountAdd', 'description': 'Adds a subscription discount to a subscription draft.'}, {'name': 'subscriptionDraftDiscountCodeApply', 'description': 'Applies a code discount on the subscription draft.'}, {'name': 'subscriptionDraftDiscountRemove', 'description': 'Removes a subscription discount from a subscription draft.'}, {'name': 'subscriptionDraftDiscountUpdate', 'description': 'Updates a subscription discount on a subscription draft.'}, {'name': 'subscriptionDraftFreeShippingDiscountAdd', 'description': 'Adds a subscription free shipping discount to a subscription draft.'}, {'name': 'subscriptionDraftFreeShippingDiscountUpdate', 'description': 'Updates a subscription free shipping discount on a subscription draft.'}, {'name': 'subscriptionDraftLineAdd', 'description': 'Adds a subscription line to a subscription draft.'}, {'name': 'subscriptionDraftLineRemove', 'description': 'Removes a subscription line from a subscription draft.'}, {'name': 'subscriptionDraftLineUpdate', 'description': 'Updates a subscription line on a subscription draft.'}, {'name': 'subscriptionDraftUpdate', 'description': 'Updates a Subscription Draft.'}, {'name': 'tagsAdd', 'description': 'Add tags to an order, a draft order, a customer, a product, or an online store article.'}, {'name': 'tagsRemove', 'description': 'Remove tags from an order, a draft order, a customer, a product, or an online store article.'}, {'name': 'taxAppConfigure', 'description': 'Allows tax app configurations for tax partners.'}, {'name': 'themeCreate', 'description': 'Creates a theme using an external URL or for files that were previously uploaded using the\n[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).\nThese themes are added to the [Themes page](https://admin.shopify.com/themes) in Shopify admin.'}, {'name': 'themeDelete', 'description': 'Deletes a theme.'}, {'name': 'themeFilesCopy', 'description': 'Copy theme files. Copying to existing theme files will overwrite them.'}, {'name': 'themeFilesDelete', 'description': "Deletes a theme's files."}, {'name': 'themeFilesUpsert', 'description': 'Create or update theme files.'}, {'name': 'themePublish', 'description': 'Publishes a theme.'}, {'name': 'themeUpdate', 'description': 'Updates a theme.'}, {'name': 'transactionVoid', 'description': 'Trigger the voiding of an uncaptured authorization transaction.'}, {'name': 'translationsRegister', 'description': 'Creates or updates translations.'}, {'name': 'translationsRemove', 'description': 'Deletes translations.'}, {'name': 'urlRedirectBulkDeleteAll', 'description': 'Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.'}, {'name': 'urlRedirectBulkDeleteByIds', 'description': 'Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) \nobjects in bulk by IDs.\nLearn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect) \nobjects.'}, {'name': 'urlRedirectBulkDeleteBySavedSearch', 'description': 'Asynchronously delete redirects in bulk.'}, {'name': 'urlRedirectBulkDeleteBySearch', 'description': 'Asynchronously delete redirects in bulk.'}, {'name': 'urlRedirectCreate', 'description': 'Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.'}, {'name': 'urlRedirectDelete', 'description': 'Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.'}, {'name': 'urlRedirectImportCreate', 'description': 'Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.\n\nAfter creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.'}, {'name': 'urlRedirectImportSubmit', 'description': 'Submits a `UrlRedirectImport` request to be processed.\n\nThe `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.'}, {'name': 'urlRedirectUpdate', 'description': 'Updates a URL redirect.'}, {'name': 'validationCreate', 'description': 'Creates a validation.'}, {'name': 'validationDelete', 'description': 'Deletes a validation.'}, {'name': 'validationUpdate', 'description': 'Update a validation.'}, {'name': 'webPixelCreate', 'description': "Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)\nby creating a web pixel record on the store where you installed your app.\n\nWhen you run the `webPixelCreate` mutation, Shopify validates it\nagainst the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)."}, {'name': 'webPixelDelete', 'description': 'Deletes the web pixel shop settings.'}, {'name': 'webPixelUpdate', 'description': "Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)\nby updating a web pixel record on the store where you installed your app.\n\nWhen you run the `webPixelUpdate` mutation, Shopify validates it\nagainst the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match\nthe schema that you defined, then the mutation fails. Learn how to\ndefine [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)."}, {'name': 'webPresenceCreate', 'description': 'Creates a web presence.'}, {'name': 'webPresenceDelete', 'description': 'Deletes a web presence.'}, {'name': 'webPresenceUpdate', 'description': 'Updates a web presence.'}, {'name': 'webhookSubscriptionCreate', 'description': "Creates a new webhook subscription.\n\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe)."}, {'name': 'webhookSubscriptionDelete', 'description': "Deletes a webhook subscription.\n\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe)."}, {'name': 'webhookSubscriptionUpdate', 'description': "Updates a webhook subscription.\n\nBuilding an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe)."}]}}, 'status': 'success'}
2025-09-02 18:48:09,958 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n                query GetProduct($id: ID!) {\n                    product(id: $id) {\n                        id\n                        title\n                        variants(first: 50) {\n                            edges {\n                                node {\n                                    id\n                                    sku\n                                    price\n                                    title\n                                }\n                            }\n                        }\n                    }\n                }\n            ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-02 18:48:10,501 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue'}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow'}}]}}}, 'status': 'success'}
2025-09-02 18:48:10,502 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n                mutation productUpdate($input: ProductInput!) {\n                    productUpdate(input: $input) {\n                        product {\n                            id\n                            title\n                            variants(first: 10) {\n                                edges {\n                                    node {\n                                        id\n                                        sku\n                                        price\n                                        title\n                                    }\n                                }\n                            }\n                        }\n                        userErrors {\n                            field\n                            message\n                        }\n                    }\n                }\n                ', 'variables': {'input': {'id': 'gid://shopify/Product/7527948386370', 'variantId': 'gid://shopify/ProductVariant/42387257458754', 'variantPrice': '4500.00'}}}, 'response': None, 'status': None}
2025-09-02 18:48:11,013 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variantId (Field is not defined on ProductInput), variantPrice (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variantId': 'gid://shopify/ProductVariant/42387257458754', 'variantPrice': '4500.00'}, 'problems': [{'path': ['variantId'], 'explanation': 'Field is not defined on ProductInput'}, {'path': ['variantPrice'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variantId (Field is not defined on ProductInput), variantPrice (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variantId": "gid://shopify/ProductVariant/42387257458754",
        "variantPrice": "4500.00"
      },
      "problems": [
        {
          "path": [
            "variantId"
          ],
          "explanation": "Field is not defined on ProductInput"
        },
        {
          "path": [
            "variantPrice"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-02 18:48:32,055 - sync_service - ERROR - SAP logging client login error: All connection attempts failed
2025-09-02 18:48:32,056 - sync_service - ERROR - Failed to add API log to SAP: Failed to login to SAP
2025-09-02 18:50:45,455 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:50:45,458 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:50:45,526 - sync_service - INFO - Starting price changes sync...
2025-09-02 18:50:45,531 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 18:50:45,532 - sync_service - INFO - Processing price changes for store: local
2025-09-02 18:51:06,632 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-02 18:51:06,634 - sync_service - ERROR - Failed to get price changes from SAP for store local: Failed to login to SAP
2025-09-02 18:51:06,634 - sync_service - ERROR - Failed to get price changes for store local: Failed to login to SAP
2025-09-02 18:51:06,634 - sync_service - INFO - Processing price changes for store: international
2025-09-02 18:51:27,702 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-02 18:51:27,704 - sync_service - ERROR - Failed to get price changes from SAP for store international: Failed to login to SAP
2025-09-02 18:51:27,706 - sync_service - ERROR - Failed to get price changes for store international: Failed to login to SAP
2025-09-02 18:51:27,707 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-02 18:51:27,708 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-02 18:52:22,438 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:52:22,441 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:52:22,451 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:52:22,454 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:52:22,456 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:52:23,037 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'title': 'Blue', 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:52:23,040 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:52:23,573 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-02 18:52:23,575 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: [$variants]) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'price': '4500.00'}]}}, 'response': None, 'status': None}
2025-09-02 18:52:24,035 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Type mismatch on variable $variants and argument variants ([[ProductVariantInput!]!]! / [ProductVariantsBulkInput!]!)', 'locations': [{'line': 2, 'column': 52}], 'path': ['mutation productVariantsBulkUpdate', 'productVariantsBulkUpdate', 'variants'], 'extensions': {'code': 'variableMismatch', 'variableName': 'variants', 'typeName': '[[ProductVariantInput!]!]!', 'argumentName': 'variants', 'errorMessage': 'Type mismatch'}}
GraphQL Errors: [
  {
    "message": "Type mismatch on variable $variants and argument variants ([[ProductVariantInput!]!]! / [ProductVariantsBulkInput!]!)",
    "locations": [
      {
        "line": 2,
        "column": 52
      }
    ],
    "path": [
      "mutation productVariantsBulkUpdate",
      "productVariantsBulkUpdate",
      "variants"
    ],
    "extensions": {
      "code": "variableMismatch",
      "variableName": "variants",
      "typeName": "[[ProductVariantInput!]!]!",
      "argumentName": "variants",
      "errorMessage": "Type mismatch"
    }
  }
]
2025-09-02 18:52:25,715 - sync_service - INFO - SAP logging client login successful
2025-09-02 18:52:26,526 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 18:52:53,481 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:52:53,485 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:52:53,494 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:52:53,496 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:52:53,497 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                title\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n    ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-02 18:53:03,525 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 18:53:05,584 - sync_service - INFO - SAP logging client login successful
2025-09-02 18:53:06,367 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 18:57:39,894 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:57:39,895 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:57:39,944 - sync_service - INFO - Starting price changes sync...
2025-09-02 18:57:39,944 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 18:57:39,946 - sync_service - INFO - Processing price changes for store: local
2025-09-02 18:57:40,875 - sync_service - INFO - SAP login successful
2025-09-02 18:57:42,631 - sync_service - INFO - SAP logging client login successful
2025-09-02 18:57:43,477 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 18:57:43,478 - sync_service - INFO - Found 1 price changes for store local
2025-09-02 18:57:43,481 - sync_service - INFO - Processing 1 price changes for store local
2025-09-02 18:57:43,483 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-02 18:57:43,485 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 18:57:53,483 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 18:57:54,311 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 18:57:54,312 - sync_service - ERROR - Failed to get product gid://shopify/Product/7539303645250 for price update: GraphQL query error for store local: 
2025-09-02 18:57:54,313 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 4500.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 18:57:54,832 - sync_service - INFO - Processing price changes for store: international
2025-09-02 18:57:56,492 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 18:57:56,493 - sync_service - INFO - Found 1 price changes for store international
2025-09-02 18:57:56,494 - sync_service - INFO - Processing 1 price changes for store international
2025-09-02 18:57:56,494 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-02 18:57:56,495 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 18:58:06,517 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-02 18:58:07,362 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 18:58:07,368 - sync_service - ERROR - Failed to get product gid://shopify/Product/7573041905754 for price update: GraphQL query error for store international: 
2025-09-02 18:58:07,369 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 360.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 18:58:07,883 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-02 18:58:07,886 - sync_service - INFO - Price changes sync completed: 2 processed, 0 successful, 2 errors
2025-09-02 18:59:47,169 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 18:59:47,170 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 18:59:47,205 - sync_service - INFO - Starting price changes sync...
2025-09-02 18:59:47,207 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 18:59:47,209 - sync_service - INFO - Processing price changes for store: local
2025-09-02 18:59:48,130 - sync_service - INFO - SAP login successful
2025-09-02 18:59:49,610 - sync_service - INFO - SAP logging client login successful
2025-09-02 18:59:50,345 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 18:59:50,351 - sync_service - INFO - Found 1 price changes for store local
2025-09-02 18:59:50,353 - sync_service - INFO - Processing 1 price changes for store local
2025-09-02 18:59:50,354 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-02 18:59:50,356 - sync_service - INFO - Using derived default variant gid://shopify/ProductVariant/7539303645250 for product gid://shopify/Product/7539303645250
2025-09-02 18:59:51,131 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 18:59:51,893 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 18:59:51,895 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 19:00:01,917 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 19:00:02,673 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 19:00:03,409 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 19:00:03,411 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/7539303645250 price in store local: GraphQL query error for store local: 
2025-09-02 19:00:03,412 - sync_service - ERROR - Failed to update product gid://shopify/Product/7539303645250 default variant price in store local: GraphQL query error for store local: 
2025-09-02 19:00:03,414 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 4500.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 19:00:03,931 - sync_service - INFO - Processing price changes for store: international
2025-09-02 19:00:05,519 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 19:00:05,521 - sync_service - INFO - Found 1 price changes for store international
2025-09-02 19:00:05,523 - sync_service - INFO - Processing 1 price changes for store international
2025-09-02 19:00:05,524 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-02 19:00:05,525 - sync_service - INFO - Using derived default variant gid://shopify/ProductVariant/7573041905754 for product gid://shopify/Product/7573041905754
2025-09-02 19:00:06,274 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:00:06,610 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:00:06,611 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 19:00:07,112 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': None}, 'status': 'success'}
2025-09-02 19:00:07,470 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 19:00:07,473 - sync_service - ERROR - Error updating variant gid://shopify/ProductVariant/7573041905754 price in store international: 'NoneType' object is not subscriptable
2025-09-02 19:00:07,476 - sync_service - ERROR - Failed to update product gid://shopify/Product/7573041905754 default variant price in store international: 'NoneType' object is not subscriptable
2025-09-02 19:00:07,477 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 360.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 19:00:07,980 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-02 19:00:07,983 - sync_service - INFO - Price changes sync completed: 2 processed, 0 successful, 2 errors
2025-09-02 19:01:33,489 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 19:01:33,502 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 19:01:33,829 - sync_service - INFO - Starting price changes sync...
2025-09-02 19:01:33,927 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 19:01:33,959 - sync_service - INFO - Processing price changes for store: local
2025-09-02 19:01:34,871 - sync_service - INFO - SAP login successful
2025-09-02 19:01:36,560 - sync_service - INFO - SAP logging client login successful
2025-09-02 19:01:37,424 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 19:01:37,426 - sync_service - INFO - Found 1 price changes for store local
2025-09-02 19:01:37,427 - sync_service - INFO - Processing 1 price changes for store local
2025-09-02 19:01:37,428 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-02 19:01:37,428 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 19:01:47,451 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 19:01:48,405 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 19:01:48,408 - sync_service - ERROR - Failed to get product gid://shopify/Product/7539303645250 for price update: GraphQL query error for store local: 
2025-09-02 19:01:48,409 - sync_service - ERROR - Failed to update product gid://shopify/Product/7539303645250 default variant price in store local: GraphQL query error for store local: 
2025-09-02 19:01:48,410 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 4500.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 19:01:48,920 - sync_service - INFO - Processing price changes for store: international
2025-09-02 19:01:51,027 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 19:01:51,051 - sync_service - INFO - Found 1 price changes for store international
2025-09-02 19:01:51,073 - sync_service - INFO - Processing 1 price changes for store international
2025-09-02 19:01:51,075 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-02 19:01:51,076 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 19:02:01,088 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-02 19:02:01,905 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 19:02:01,907 - sync_service - ERROR - Failed to get product gid://shopify/Product/7573041905754 for price update: GraphQL query error for store international: 
2025-09-02 19:02:01,908 - sync_service - ERROR - Failed to update product gid://shopify/Product/7573041905754 default variant price in store international: GraphQL query error for store international: 
2025-09-02 19:02:01,908 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 360.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 19:02:02,412 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-02 19:02:02,415 - sync_service - INFO - Price changes sync completed: 2 processed, 0 successful, 2 errors
2025-09-02 19:05:53,030 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 19:05:53,032 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 19:05:53,054 - sync_service - INFO - Starting price changes sync...
2025-09-02 19:05:53,055 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 19:05:53,057 - sync_service - INFO - Processing price changes for store: local
2025-09-02 19:05:54,040 - sync_service - INFO - SAP login successful
2025-09-02 19:05:55,810 - sync_service - INFO - SAP logging client login successful
2025-09-02 19:05:56,759 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 19:05:56,760 - sync_service - INFO - Found 1 price changes for store local
2025-09-02 19:05:56,760 - sync_service - INFO - Processing 1 price changes for store local
2025-09-02 19:05:56,761 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-02 19:05:56,761 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 19:06:06,769 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 19:06:07,842 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 19:06:07,843 - sync_service - ERROR - Failed to get product gid://shopify/Product/7539303645250 for price update: GraphQL query error for store local: 
2025-09-02 19:06:07,843 - sync_service - ERROR - Failed to update product gid://shopify/Product/7539303645250 default variant price in store local: GraphQL query error for store local: 
2025-09-02 19:06:07,844 - sync_service - ERROR - ‚ùå Shopify update failed for FG-0000717 (price: 4500.0) - SAP retrieval succeeded but Shopify update failed
2025-09-02 19:06:08,355 - sync_service - INFO - Processing price changes for store: international
2025-09-02 19:06:10,321 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 19:06:10,324 - sync_service - INFO - Found 1 price changes for store international
2025-09-02 19:06:10,325 - sync_service - INFO - Processing 1 price changes for store international
2025-09-02 19:06:10,326 - sync_service - INFO - Processing product price change for FG-0000717 (product ID: gid://shopify/Product/7573041905754)
2025-09-02 19:06:10,326 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7573041905754'}}, 'response': None, 'status': None}
2025-09-02 19:06:10,936 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'handle': 'mm-whoop', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44341850079322'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-02 19:06:10,938 - sync_service - INFO - Found default variant gid://shopify/ProductVariant/42244570579034 for product gid://shopify/Product/7573041905754
2025-09-02 19:06:11,958 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:06:11,960 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42244570579034'}}, 'response': None, 'status': None}
2025-09-02 19:06:12,469 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7573041905754', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-02 19:06:12,470 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            mutation productUpdate($input: ProductInput!) {\n                productUpdate(input: $input) {\n                    product {\n                        id\n                        title\n                        variants(first: 1) {\n                            edges {\n                                node {\n                                    id\n                                    price\n                                    compareAtPrice\n                                }\n                            }\n                        }\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n            ', 'variables': {'input': {'id': 'gid://shopify/Product/7573041905754', 'variants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'price': '360.0', 'compareAtPrice': '400.0'}]}}}, 'response': None, 'status': None}
2025-09-02 19:06:12,979 - sync_service - ERROR - GraphQL query error for store international: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7573041905754', 'variants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'price': '360.0', 'compareAtPrice': '400.0'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7573041905754",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42244570579034",
            "price": "360.0",
            "compareAtPrice": "400.0"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-02 19:06:13,902 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-02 19:06:13,904 - sync_service - INFO - Product update failed, trying bulk variant update for gid://shopify/ProductVariant/42244570579034
2025-09-02 19:06:13,904 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/7573041905754', 'variants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'price': '360.0', 'compareAtPrice': '400.0'}]}}, 'response': None, 'status': None}
2025-09-02 19:06:22,106 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'sku': 'FG-0000717', 'price': '360.00', 'compareAtPrice': '400.00', 'title': 'Default Title', 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}], 'userErrors': []}}, 'status': 'success'}
2025-09-02 19:06:23,122 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:06:23,124 - sync_service - INFO - Successfully updated variant gid://shopify/ProductVariant/42244570579034 price to 360.0, sale price to 400.0 in store international
2025-09-02 19:06:23,125 - sync_service - INFO - Successfully updated product gid://shopify/Product/7573041905754 default variant price to 360.0, sale price to 400.0 in store international
2025-09-02 19:06:24,035 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 19:06:24,036 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000717-international: 360.0 (Shopify update was successful)
2025-09-02 19:06:24,037 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000717 (price: 360.0)
2025-09-02 19:06:24,540 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 2, 'success_count': 1, 'error_count': 1, 'details': None}
2025-09-02 19:06:24,542 - sync_service - INFO - Price changes sync completed: 2 processed, 1 successful, 1 errors
2025-09-02 19:13:48,798 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 19:13:48,800 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 19:13:49,590 - sync_service - INFO - SAP login successful
2025-09-02 19:13:51,078 - sync_service - INFO - SAP logging client login successful
2025-09-02 19:13:51,779 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 19:13:51,782 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-02 19:14:01,804 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-02 19:14:02,588 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-02 19:14:04,020 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 19:27:22,532 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-02 19:27:22,533 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-02 19:27:22,562 - sync_service - INFO - Starting price changes sync...
2025-09-02 19:27:22,562 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-02 19:27:22,563 - sync_service - INFO - Processing price changes for store: local
2025-09-02 19:27:23,762 - sync_service - INFO - SAP login successful
2025-09-02 19:27:25,694 - sync_service - INFO - SAP logging client login successful
2025-09-02 19:27:26,714 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-02 19:27:26,716 - sync_service - INFO - Found 2 price changes for store local
2025-09-02 19:27:26,718 - sync_service - INFO - Processing 2 price changes for store local
2025-09-02 19:27:26,720 - sync_service - INFO - Processing product price change for FG-0000717 using SAP variant ID: gid://shopify/ProductVariant/42428545040450
2025-09-02 19:27:27,539 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 19:27:27,540 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42428545040450', 'variants': [{'id': 'gid://shopify/ProductVariant/42428545040450', 'price': '4500.0', 'compareAtPrice': '5000.0'}]}}, 'response': None, 'status': None}
2025-09-02 19:27:28,072 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-02 19:27:28,863 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 19:27:28,864 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42428545040450 price to 4500.0, sale price to 5000.0 in store local
2025-09-02 19:27:29,617 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 19:27:29,618 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000717-local: 4500.0 (Shopify update was successful)
2025-09-02 19:27:29,619 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000717 (price: 4500.0)
2025-09-02 19:27:30,127 - sync_service - INFO - Processing product price change for FG-0000715 using SAP variant ID: gid://shopify/ProductVariant/42387257458754
2025-09-02 19:27:30,826 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 19:27:30,828 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42387257458754', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'price': '4000.0', 'compareAtPrice': '5000.0'}]}}, 'response': None, 'status': None}
2025-09-02 19:27:39,096 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-02 19:27:39,786 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-02 19:27:39,789 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42387257458754 price to 4000.0, sale price to 5000.0 in store local
2025-09-02 19:27:40,530 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 19:27:40,530 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000715-local: 4000.0 (Shopify update was successful)
2025-09-02 19:27:40,531 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000715 (price: 4000.0)
2025-09-02 19:27:41,037 - sync_service - INFO - Processing price changes for store: international
2025-09-02 19:27:42,062 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-02 19:27:42,064 - sync_service - INFO - Found 1 price changes for store international
2025-09-02 19:27:42,064 - sync_service - INFO - Processing 1 price changes for store international
2025-09-02 19:27:42,065 - sync_service - INFO - Processing product price change for FG-0000715 using SAP variant ID: gid://shopify/ProductVariant/42244618616922
2025-09-02 19:27:42,342 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:27:42,343 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42244618616922', 'variants': [{'id': 'gid://shopify/ProductVariant/42244618616922', 'price': '240.0', 'compareAtPrice': '300.0'}]}}, 'response': None, 'status': None}
2025-09-02 19:27:42,887 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-02 19:27:43,161 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-02 19:27:43,163 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42244618616922 price to 240.0, sale price to 300.0 in store international
2025-09-02 19:27:43,466 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-02 19:27:43,468 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000715-international: 240.0 (Shopify update was successful)
2025-09-02 19:27:43,469 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000715 (price: 240.0)
2025-09-02 19:27:43,973 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 3, 'success_count': 3, 'error_count': 0, 'details': None}
2025-09-02 19:27:43,975 - sync_service - INFO - Price changes sync completed: 3 processed, 3 successful, 0 errors
2025-09-10 12:05:26,677 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 12:05:26,678 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 12:05:26,709 - sync_service - INFO - Starting all syncs...
2025-09-10 12:05:26,710 - sync_service - INFO - Starting new items sync...
2025-09-10 12:05:26,711 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-10 12:05:26,711 - sync_service - INFO - Fetching new items for store: local
2025-09-10 12:05:28,308 - sync_service - INFO - SAP login successful
2025-09-10 12:05:31,013 - sync_service - INFO - SAP logging client login successful
2025-09-10 12:05:32,204 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-10 12:05:32,205 - sync_service - INFO - Product group: ('Iron Man Necklace', 'local') has 2 items
2025-09-10 12:05:32,206 - sync_service - INFO - Grouped 2 items into 1 product groups for store local
2025-09-10 12:05:32,207 - sync_service - INFO - Processing product group: ('Iron Man Necklace', 'local') with 2 items for store local
2025-09-10 12:05:32,207 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProductByHandle($handle: String!) {\n            productByHandle(handle: $handle) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'handle': 'iron-man-necklace'}}, 'response': None, 'status': None}
2025-09-10 12:05:42,216 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 12:05:43,574 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:05:43,575 - sync_service - INFO - Product Iron Man Necklace doesn't exist in store local, creating new product
2025-09-10 12:05:43,575 - sync_service - INFO - Step 1: Creating product with options in store local
2025-09-10 12:05:43,575 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productCreate($input: ProductInput!) {\n            productCreate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    options {\n                        id\n                        name\n                        position\n                        optionValues {\n                            id\n                            name\n                            hasVariants\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'title': 'Iron Man Necklace', 'descriptionHtml': 'Iron Man Necklace', 'vendor': '', 'productType': 'Default', 'status': 'DRAFT', 'tags': [], 'productOptions': [{'name': 'Color', 'values': [{'name': 'Blue'}, {'name': 'Red'}]}], 'seo': {'title': 'Iron Man Necklace', 'description': 'Iron Man Necklace'}}}}, 'response': None, 'status': None}
2025-09-10 12:05:44,441 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productCreate': {'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT', 'options': [{'id': 'gid://shopify/ProductOption/9801604268098', 'name': 'Color', 'position': 1, 'optionValues': [{'id': 'gid://shopify/ProductOptionValue/3902546608194', 'name': 'Blue', 'hasVariants': True}, {'id': 'gid://shopify/ProductOptionValue/3902546640962', 'name': 'Red', 'hasVariants': False}]}]}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:05:44,442 - sync_service - INFO - Step 2: Creating variants in bulk for store local
2025-09-10 12:05:44,443 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkCreate(productId: $productId, variants: $variants, strategy: REMOVE_STANDALONE_VARIANT) {\n                productVariants {\n                    id\n                    title\n                    sku\n                    price\n                    selectedOptions {\n                        name\n                        value\n                    }\n                    inventoryItem {\n                        id\n                        sku\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/7542966190146', 'variants': [{'price': '6000.0', 'taxable': False, 'optionValues': [{'name': 'Red', 'optionId': 'gid://shopify/ProductOption/9801604268098'}], 'inventoryItem': {'sku': 'FG-0000713', 'tracked': True}, 'compareAtPrice': '6000.0', 'barcode': '203090'}, {'price': '10.0', 'taxable': False, 'optionValues': [{'name': 'Blue', 'optionId': 'gid://shopify/ProductOption/9801604268098'}], 'inventoryItem': {'sku': 'FG-0000714', 'tracked': True}, 'compareAtPrice': '8.5', 'barcode': '203090'}]}}, 'response': None, 'status': None}
2025-09-10 12:05:45,652 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkCreate': {'productVariants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'title': 'Red', 'sku': 'FG-0000713', 'price': '6000.00', 'selectedOptions': [{'name': 'Color', 'value': 'Red'}], 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425932354', 'sku': 'FG-0000713'}}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'title': 'Blue', 'sku': 'FG-0000714', 'price': '10.00', 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}], 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425965122', 'sku': 'FG-0000714'}}], 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:05:45,653 - sync_service - INFO - Successfully created product with 2 variants in store local
2025-09-10 12:05:45,654 - sync_service - INFO - Successfully created product in store local
2025-09-10 12:05:52,305 - sync_service - INFO - Fetching new items for store: international
2025-09-10 12:05:53,996 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-10 12:05:53,997 - sync_service - INFO - Product group: ('Iron Man Necklace', 'international') has 2 items
2025-09-10 12:05:53,998 - sync_service - INFO - Grouped 2 items into 1 product groups for store international
2025-09-10 12:05:53,999 - sync_service - INFO - Processing product group: ('Iron Man Necklace', 'international') with 2 items for store international
2025-09-10 12:05:54,000 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        query GetProductByHandle($handle: String!) {\n            productByHandle(handle: $handle) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'handle': 'iron-man-necklace'}}, 'response': None, 'status': None}
2025-09-10 12:06:03,993 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-10 12:06:04,941 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-10 12:06:04,941 - sync_service - INFO - Product Iron Man Necklace doesn't exist in store international, creating new product
2025-09-10 12:06:04,942 - sync_service - INFO - Step 1: Creating product with options in store international
2025-09-10 12:06:04,942 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productCreate($input: ProductInput!) {\n            productCreate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    options {\n                        id\n                        name\n                        position\n                        optionValues {\n                            id\n                            name\n                            hasVariants\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'title': 'Iron Man Necklace', 'descriptionHtml': 'Iron Man Necklace', 'vendor': '', 'productType': 'Default', 'status': 'DRAFT', 'tags': [], 'productOptions': [{'name': 'Color', 'values': [{'name': 'Blue'}, {'name': 'Red'}]}], 'seo': {'title': 'Iron Man Necklace', 'description': 'Iron Man Necklace'}}}}, 'response': None, 'status': None}
2025-09-10 12:06:05,895 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productCreate': {'product': {'id': 'gid://shopify/Product/7582947377242', 'title': 'Iron Man Necklace', 'status': 'DRAFT', 'options': [{'id': 'gid://shopify/ProductOption/9637825675354', 'name': 'Color', 'position': 1, 'optionValues': [{'id': 'gid://shopify/ProductOptionValue/3037613981786', 'name': 'Blue', 'hasVariants': True}, {'id': 'gid://shopify/ProductOptionValue/3037614014554', 'name': 'Red', 'hasVariants': False}]}]}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:06:05,897 - sync_service - INFO - Step 2: Creating variants in bulk for store international
2025-09-10 12:06:05,898 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkCreate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkCreate(productId: $productId, variants: $variants, strategy: REMOVE_STANDALONE_VARIANT) {\n                productVariants {\n                    id\n                    title\n                    sku\n                    price\n                    selectedOptions {\n                        name\n                        value\n                    }\n                    inventoryItem {\n                        id\n                        sku\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/7582947377242', 'variants': [{'price': '0.0', 'taxable': False, 'optionValues': [{'name': 'Red', 'optionId': 'gid://shopify/ProductOption/9637825675354'}], 'inventoryItem': {'sku': 'FG-0000713', 'tracked': True}, 'barcode': '203090'}, {'price': '0.0', 'taxable': False, 'optionValues': [{'name': 'Blue', 'optionId': 'gid://shopify/ProductOption/9637825675354'}], 'inventoryItem': {'sku': 'FG-0000714', 'tracked': True}, 'barcode': '203090'}]}}, 'response': None, 'status': None}
2025-09-10 12:06:06,862 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkCreate': {'productVariants': [{'id': 'gid://shopify/ProductVariant/42279168573530', 'title': 'Red', 'sku': 'FG-0000713', 'price': '0.00', 'selectedOptions': [{'name': 'Color', 'value': 'Red'}], 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44376531664986', 'sku': 'FG-0000713'}}, {'id': 'gid://shopify/ProductVariant/42279168606298', 'title': 'Blue', 'sku': 'FG-0000714', 'price': '0.00', 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}], 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44376531697754', 'sku': 'FG-0000714'}}], 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:06:06,864 - sync_service - INFO - Successfully created product with 2 variants in store international
2025-09-10 12:06:06,864 - sync_service - INFO - Successfully created product in store international
2025-09-10 12:06:11,248 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 2, 'success_count': 2, 'error_count': 0, 'details': None}
2025-09-10 12:06:11,250 - sync_service - INFO - Multi-store new items sync completed: 2 processed, 2 successful, 0 errors
2025-09-10 12:06:11,252 - sync_service - INFO - Starting stock change sync...
2025-09-10 12:06:11,252 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-10 12:06:11,253 - sync_service - INFO - Processing inventory changes for store: local
2025-09-10 12:06:13,630 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-10 12:06:13,631 - sync_service - INFO - Processing 2 inventory changes for store local
2025-09-10 12:06:13,631 - sync_service - INFO - Updating inventory for item FG-0000713 (variant 44545425932354) at location 68605345858
2025-09-10 12:06:13,632 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425932354', 'available': 155}, 'response': None, 'status': None}
2025-09-10 12:06:25,260 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425932354, 'location_id': 68605345858, 'available': 155, 'updated_at': '2025-09-10T12:06:25+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425932354'}}, 'status': 'success'}
2025-09-10 12:06:25,987 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-10 12:06:26,094 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44545425965122) at location 68605345858
2025-09-10 12:06:26,095 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425965122', 'available': 115}, 'response': None, 'status': None}
2025-09-10 12:06:26,689 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425965122, 'location_id': 68605345858, 'available': 115, 'updated_at': '2025-09-10T12:06:27+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425965122'}}, 'status': 'success'}
2025-09-10 12:06:27,428 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-10 12:06:27,536 - sync_service - INFO - Processing inventory changes for store: international
2025-09-10 12:06:29,222 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-10 12:06:29,223 - sync_service - INFO - Processing 2 inventory changes for store international
2025-09-10 12:06:29,223 - sync_service - INFO - Updating inventory for item FG-0000713 (variant 44376531664986) at location 73474179162
2025-09-10 12:06:29,224 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531664986', 'available': 155}, 'response': None, 'status': None}
2025-09-10 12:06:29,721 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531664986, 'location_id': 73474179162, 'available': 155, 'updated_at': '2025-09-10T12:06:30+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531664986'}}, 'status': 'success'}
2025-09-10 12:06:30,798 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-10 12:06:30,909 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44376531697754) at location 73474179162
2025-09-10 12:06:30,910 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531697754', 'available': 115}, 'response': None, 'status': None}
2025-09-10 12:06:31,591 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531697754, 'location_id': 73474179162, 'available': 115, 'updated_at': '2025-09-10T12:06:32+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531697754'}}, 'status': 'success'}
2025-09-10 12:06:32,660 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-10 12:06:32,768 - sync_service - INFO - Stock change sync completed: 4 processed, 4 successful, 0 errors
2025-09-10 12:06:32,769 - sync_service - INFO - Starting item changes sync...
2025-09-10 12:06:32,769 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-10 12:06:32,770 - sync_service - INFO - Processing item changes for store: local
2025-09-10 12:06:33,704 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-10 12:06:33,706 - sync_service - INFO - Found 5 item changes for store local
2025-09-10 12:06:33,706 - sync_service - INFO - Processing 5 item changes for store local
2025-09-10 12:06:33,707 - sync_service - INFO - Processing variant change for FG-0000715 (variant ID: gid://shopify/ProductVariant/42387257458754)
2025-09-10 12:06:33,707 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-10 12:06:34,212 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-10 12:06:34,214 - sync_service - INFO - Test mode enabled: Keeping product gid://shopify/Product/7527948386370 as DRAFT regardless of SAP status
2025-09-10 12:06:34,478 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:34,480 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    vendor\n                    descriptionHtml\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'status': 'DRAFT', 'title': 'MM Watch', 'id': 'gid://shopify/Product/7527948386370'}}}, 'response': None, 'status': None}
2025-09-10 12:06:35,037 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productUpdate': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT', 'vendor': 'JUDE BENHALIM', 'descriptionHtml': 'MM Watch'}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:06:35,322 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:35,322 - sync_service - INFO - Successfully updated product gid://shopify/Product/7527948386370 comprehensively in store local
2025-09-10 12:06:35,604 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:35,605 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257458754'}}, 'response': None, 'status': None}
2025-09-10 12:06:36,871 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-10 12:06:36,872 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-10 12:06:37,376 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-10 12:06:37,383 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                title\n                                sku\n                                barcode\n                                compareAtPrice\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': '', 'barcode': ''}]}}}, 'response': None, 'status': None}
2025-09-10 12:06:37,845 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': '', 'barcode': ''}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42387257458754",
            "sku": "FG-0000715",
            "price": "5000.00",
            "title": "Blue",
            "barcode": "203090"
          },
          {
            "id": "gid://shopify/ProductVariant/42387257491522",
            "sku": "FG-0000716",
            "price": "5000.00",
            "title": "",
            "barcode": ""
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:38,114 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:38,383 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:38,383 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42387257458754 comprehensively in store local: GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': 'Blue', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': '', 'barcode': ''}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42387257458754",
            "sku": "FG-0000715",
            "price": "5000.00",
            "title": "Blue",
            "barcode": "203090"
          },
          {
            "id": "gid://shopify/ProductVariant/42387257491522",
            "sku": "FG-0000716",
            "price": "5000.00",
            "title": "",
            "barcode": ""
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:38,924 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE('FG-0000715') - failure
2025-09-10 12:06:39,461 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE - success
2025-09-10 12:06:39,463 - sync_service - INFO - Successfully created item change record for FG-0000715
2025-09-10 12:06:39,463 - sync_service - INFO - Successfully processed item change for FG-0000715
2025-09-10 12:06:39,967 - sync_service - INFO - Processing variant change for FG-0000716 (variant ID: gid://shopify/ProductVariant/42387257491522)
2025-09-10 12:06:39,969 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257491522'}}, 'response': None, 'status': None}
2025-09-10 12:06:40,460 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}, 'status': 'success'}
2025-09-10 12:06:40,461 - sync_service - INFO - Test mode enabled: Keeping product gid://shopify/Product/7527948386370 as DRAFT regardless of SAP status
2025-09-10 12:06:40,726 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:40,727 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    vendor\n                    descriptionHtml\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'status': 'DRAFT', 'title': 'MM Watch', 'id': 'gid://shopify/Product/7527948386370'}}}, 'response': None, 'status': None}
2025-09-10 12:06:41,319 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productUpdate': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT', 'vendor': 'JUDE BENHALIM', 'descriptionHtml': 'MM Watch'}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:06:41,587 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:41,588 - sync_service - INFO - Successfully updated product gid://shopify/Product/7527948386370 comprehensively in store local
2025-09-10 12:06:41,852 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:41,853 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42387257491522'}}, 'response': None, 'status': None}
2025-09-10 12:06:48,407 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}, 'status': 'success'}
2025-09-10 12:06:48,408 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7527948386370'}}, 'response': None, 'status': None}
2025-09-10 12:06:48,902 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7527948386370', 'title': 'MM Watch', 'handle': 'mm-watch', 'description': 'MM Watch', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837089858'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44487837122626'}, 'selectedOptions': [{'name': 'Color', 'value': 'Yellow'}]}}]}}}, 'status': 'success'}
2025-09-10 12:06:48,904 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                title\n                                sku\n                                barcode\n                                compareAtPrice\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow', 'barcode': '203090'}]}}}, 'response': None, 'status': None}
2025-09-10 12:06:49,398 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42387257458754",
            "sku": "FG-0000715",
            "price": "5000.00",
            "title": "",
            "barcode": ""
          },
          {
            "id": "gid://shopify/ProductVariant/42387257491522",
            "sku": "FG-0000716",
            "price": "5000.00",
            "title": "Yellow",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:49,691 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:49,955 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:49,956 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42387257491522 comprehensively in store local: GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7527948386370', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'sku': 'FG-0000715', 'price': '5000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42387257491522', 'sku': 'FG-0000716', 'price': '5000.00', 'title': 'Yellow', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7527948386370",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42387257458754",
            "sku": "FG-0000715",
            "price": "5000.00",
            "title": "",
            "barcode": ""
          },
          {
            "id": "gid://shopify/ProductVariant/42387257491522",
            "sku": "FG-0000716",
            "price": "5000.00",
            "title": "Yellow",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:50,514 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE('FG-0000716') - failure
2025-09-10 12:06:51,072 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE - success
2025-09-10 12:06:51,073 - sync_service - INFO - Successfully created item change record for FG-0000716
2025-09-10 12:06:51,074 - sync_service - INFO - Successfully processed item change for FG-0000716
2025-09-10 12:06:51,585 - sync_service - INFO - Processing product change for FG-0000717 (product ID: gid://shopify/Product/7539303645250)
2025-09-10 12:06:51,586 - sync_service - INFO - Test mode enabled: Keeping product gid://shopify/Product/7539303645250 as DRAFT regardless of SAP status
2025-09-10 12:06:51,856 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:51,857 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    vendor\n                    descriptionHtml\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'status': 'DRAFT', 'title': 'MM Whoop', 'id': 'gid://shopify/Product/7539303645250'}}}, 'response': None, 'status': None}
2025-09-10 12:06:52,819 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productUpdate': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'status': 'DRAFT', 'vendor': 'JUDE BENHALIM', 'descriptionHtml': 'MM Whoop'}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:06:53,084 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:53,085 - sync_service - INFO - Successfully updated product gid://shopify/Product/7539303645250 comprehensively in store local
2025-09-10 12:06:53,354 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:53,355 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42428545040450'}}, 'response': None, 'status': None}
2025-09-10 12:06:53,897 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '4500.00', 'compareAtPrice': '5000.00', 'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}, 'status': 'success'}
2025-09-10 12:06:53,898 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7539303645250'}}, 'response': None, 'status': None}
2025-09-10 12:06:54,384 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7539303645250', 'title': 'MM Whoop', 'handle': 'mm-whoop-1', 'description': 'MM Whoop', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '4500.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44529379573826'}, 'selectedOptions': [{'name': 'Title', 'value': 'Default Title'}]}}]}}}, 'status': 'success'}
2025-09-10 12:06:54,385 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                title\n                                sku\n                                barcode\n                                compareAtPrice\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/Product/7539303645250', 'variants': [{'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '4500.00', 'title': '', 'barcode': '203090'}]}}}, 'response': None, 'status': None}
2025-09-10 12:06:54,876 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7539303645250', 'variants': [{'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '4500.00', 'title': '', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7539303645250",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42428545040450",
            "sku": "FG-0000717",
            "price": "4500.00",
            "title": "",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:55,145 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:55,409 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:06:55,410 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42428545040450 comprehensively in store local: GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7539303645250', 'variants': [{'id': 'gid://shopify/ProductVariant/42428545040450', 'sku': 'FG-0000717', 'price': '4500.00', 'title': '', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7539303645250",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42428545040450",
            "sku": "FG-0000717",
            "price": "4500.00",
            "title": "",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:06:55,949 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE('FG-0000717') - success
2025-09-10 12:06:55,951 - sync_service - INFO - Successfully updated item change record for FG-0000717
2025-09-10 12:06:55,951 - sync_service - INFO - Successfully processed item change for FG-0000717
2025-09-10 12:06:56,457 - sync_service - INFO - Processing variant change for FG-0000713 (variant ID: gid://shopify/ProductVariant/42444515803202)
2025-09-10 12:06:56,459 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42444515803202'}}, 'response': None, 'status': None}
2025-09-10 12:06:56,942 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'compareAtPrice': '6000.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Red'}]}}, 'status': 'success'}
2025-09-10 12:06:56,943 - sync_service - INFO - Test mode enabled: Keeping product gid://shopify/Product/7542966190146 as DRAFT regardless of SAP status
2025-09-10 12:06:57,649 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:06:57,650 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    vendor\n                    descriptionHtml\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'status': 'DRAFT', 'title': 'Iron Man Necklace', 'id': 'gid://shopify/Product/7542966190146'}}}, 'response': None, 'status': None}
2025-09-10 12:07:00,118 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productUpdate': {'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT', 'vendor': 'JUDE BENHALIM', 'descriptionHtml': 'Iron Man Necklace'}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:07:00,387 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:00,388 - sync_service - INFO - Successfully updated product gid://shopify/Product/7542966190146 comprehensively in store local
2025-09-10 12:07:00,658 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:00,659 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42444515803202'}}, 'response': None, 'status': None}
2025-09-10 12:07:01,154 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'compareAtPrice': '6000.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Red'}]}}, 'status': 'success'}
2025-09-10 12:07:01,156 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7542966190146'}}, 'response': None, 'status': None}
2025-09-10 12:07:01,639 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'handle': 'iron-man-necklace-1', 'description': 'Iron Man Necklace', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425932354'}, 'selectedOptions': [{'name': 'Color', 'value': 'Red'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425965122'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}]}}}, 'status': 'success'}
2025-09-10 12:07:01,640 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                title\n                                sku\n                                barcode\n                                compareAtPrice\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': 'Red', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': '', 'barcode': ''}]}}}, 'response': None, 'status': None}
2025-09-10 12:07:02,078 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': 'Red', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': '', 'barcode': ''}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7542966190146",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42444515803202",
            "sku": "FG-0000713",
            "price": "6000.00",
            "title": "Red",
            "barcode": "203090"
          },
          {
            "id": "gid://shopify/ProductVariant/42444515835970",
            "sku": "FG-0000714",
            "price": "10.00",
            "title": "",
            "barcode": ""
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:07:02,345 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:07:02,609 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:07:02,610 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42444515803202 comprehensively in store local: GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': 'Red', 'barcode': '203090'}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': '', 'barcode': ''}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7542966190146",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42444515803202",
            "sku": "FG-0000713",
            "price": "6000.00",
            "title": "Red",
            "barcode": "203090"
          },
          {
            "id": "gid://shopify/ProductVariant/42444515835970",
            "sku": "FG-0000714",
            "price": "10.00",
            "title": "",
            "barcode": ""
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:07:03,147 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE('FG-0000713') - success
2025-09-10 12:07:03,148 - sync_service - INFO - Successfully updated item change record for FG-0000713
2025-09-10 12:07:03,149 - sync_service - INFO - Successfully processed item change for FG-0000713
2025-09-10 12:07:03,662 - sync_service - INFO - Processing variant change for FG-0000714 (variant ID: gid://shopify/ProductVariant/42444515835970)
2025-09-10 12:07:03,663 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42444515835970'}}, 'response': None, 'status': None}
2025-09-10 12:07:04,173 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'compareAtPrice': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-10 12:07:04,174 - sync_service - INFO - Test mode enabled: Keeping product gid://shopify/Product/7542966190146 as DRAFT regardless of SAP status
2025-09-10 12:07:04,443 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:04,445 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    vendor\n                    descriptionHtml\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'status': 'DRAFT', 'title': 'Iron Man Necklace', 'id': 'gid://shopify/Product/7542966190146'}}}, 'response': None, 'status': None}
2025-09-10 12:07:04,999 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productUpdate': {'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT', 'vendor': 'JUDE BENHALIM', 'descriptionHtml': 'Iron Man Necklace'}, 'userErrors': []}}, 'status': 'success'}
2025-09-10 12:07:05,266 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:05,267 - sync_service - INFO - Successfully updated product gid://shopify/Product/7542966190146 comprehensively in store local
2025-09-10 12:07:05,535 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:05,536 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetVariant($id: ID!) {\n            productVariant(id: $id) {\n                id\n                sku\n                price\n                compareAtPrice\n                product {\n                    id\n                    title\n                    status\n                }\n                selectedOptions {\n                    name\n                    value\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/ProductVariant/42444515835970'}}, 'response': None, 'status': None}
2025-09-10 12:07:12,254 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'compareAtPrice': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'status': 'DRAFT'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}, 'status': 'success'}
2025-09-10 12:07:12,254 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query GetProduct($id: ID!) {\n            product(id: $id) {\n                id\n                title\n                handle\n                description\n                variants(first: 50) {\n                    edges {\n                        node {\n                            id\n                            sku\n                            price\n                            inventoryItem {\n                                id\n                            }\n                            selectedOptions {\n                                name\n                                value\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Product/7542966190146'}}, 'response': None, 'status': None}
2025-09-10 12:07:12,795 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace', 'handle': 'iron-man-necklace-1', 'description': 'Iron Man Necklace', 'variants': {'edges': [{'node': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425932354'}, 'selectedOptions': [{'name': 'Color', 'value': 'Red'}]}}, {'node': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'inventoryItem': {'id': 'gid://shopify/InventoryItem/44545425965122'}, 'selectedOptions': [{'name': 'Color', 'value': 'Blue'}]}}]}}}, 'status': 'success'}
2025-09-10 12:07:12,795 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productUpdate($input: ProductInput!) {\n            productUpdate(input: $input) {\n                product {\n                    id\n                    title\n                    status\n                    variants(first: 50) {\n                        edges {\n                            node {\n                                id\n                                title\n                                sku\n                                barcode\n                                compareAtPrice\n                                selectedOptions {\n                                    name\n                                    value\n                                }\n                            }\n                        }\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'input': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': 'Blue', 'barcode': '203090'}]}}}, 'response': None, 'status': None}
2025-09-10 12:07:13,253 - sync_service - ERROR - GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': 'Blue', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7542966190146",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42444515803202",
            "sku": "FG-0000713",
            "price": "6000.00",
            "title": "",
            "barcode": ""
          },
          {
            "id": "gid://shopify/ProductVariant/42444515835970",
            "sku": "FG-0000714",
            "price": "10.00",
            "title": "Blue",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:07:13,532 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:07:13,818 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:07:13,819 - sync_service - ERROR - Failed to update variant gid://shopify/ProductVariant/42444515835970 comprehensively in store local: GraphQL query error for store local: {'message': 'Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)', 'locations': [{'line': 1, 'column': 24}], 'extensions': {'value': {'id': 'gid://shopify/Product/7542966190146', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'title': '', 'barcode': ''}, {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '10.00', 'title': 'Blue', 'barcode': '203090'}]}, 'problems': [{'path': ['variants'], 'explanation': 'Field is not defined on ProductInput'}]}}
GraphQL Errors: [
  {
    "message": "Variable $input of type ProductInput! was provided invalid value for variants (Field is not defined on ProductInput)",
    "locations": [
      {
        "line": 1,
        "column": 24
      }
    ],
    "extensions": {
      "value": {
        "id": "gid://shopify/Product/7542966190146",
        "variants": [
          {
            "id": "gid://shopify/ProductVariant/42444515803202",
            "sku": "FG-0000713",
            "price": "6000.00",
            "title": "",
            "barcode": ""
          },
          {
            "id": "gid://shopify/ProductVariant/42444515835970",
            "sku": "FG-0000714",
            "price": "10.00",
            "title": "Blue",
            "barcode": "203090"
          }
        ]
      },
      "problems": [
        {
          "path": [
            "variants"
          ],
          "explanation": "Field is not defined on ProductInput"
        }
      ]
    }
  }
]
2025-09-10 12:07:14,793 - sync_service - INFO - API log added to SAP: sap - U_ITEM_CHANGE('FG-0000714') - success
2025-09-10 12:07:14,794 - sync_service - INFO - Successfully updated item change record for FG-0000714
2025-09-10 12:07:14,795 - sync_service - INFO - Successfully processed item change for FG-0000714
2025-09-10 12:07:15,300 - sync_service - INFO - Processing item changes for store: international
2025-09-10 12:07:15,876 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-10 12:07:15,877 - sync_service - INFO - Found 0 item changes for store international
2025-09-10 12:07:15,878 - sync_service - INFO - No item changes found for store international
2025-09-10 12:07:15,879 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 5, 'success_count': 5, 'error_count': 0, 'details': None}
2025-09-10 12:07:15,880 - sync_service - INFO - Item changes sync completed: 5 processed, 5 successful, 0 errors
2025-09-10 12:07:15,880 - sync_service - INFO - Starting price changes sync...
2025-09-10 12:07:15,881 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-10 12:07:15,882 - sync_service - INFO - Processing price changes for store: local
2025-09-10 12:07:16,469 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-10 12:07:16,471 - sync_service - INFO - Found 5 price changes for store local
2025-09-10 12:07:16,472 - sync_service - INFO - Processing 5 price changes for store local
2025-09-10 12:07:16,472 - sync_service - INFO - Processing product price change for FG-0000715 using SAP variant ID: gid://shopify/ProductVariant/42387257458754
2025-09-10 12:07:16,739 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:16,740 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42387257458754', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257458754', 'price': '20.0', 'compareAtPrice': '20.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:23,794 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:24,392 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:24,422 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42387257458754 price to 20.0, sale price to 20.0 in store local
2025-09-10 12:07:26,069 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:26,415 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000715-local: 20.0 (Shopify update was successful)
2025-09-10 12:07:26,689 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000715 (price: 20.0)
2025-09-10 12:07:28,161 - sync_service - INFO - Processing product price change for FG-0000716 using SAP variant ID: gid://shopify/ProductVariant/42387257491522
2025-09-10 12:07:28,740 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:28,745 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42387257491522', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257491522', 'price': '5000.0', 'compareAtPrice': '5000.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:38,770 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 12:07:39,099 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 12:07:39,102 - sync_service - WARNING - Attempt 1 failed for variant gid://shopify/ProductVariant/42387257491522: GraphQL query error for store local: 
2025-09-10 12:07:39,103 - sync_service - INFO - Retrying in 1.0 seconds...
2025-09-10 12:07:40,376 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:40,378 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42387257491522', 'variants': [{'id': 'gid://shopify/ProductVariant/42387257491522', 'price': '5000.0', 'compareAtPrice': '5000.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:41,111 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:41,467 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:41,468 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42387257491522 price to 5000.0, sale price to 5000.0 in store local
2025-09-10 12:07:41,753 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:41,756 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000716-local: 5000.0 (Shopify update was successful)
2025-09-10 12:07:41,758 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000716 (price: 5000.0)
2025-09-10 12:07:42,266 - sync_service - INFO - Processing product price change for FG-0000717 using SAP variant ID: gid://shopify/ProductVariant/42428545040450
2025-09-10 12:07:42,561 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:42,562 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42428545040450', 'variants': [{'id': 'gid://shopify/ProductVariant/42428545040450', 'price': '5000.0', 'compareAtPrice': '5000.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:43,011 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:43,272 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:43,273 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42428545040450 price to 5000.0, sale price to 5000.0 in store local
2025-09-10 12:07:43,564 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:43,565 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000717-local: 5000.0 (Shopify update was successful)
2025-09-10 12:07:43,566 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000717 (price: 5000.0)
2025-09-10 12:07:44,089 - sync_service - INFO - Processing product price change for FG-0000713 using SAP variant ID: gid://shopify/ProductVariant/42444515803202
2025-09-10 12:07:44,368 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:44,371 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42444515803202', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515803202', 'price': '6000.0', 'compareAtPrice': '6000.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:44,826 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:45,449 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:45,464 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42444515803202 price to 6000.0, sale price to 6000.0 in store local
2025-09-10 12:07:45,767 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:45,767 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000713-local: 6000.0 (Shopify update was successful)
2025-09-10 12:07:45,769 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000713 (price: 6000.0)
2025-09-10 12:07:46,274 - sync_service - INFO - Processing product price change for FG-0000714 using SAP variant ID: gid://shopify/ProductVariant/42444515835970
2025-09-10 12:07:46,540 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:46,541 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42444515835970', 'variants': [{'id': 'gid://shopify/ProductVariant/42444515835970', 'price': '8.5', 'compareAtPrice': '10.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:51,951 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:52,214 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - success
2025-09-10 12:07:52,215 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42444515835970 price to 8.5, sale price to 10.0 in store local
2025-09-10 12:07:52,480 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:52,481 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000714-local: 8.5 (Shopify update was successful)
2025-09-10 12:07:52,482 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000714 (price: 8.5)
2025-09-10 12:07:52,995 - sync_service - INFO - Processing price changes for store: international
2025-09-10 12:07:53,603 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-10 12:07:53,606 - sync_service - INFO - Found 5 price changes for store international
2025-09-10 12:07:53,607 - sync_service - INFO - Processing 5 price changes for store international
2025-09-10 12:07:53,607 - sync_service - INFO - Processing product price change for FG-0000713 using SAP variant ID: gid://shopify/ProductVariant/42279168573530
2025-09-10 12:07:53,868 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:07:53,869 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42279168573530', 'variants': [{'id': 'gid://shopify/ProductVariant/42279168573530', 'price': '0.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:54,295 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:54,559 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:07:54,559 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42279168573530 price to 0.0, sale price to 0.0 in store international
2025-09-10 12:07:54,820 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:54,821 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000713-international: 0.0 (Shopify update was successful)
2025-09-10 12:07:54,822 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000713 (price: 0.0)
2025-09-10 12:07:55,328 - sync_service - INFO - Processing product price change for FG-0000715 using SAP variant ID: gid://shopify/ProductVariant/42244618616922
2025-09-10 12:07:55,587 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:07:55,588 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42244618616922', 'variants': [{'id': 'gid://shopify/ProductVariant/42244618616922', 'price': '300.0', 'compareAtPrice': '300.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:07:56,038 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:07:56,329 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:07:56,329 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42244618616922 price to 300.0, sale price to 300.0 in store international
2025-09-10 12:07:56,594 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:07:56,595 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000715-international: 300.0 (Shopify update was successful)
2025-09-10 12:07:56,596 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000715 (price: 300.0)
2025-09-10 12:07:57,096 - sync_service - INFO - Processing product price change for FG-0000716 using SAP variant ID: gid://shopify/ProductVariant/42244618649690
2025-09-10 12:07:57,378 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:07:57,379 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42244618649690', 'variants': [{'id': 'gid://shopify/ProductVariant/42244618649690', 'price': '300.0', 'compareAtPrice': '300.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:08:05,367 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:08:05,629 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:05,630 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42244618649690 price to 300.0, sale price to 300.0 in store international
2025-09-10 12:08:05,920 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:08:05,921 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000716-international: 300.0 (Shopify update was successful)
2025-09-10 12:08:05,921 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000716 (price: 300.0)
2025-09-10 12:08:06,427 - sync_service - INFO - Processing product price change for FG-0000717 using SAP variant ID: gid://shopify/ProductVariant/42244570579034
2025-09-10 12:08:06,701 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:06,703 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42244570579034', 'variants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'price': '400.0', 'compareAtPrice': '400.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:08:16,714 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-10 12:08:17,000 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-10 12:08:17,001 - sync_service - WARNING - Attempt 1 failed for variant gid://shopify/ProductVariant/42244570579034: GraphQL query error for store international: 
2025-09-10 12:08:17,002 - sync_service - INFO - Retrying in 1.0 seconds...
2025-09-10 12:08:18,272 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:18,272 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42244570579034', 'variants': [{'id': 'gid://shopify/ProductVariant/42244570579034', 'price': '400.0', 'compareAtPrice': '400.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:08:18,720 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:08:18,982 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:18,983 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42244570579034 price to 400.0, sale price to 400.0 in store international
2025-09-10 12:08:19,246 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:08:19,247 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000717-international: 400.0 (Shopify update was successful)
2025-09-10 12:08:19,248 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000717 (price: 400.0)
2025-09-10 12:08:19,757 - sync_service - INFO - Processing product price change for FG-0000714 using SAP variant ID: gid://shopify/ProductVariant/42279168606298
2025-09-10 12:08:20,022 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:20,024 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n        mutation productVariantsBulkUpdate($productId: ID!, $variants: [ProductVariantsBulkInput!]!) {\n            productVariantsBulkUpdate(productId: $productId, variants: $variants) {\n                productVariants {\n                    id\n                    sku\n                    price\n                    compareAtPrice\n                    title\n                    selectedOptions {\n                        name\n                        value\n                    }\n                }\n                userErrors {\n                    field\n                    message\n                }\n            }\n        }\n        ', 'variables': {'productId': 'gid://shopify/Product/42279168606298', 'variants': [{'id': 'gid://shopify/ProductVariant/42279168606298', 'price': '0.0'}]}}, 'response': None, 'status': None}
2025-09-10 12:08:20,459 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'productVariantsBulkUpdate': {'productVariants': None, 'userErrors': [{'field': ['productId'], 'message': 'Product does not exist'}]}}, 'status': 'success'}
2025-09-10 12:08:20,724 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - success
2025-09-10 12:08:20,725 - sync_service - INFO - ‚úÖ Successfully updated variant gid://shopify/ProductVariant/42279168606298 price to 0.0, sale price to 0.0 in store international
2025-09-10 12:08:20,991 - sync_service - INFO - API log added to SAP: sap - price_change - success
2025-09-10 12:08:20,992 - sync_service - INFO - ‚úÖ Successfully logged price change to SAP for FG-0000714-international: 0.0 (Shopify update was successful)
2025-09-10 12:08:20,992 - sync_service - INFO - ‚úÖ Successfully processed price change for FG-0000714 (price: 0.0)
2025-09-10 12:08:21,497 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 10, 'success_count': 10, 'error_count': 0, 'details': None}
2025-09-10 12:08:21,500 - sync_service - INFO - Price changes sync completed: 10 processed, 10 successful, 0 errors
2025-09-10 20:37:13,181 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 20:37:13,185 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 20:37:13,379 - sync_service - INFO - Starting all syncs...
2025-09-10 20:37:13,383 - sync_service - INFO - Starting sales orders sync...
2025-09-10 20:37:13,385 - sync_service - INFO - Starting orders sync...
2025-09-10 20:37:13,391 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:37:13,393 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:37:23,450 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 20:37:24,398 - sync_service - INFO - SAP logging client login successful
2025-09-10 20:37:26,206 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 20:37:26,207 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 20:37:26,208 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 20:37:28,212 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:37:38,231 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 20:37:40,143 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 20:37:40,143 - sync_service - WARNING - GraphQL attempt 2/3 failed: GraphQL query error for store local: 
2025-09-10 20:37:40,144 - sync_service - INFO - Retrying in 4 seconds...
2025-09-10 20:37:44,159 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:37:45,622 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PENDING', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987999703106', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444699926594', 'sku': 'SR-0000072', 'price': '10.00', 'product': {'id': 'gid://shopify/Product/7491930062914', 'title': 'Gift Card'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6383774761026', 'name': '#1639', 'createdAt': '2025-09-10T12:10:12Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': [{'node': {'targetType': 'LINE_ITEM', 'allocationMethod': 'ACROSS', 'value': {'__typename': 'MoneyV2', 'amount': '6200.0', 'currencyCode': 'EGP'}, 'code': 'Test discount'}}]}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988200243266', 'name': 'Iron Man Necklace - Red', 'quantity': 1, 'sku': 'FG-0000713', 'originalUnitPriceSet': {'shopMoney': {'amount': '6000.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '6000.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '6000.0', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Test discount'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}, {'node': {'id': 'gid://shopify/LineItem/15988200276034', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '8.5', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Test discount'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163536601154', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T12:09:20Z', 'receiptJson': '{"payment_id":"rTvKRR4pZ7GkxvrU7JK6wgRVo"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzc0NzYxMDI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA2MjEyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 20:37:45,624 - sync_service - INFO - Retrieved 5 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 20:37:45,624 - sync_service - INFO - Processing 5 orders from store local
2025-09-10 20:37:45,625 - sync_service - INFO - Processing order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-10 20:37:45,625 - sync_service - INFO - Processing order: #1635 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 20:37:45,626 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 208.5
2025-09-10 20:37:45,627 - sync_service - INFO - üîë ONLINE PAYMENT ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-10 20:37:45,628 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-10 20:37:45,629 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-10 20:37:45,630 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-10 20:37:45,631 - sync_service - INFO - üìç SAP BILLING ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-10 20:37:46,621 - sync_service - INFO - SAP login successful
2025-09-10 20:37:48,440 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:37:50,290 - sync_service - INFO - Created customer in SAP: C0021070
2025-09-10 20:37:50,291 - sync_service - INFO - Using location-based costing codes for order #1635: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:37:50,292 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 20:37:55,443 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 20:37:55,448 - sync_service - INFO - Created invoice in SAP: 23147
2025-09-10 20:37:55,449 - sync_service - INFO - Order #1635 is paid - creating incoming payment in SAP
2025-09-10 20:37:55,451 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-10 20:37:58,934 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-10 20:37:58,938 - sync_service - INFO - Created incoming payment in SAP: 22342
2025-09-10 20:37:58,940 - sync_service - INFO - Successfully created incoming payment: 22342
2025-09-10 20:38:01,423 - sync_service - INFO - Added tag 'sap_payment_22342' to order gid://shopify/Order/6383666757698
2025-09-10 20:38:03,606 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383666757698
2025-09-10 20:38:12,774 - sync_service - INFO - Added tag 'sap_invoice_23147' to order gid://shopify/Order/6383666757698
2025-09-10 20:38:14,490 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383666757698
2025-09-10 20:38:14,491 - sync_service - INFO - Successfully processed order #1635
2025-09-10 20:38:14,492 - sync_service - INFO - ‚úÖ Processed order #1635 -> SAP Invoice: 23147
2025-09-10 20:38:14,492 - sync_service - INFO -    üîë Payment ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-10 20:38:14,493 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 208.5
2025-09-10 20:38:14,493 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Zayed
2025-09-10 20:38:14,494 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Zayed
2025-09-10 20:38:14,495 - sync_service - INFO - Processing order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-10 20:38:14,496 - sync_service - INFO - Processing order: #1636 | Payment: PENDING | Fulfillment: FULFILLED
2025-09-10 20:38:14,497 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-10 20:38:14,497 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-10 20:38:14,498 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-10 20:38:14,499 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-10 20:38:14,499 - sync_service - INFO - üìç SAP BILLING ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-10 20:38:14,500 - sync_service - INFO - Order #1636 is pending payment - will process anyway
2025-09-10 20:38:15,444 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:38:16,434 - sync_service - INFO - Created customer in SAP: C0021071
2025-09-10 20:38:16,435 - sync_service - INFO - Using location-based costing codes for order #1636: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:38:16,437 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 20:38:19,460 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 20:38:19,462 - sync_service - INFO - Created invoice in SAP: 23148
2025-09-10 20:38:19,463 - sync_service - INFO - Order #1636 is not paid (status: PENDING) - skipping payment creation
2025-09-10 20:38:26,679 - sync_service - INFO - Added tag 'sap_invoice_23148' to order gid://shopify/Order/6383668494402
2025-09-10 20:38:28,836 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383668494402
2025-09-10 20:38:29,603 - sync_service - INFO - Successfully processed order #1636
2025-09-10 20:38:30,092 - sync_service - INFO - ‚úÖ Processed order #1636 -> SAP Invoice: 23148
2025-09-10 20:38:31,285 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-10 20:38:31,305 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Nasr City
2025-09-10 20:38:31,436 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Nasr City
2025-09-10 20:38:31,533 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-10 20:38:32,138 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 20:38:32,189 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-10 20:38:32,281 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-10 20:38:32,540 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-10 20:38:32,541 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-10 20:38:33,458 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:38:33,935 - sync_service - INFO - Created customer in SAP: C0021072
2025-09-10 20:38:33,936 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:38:36,868 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-10 20:38:36,870 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 20:38:36,872 - sync_service - ERROR - Failed to process order #1637: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 20:38:49,651 - sync_service - INFO - Added tag 'sap_invoice_failed' to order gid://shopify/Order/6383762276418
2025-09-10 20:38:49,654 - sync_service - INFO - Added invoice failed tag to order #1637
2025-09-10 20:38:49,657 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 20:38:49,657 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-10 20:38:49,658 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-10 20:38:49,658 - sync_service - INFO - Payment Gateway: gift_card | Card Type: Unknown | Amount: 10.0
2025-09-10 20:38:49,659 - sync_service - INFO - üîë ONLINE PAYMENT ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 20:38:49,659 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 20:38:49,659 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 20:38:49,660 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 20:38:49,661 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 20:38:50,667 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:38:51,468 - sync_service - INFO - Created customer in SAP: C0021073
2025-09-10 20:38:51,471 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:38:51,473 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 20:38:53,508 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 20:38:53,509 - sync_service - INFO - Created invoice in SAP: 23149
2025-09-10 20:38:53,510 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-10 20:39:06,582 - sync_service - INFO - Added tag 'sap_invoice_23149' to order gid://shopify/Order/6383764930626
2025-09-10 20:39:08,301 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-10 20:39:08,305 - sync_service - INFO - Successfully processed order #1638
2025-09-10 20:39:08,306 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23149
2025-09-10 20:39:08,307 - sync_service - INFO -    üîë Payment ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 20:39:08,307 - sync_service - INFO -    üí≥ Gateway: gift_card | Amount: 10.0
2025-09-10 20:39:08,308 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-10 20:39:08,308 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-10 20:39:08,309 - sync_service - INFO - Processing order #1639 (ID: gid://shopify/Order/6383774761026)
2025-09-10 20:39:08,309 - sync_service - INFO - Processing order: #1639 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 20:39:08,310 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 200.0
2025-09-10 20:39:08,311 - sync_service - INFO - üîë ONLINE PAYMENT ID: rTvKRR4pZ7GkxvrU7JK6wgRVo
2025-09-10 20:39:08,312 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | zayedddd | Zayed, Giza | +201001234561
2025-09-10 20:39:08,313 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: zayedddd, Zayed, Giza
Egypt
2025-09-10 20:39:08,314 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | zayedddd | Zayed, Giza | +201001234561
2025-09-10 20:39:08,314 - sync_service - INFO - üìç SAP BILLING ADDRESS: zayedddd, Zayed, Giza
Egypt
2025-09-10 20:39:08,891 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:39:09,538 - sync_service - INFO - Created customer in SAP: C0021074
2025-09-10 20:39:09,540 - sync_service - INFO - Using location-based costing codes for order #1639: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:39:09,542 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 20:39:09,542 - sync_service - INFO - Added discount reason to invoice: Test discount
2025-09-10 20:39:11,803 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 20:39:11,806 - sync_service - INFO - Created invoice in SAP: 23150
2025-09-10 20:39:11,806 - sync_service - INFO - Order #1639 is paid - creating incoming payment in SAP
2025-09-10 20:39:11,807 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-10 20:39:13,251 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-10 20:39:13,255 - sync_service - INFO - Created incoming payment in SAP: 22343
2025-09-10 20:39:13,256 - sync_service - INFO - Successfully created incoming payment: 22343
2025-09-10 20:39:16,089 - sync_service - INFO - Added tag 'sap_payment_22343' to order gid://shopify/Order/6383774761026
2025-09-10 20:39:29,317 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383774761026
2025-09-10 20:39:31,252 - sync_service - INFO - Added tag 'sap_invoice_23150' to order gid://shopify/Order/6383774761026
2025-09-10 20:39:33,907 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383774761026
2025-09-10 20:39:33,913 - sync_service - INFO - Successfully processed order #1639
2025-09-10 20:39:33,915 - sync_service - INFO - ‚úÖ Processed order #1639 -> SAP Invoice: 23150
2025-09-10 20:39:33,916 - sync_service - INFO -    üîë Payment ID: rTvKRR4pZ7GkxvrU7JK6wgRVo
2025-09-10 20:39:33,917 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 200.0
2025-09-10 20:39:33,918 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Zayed
2025-09-10 20:39:33,920 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Zayed
2025-09-10 20:39:33,920 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:39:33,921 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:39:34,490 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 20:39:34,491 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 20:39:34,492 - sync_service - INFO - No orders to process for store international
2025-09-10 20:39:34,492 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 5, 'success_count': 4, 'error_count': 1, 'details': None}
2025-09-10 20:39:34,493 - sync_service - INFO - Orders sync completed. Processed: 5, Success: 4, Errors: 1
2025-09-10 20:40:33,711 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 20:40:33,711 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 20:40:33,743 - sync_service - INFO - Starting all syncs...
2025-09-10 20:40:33,745 - sync_service - INFO - Starting sales orders sync...
2025-09-10 20:40:33,746 - sync_service - INFO - Starting orders sync...
2025-09-10 20:40:33,748 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:40:33,752 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:40:34,416 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 20:40:34,417 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 20:40:34,420 - sync_service - INFO - No orders to process for store local
2025-09-10 20:40:34,422 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:40:34,423 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:40:44,442 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-10 20:40:45,576 - sync_service - INFO - SAP logging client login successful
2025-09-10 20:40:47,541 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-10 20:40:47,543 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-10 20:40:47,545 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 20:40:49,554 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:40:50,593 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6972344696922', 'name': '#1018', 'createdAt': '2025-09-10T13:05:52Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8209671618650', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19209839738970', 'name': 'Iron Man Necklace - Blue', 'quantity': 2, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42279168606298', 'sku': 'FG-0000714', 'price': '0.00', 'product': {'id': 'gid://shopify/Product/7582947377242', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9109902524506', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-09-10T13:04:50Z', 'receiptJson': '{"payment_id":"r4dteh0dcZO9oZGnVUrgZ5LLo"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTcyMzQ0Njk2OTIyLCJsYXN0X3ZhbHVlIjoxNzU3NTA5NTUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 20:40:50,595 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 20:40:50,597 - sync_service - INFO - Processing 1 orders from store international
2025-09-10 20:40:50,599 - sync_service - INFO - Processing order #1018 (ID: gid://shopify/Order/6972344696922)
2025-09-10 20:40:50,600 - sync_service - INFO - Processing order: #1018 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 20:40:50,601 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 1.0
2025-09-10 20:40:50,602 - sync_service - INFO - üîë ONLINE PAYMENT ID: r4dteh0dcZO9oZGnVUrgZ5LLo
2025-09-10 20:40:50,603 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-10 20:40:50,605 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-10 20:40:50,606 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-10 20:40:50,607 - sync_service - INFO - üìç SAP BILLING ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-10 20:40:51,653 - sync_service - INFO - SAP login successful
2025-09-10 20:40:52,865 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:40:53,854 - sync_service - INFO - Created customer in SAP: C0021075
2025-09-10 20:40:53,856 - sync_service - INFO - Using location-based costing codes for order #1018: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:40:53,857 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 1.0}
2025-09-10 20:40:55,698 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-10 20:40:55,701 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-10 20:40:55,703 - sync_service - ERROR - Failed to process order #1018: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-10 20:40:57,389 - sync_service - INFO - Added tag 'sap_invoice_failed' to order gid://shopify/Order/6972344696922
2025-09-10 20:40:57,391 - sync_service - INFO - Added invoice failed tag to order #1018
2025-09-10 20:40:57,392 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Update the exchange rate  , 'USD'"
      }
   }
}

2025-09-10 20:40:57,392 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-10 20:40:57,393 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-10 20:43:36,211 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 20:43:36,213 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 20:43:36,242 - sync_service - INFO - Starting all syncs...
2025-09-10 20:43:36,242 - sync_service - INFO - Starting sales orders sync...
2025-09-10 20:43:36,243 - sync_service - INFO - Starting orders sync...
2025-09-10 20:43:36,243 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:43:36,243 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:43:37,126 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 20:43:37,127 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 20:43:37,129 - sync_service - INFO - No orders to process for store local
2025-09-10 20:43:37,130 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 20:43:37,131 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 20:43:37,803 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6972344696922', 'name': '#1018', 'createdAt': '2025-09-10T13:05:52Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8209671618650', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19209839738970', 'name': 'Iron Man Necklace - Blue', 'quantity': 2, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42279168606298', 'sku': 'FG-0000714', 'price': '0.00', 'product': {'id': 'gid://shopify/Product/7582947377242', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9109902524506', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-09-10T13:04:50Z', 'receiptJson': '{"payment_id":"r4dteh0dcZO9oZGnVUrgZ5LLo"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTcyMzQ0Njk2OTIyLCJsYXN0X3ZhbHVlIjoxNzU3NTA5NTUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 20:43:37,805 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 20:43:37,806 - sync_service - INFO - Processing 1 orders from store international
2025-09-10 20:43:37,807 - sync_service - INFO - Processing order #1018 (ID: gid://shopify/Order/6972344696922)
2025-09-10 20:43:37,808 - sync_service - INFO - Processing order: #1018 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 20:43:37,808 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 1.0
2025-09-10 20:43:37,809 - sync_service - INFO - üîë ONLINE PAYMENT ID: r4dteh0dcZO9oZGnVUrgZ5LLo
2025-09-10 20:43:37,809 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-10 20:43:37,810 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-10 20:43:37,810 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-10 20:43:37,810 - sync_service - INFO - üìç SAP BILLING ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-10 20:43:39,259 - sync_service - INFO - SAP login successful
2025-09-10 20:43:40,233 - sync_service - INFO - Creating new customer in SAP
2025-09-10 20:43:41,237 - sync_service - INFO - Created customer in SAP: C0021076
2025-09-10 20:43:41,239 - sync_service - INFO - Using location-based costing codes for order #1018: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 20:43:41,240 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 1.0}
2025-09-10 20:43:43,509 - sync_service - INFO - SAP logging client login successful
2025-09-10 20:43:44,492 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 20:43:44,494 - sync_service - INFO - Created invoice in SAP: 23151
2025-09-10 20:43:44,496 - sync_service - INFO - Order #1018 is paid - creating incoming payment in SAP
2025-09-10 20:43:44,497 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-10 20:43:46,576 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-10 20:43:46,577 - sync_service - INFO - Created incoming payment in SAP: 22344
2025-09-10 20:43:46,578 - sync_service - INFO - Successfully created incoming payment: 22344
2025-09-10 20:43:59,489 - sync_service - INFO - Added tag 'sap_payment_22344' to order gid://shopify/Order/6972344696922
2025-09-10 20:44:12,368 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6972344696922
2025-09-10 20:44:14,141 - sync_service - INFO - Added tag 'sap_invoice_23151' to order gid://shopify/Order/6972344696922
2025-09-10 20:44:15,767 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6972344696922
2025-09-10 20:44:15,771 - sync_service - INFO - Successfully processed order #1018
2025-09-10 20:44:15,773 - sync_service - INFO - ‚úÖ Processed order #1018 -> SAP Invoice: 23151
2025-09-10 20:44:15,774 - sync_service - INFO -    üîë Payment ID: r4dteh0dcZO9oZGnVUrgZ5LLo
2025-09-10 20:44:15,774 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 1.0
2025-09-10 20:44:15,775 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Jeddah
2025-09-10 20:44:15,775 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Jeddah
2025-09-10 20:44:15,776 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-10 20:44:15,776 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-10 21:05:11,811 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:05:11,815 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:05:11,952 - sync_service - INFO - Starting all syncs...
2025-09-10 21:05:11,954 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:05:11,955 - sync_service - INFO - Starting orders sync...
2025-09-10 21:05:11,957 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:05:11,960 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:05:22,003 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 21:05:23,428 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:05:25,690 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 21:05:25,692 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 21:05:25,692 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:05:27,700 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:05:28,482 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444699926594', 'sku': 'SR-0000072', 'price': '10.00', 'product': {'id': 'gid://shopify/Product/7491930062914', 'title': 'Gift Card'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzY0OTMwNjI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA1NDUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 21:05:28,489 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:05:28,493 - sync_service - INFO - Processing 2 orders from store local
2025-09-10 21:05:28,496 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-10 21:05:28,503 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 21:05:28,506 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-10 21:05:28,507 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-10 21:05:28,507 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-10 21:05:28,508 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-10 21:05:29,838 - sync_service - INFO - SAP login successful
2025-09-10 21:05:31,610 - sync_service - INFO - Creating new customer in SAP
2025-09-10 21:05:33,187 - sync_service - INFO - Created customer in SAP: C0021077
2025-09-10 21:05:33,190 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:05:33,192 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-10 21:05:37,344 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-10 21:05:37,346 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 21:05:37,347 - sync_service - ERROR - Failed to process order #1637: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 21:05:50,305 - sync_service - INFO - Added tag 'sap_invoice_failed' to order gid://shopify/Order/6383762276418
2025-09-10 21:05:50,308 - sync_service - INFO - Added invoice failed tag to order #1637
2025-09-10 21:05:50,308 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130017) Please Select Gift Card on the Line"
      }
   }
}

2025-09-10 21:05:50,309 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-10 21:05:50,309 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-10 21:05:50,310 - sync_service - INFO - Payment Gateway: gift_card | Card Type: Unknown | Amount: 10.0
2025-09-10 21:05:50,310 - sync_service - INFO - üîë ONLINE PAYMENT ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:05:50,311 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:05:50,311 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:05:50,312 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:05:50,312 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:05:52,088 - sync_service - INFO - Found existing customer: C0021073
2025-09-10 21:05:52,090 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:05:52,091 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-10 21:05:52,092 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 21:05:56,095 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:05:56,096 - sync_service - INFO - Created invoice in SAP: 23152
2025-09-10 21:05:56,097 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-10 21:06:10,559 - sync_service - INFO - Added tag 'sap_invoice_23152' to order gid://shopify/Order/6383764930626
2025-09-10 21:06:12,360 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-10 21:06:12,361 - sync_service - INFO - Successfully processed order #1638
2025-09-10 21:06:12,362 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23152
2025-09-10 21:06:12,362 - sync_service - INFO -    üîë Payment ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:06:12,363 - sync_service - INFO -    üí≥ Gateway: gift_card | Amount: 10.0
2025-09-10 21:06:12,364 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-10 21:06:12,365 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-10 21:06:12,365 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:06:12,366 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:06:22,377 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-10 21:06:23,560 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-10 21:06:23,562 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-10 21:06:23,563 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:06:25,577 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:06:26,233 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:06:26,235 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:06:26,236 - sync_service - INFO - No orders to process for store international
2025-09-10 21:06:26,238 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 1, 'error_count': 1, 'details': None}
2025-09-10 21:06:26,240 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 1, Errors: 1
2025-09-10 21:08:48,711 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:08:48,711 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:08:48,761 - sync_service - INFO - Starting all syncs...
2025-09-10 21:08:48,761 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:08:48,762 - sync_service - INFO - Starting orders sync...
2025-09-10 21:08:48,762 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:08:48,762 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:08:58,792 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 21:08:59,803 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:09:01,490 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 21:09:01,494 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 21:09:01,498 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:09:03,521 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:09:04,658 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:09:04,690 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:09:04,700 - sync_service - INFO - No orders to process for store local
2025-09-10 21:09:04,704 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:09:04,707 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:09:05,325 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:09:05,328 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:09:05,330 - sync_service - INFO - No orders to process for store international
2025-09-10 21:09:05,332 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-10 21:09:05,333 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-10 21:10:15,032 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:10:15,034 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:10:15,056 - sync_service - INFO - Starting all syncs...
2025-09-10 21:10:15,057 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:10:15,058 - sync_service - INFO - Starting orders sync...
2025-09-10 21:10:15,059 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:10:15,059 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:10:25,074 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 21:10:25,987 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:10:27,657 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 21:10:27,659 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 21:10:27,661 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:10:29,665 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:10:30,337 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444699926594', 'sku': 'SR-0000072', 'price': '10.00', 'product': {'id': 'gid://shopify/Product/7491930062914', 'title': 'Gift Card'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzY0OTMwNjI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA1NDUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 21:10:30,340 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:10:30,342 - sync_service - INFO - Processing 2 orders from store local
2025-09-10 21:10:30,342 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-10 21:10:30,343 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-10 21:10:30,343 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-10 21:10:30,343 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-10 21:10:30,344 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-10 21:10:30,344 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-10 21:10:31,294 - sync_service - INFO - SAP login successful
2025-09-10 21:10:32,976 - sync_service - INFO - Creating new customer in SAP
2025-09-10 21:10:35,092 - sync_service - INFO - Created customer in SAP: C0021078
2025-09-10 21:10:35,093 - sync_service - INFO - Checking line item for gift card: SKU='sr-0000072', VariantSKU='sr-0000072', Name='gift card - 10 egp'
2025-09-10 21:10:35,094 - sync_service - INFO - Found 1 gift card purchase(s) in order #1637
2025-09-10 21:10:35,094 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getGiftCards($query: String!) {\n                giftCards(first: 50, query: $query) {\n                    edges {\n                        node {\n                            id   \n                            order {\n                                id\n                            }     \n                            initialValue {\n                                amount\n                                currencyCode\n                            }\n                            createdAt\n                            expiresOn\n                            customer {\n                                id\n                                email\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'query': 'createdAt:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:10:45,091 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 21:10:46,843 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 21:10:46,843 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 21:10:46,844 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:10:48,846 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getGiftCards($query: String!) {\n                giftCards(first: 50, query: $query) {\n                    edges {\n                        node {\n                            id   \n                            order {\n                                id\n                            }     \n                            initialValue {\n                                amount\n                                currencyCode\n                            }\n                            createdAt\n                            expiresOn\n                            customer {\n                                id\n                                email\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'query': 'createdAt:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:10:49,343 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'giftCards': {'edges': [{'node': {'id': 'gid://shopify/GiftCard/548952375362', 'order': {'id': 'gid://shopify/Order/6240098123842'}, 'initialValue': {'amount': '7000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-06-22T08:07:24Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7886642348098', 'email': 'luciamarigo.lm@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549003231298', 'order': {'id': 'gid://shopify/Order/6245259968578'}, 'initialValue': {'amount': '5000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-06-25T15:50:59Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7897452216386', 'email': 'heba7977@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549193678914', 'order': {'id': 'gid://shopify/Order/6269720854594'}, 'initialValue': {'amount': '3000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-07-09T08:23:39Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7848224915522', 'email': 'abeya99@yahoo.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549510152258', 'order': {'id': 'gid://shopify/Order/6314790420546'}, 'initialValue': {'amount': '3800.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-03T12:30:09Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549802475586', 'order': {'id': 'gid://shopify/Order/6347058708546'}, 'initialValue': {'amount': '100.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-21T11:43:24Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549803065410', 'order': {'id': 'gid://shopify/Order/6347117658178'}, 'initialValue': {'amount': '1.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-21T12:42:51Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/8081546084418', 'email': None}}}, {'node': {'id': 'gid://shopify/GiftCard/549948358722', 'order': {'id': 'gid://shopify/Order/6350536704066'}, 'initialValue': {'amount': '5000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-25T17:30:39Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/8087593484354', 'email': 'rejewa@hotmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/550228426818', 'order': {'id': 'gid://shopify/Order/6383762276418'}, 'initialValue': {'amount': '10.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-09-10T11:53:41Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}]}}, 'status': 'success'}
2025-09-10 21:10:49,344 - sync_service - INFO - Found 1 gift cards for order 6383762276418
2025-09-10 21:10:52,028 - sync_service - INFO - API log added to SAP: sap - GiftCards('550228426818') - failure
2025-09-10 21:10:52,029 - sync_service - INFO - Gift card 550228426818 does not exist in SAP
2025-09-10 21:10:54,427 - sync_service - INFO - API log added to SAP: sap - GiftCards - success
2025-09-10 21:10:54,428 - sync_service - INFO - Created gift card in SAP: 550228426818 - Amount: 10.0 - SKU: SR-0000072
2025-09-10 21:10:54,428 - sync_service - INFO - Successfully created 1 gift card(s) in SAP
2025-09-10 21:10:54,428 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:10:54,429 - sync_service - INFO - Added U_GiftCard field to line item: 550228426818 for amount: 10.0
2025-09-10 21:10:54,430 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-10 21:10:57,260 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:10:59,092 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:10:59,093 - sync_service - INFO - Created invoice in SAP: 23153
2025-09-10 21:10:59,094 - sync_service - INFO - Created invoice data: {'DocEntry': 23153, 'DocNum': 200004165}
2025-09-10 21:10:59,094 - sync_service - INFO - Order #1637 is paid - creating incoming payment in SAP
2025-09-10 21:10:59,095 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-10 21:11:01,385 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-10 21:11:01,387 - sync_service - INFO - Created incoming payment in SAP: 22345
2025-09-10 21:11:01,389 - sync_service - INFO - Successfully created incoming payment: 22345
2025-09-10 21:11:03,131 - sync_service - INFO - Added tag 'sap_payment_22345' to order gid://shopify/Order/6383762276418
2025-09-10 21:11:04,904 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383762276418
2025-09-10 21:11:09,377 - sync_service - INFO - Added tag 'sap_invoice_23153' to order gid://shopify/Order/6383762276418
2025-09-10 21:11:12,260 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383762276418
2025-09-10 21:11:12,261 - sync_service - INFO - Successfully processed order #1637
2025-09-10 21:11:12,261 - sync_service - INFO - ‚úÖ Processed order #1637 -> SAP Invoice: 23153
2025-09-10 21:11:12,262 - sync_service - INFO -    üîë Payment ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-10 21:11:12,263 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 10.0
2025-09-10 21:11:12,264 - sync_service - INFO -    üìç Bill To: Karim Wafik - nasr city
2025-09-10 21:11:12,264 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-10 21:11:12,265 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-10 21:11:12,266 - sync_service - INFO - Payment Gateway: gift_card | Card Type: Unknown | Amount: 10.0
2025-09-10 21:11:12,266 - sync_service - INFO - üîë ONLINE PAYMENT ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:11:12,267 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:11:12,267 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:11:12,269 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:11:12,270 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:11:13,970 - sync_service - INFO - Found existing customer: C0021073
2025-09-10 21:11:13,972 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-10 21:11:13,974 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:11:13,975 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-10 21:11:13,976 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 21:11:15,021 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:11:16,658 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:11:16,659 - sync_service - INFO - Created invoice in SAP: 23154
2025-09-10 21:11:16,660 - sync_service - INFO - Created invoice data: {'DocEntry': 23154, 'DocNum': 200004166}
2025-09-10 21:11:16,660 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-10 21:11:19,472 - sync_service - INFO - Added tag 'sap_invoice_23154' to order gid://shopify/Order/6383764930626
2025-09-10 21:11:21,610 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-10 21:11:21,611 - sync_service - INFO - Successfully processed order #1638
2025-09-10 21:11:21,612 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23154
2025-09-10 21:11:21,612 - sync_service - INFO -    üîë Payment ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:11:21,613 - sync_service - INFO -    üí≥ Gateway: gift_card | Amount: 10.0
2025-09-10 21:11:21,614 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-10 21:11:21,615 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-10 21:11:21,616 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:11:21,618 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:11:22,191 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:11:22,192 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:11:22,193 - sync_service - INFO - No orders to process for store international
2025-09-10 21:11:22,193 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 2, 'error_count': 0, 'details': None}
2025-09-10 21:11:22,194 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 2, Errors: 0
2025-09-10 21:13:53,883 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:13:53,886 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:13:53,958 - sync_service - INFO - Starting all syncs...
2025-09-10 21:13:53,960 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:13:53,961 - sync_service - INFO - Starting orders sync...
2025-09-10 21:13:53,962 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:13:53,963 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:14:04,104 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-10 21:14:05,113 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:14:06,211 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-10 21:14:06,215 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-10 21:14:06,220 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:14:08,305 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:14:09,269 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:14:09,290 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:14:09,304 - sync_service - INFO - No orders to process for store local
2025-09-10 21:14:09,328 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:14:09,347 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:14:10,086 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:14:10,160 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:14:10,171 - sync_service - INFO - No orders to process for store international
2025-09-10 21:14:10,324 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-10 21:14:10,360 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-10 21:14:30,625 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:14:30,628 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:14:46,444 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:14:46,444 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:16:02,222 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:16:02,225 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:16:02,286 - sync_service - INFO - Starting all syncs...
2025-09-10 21:16:02,287 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:16:02,289 - sync_service - INFO - Starting orders sync...
2025-09-10 21:16:02,293 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:16:02,294 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:16:02,993 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzY0OTMwNjI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA1NDUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 21:16:02,994 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:16:02,995 - sync_service - INFO - Processing 1 orders from store local
2025-09-10 21:16:02,995 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-10 21:16:02,996 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-10 21:16:02,997 - sync_service - INFO - Payment Gateway: gift_card | Card Type: Unknown | Amount: 10.0
2025-09-10 21:16:02,998 - sync_service - INFO - üîë ONLINE PAYMENT ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:16:03,000 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:16:03,003 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:16:03,004 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:16:03,007 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:16:04,008 - sync_service - INFO - SAP login successful
2025-09-10 21:16:05,159 - sync_service - INFO - Found existing customer: C0021073
2025-09-10 21:16:05,161 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-10 21:16:05,162 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:16:05,166 - sync_service - INFO - üéÅ Payment info extracted: gift_cards=[], total_gift_card_amount=0.0
2025-09-10 21:16:05,170 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-10 21:16:05,173 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 21:16:07,391 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:16:08,346 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:16:11,089 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:16:11,092 - sync_service - INFO - Created invoice in SAP: 23155
2025-09-10 21:16:11,093 - sync_service - INFO - Created invoice data: {'DocEntry': 23155, 'DocNum': 200004167}
2025-09-10 21:16:11,093 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-10 21:16:14,942 - sync_service - INFO - Added tag 'sap_invoice_23155' to order gid://shopify/Order/6383764930626
2025-09-10 21:16:16,761 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-10 21:16:16,762 - sync_service - INFO - Successfully processed order #1638
2025-09-10 21:16:16,762 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23155
2025-09-10 21:16:16,763 - sync_service - INFO -    üîë Payment ID: gid://shopify/OrderTransaction/8163522871362
2025-09-10 21:16:16,764 - sync_service - INFO -    üí≥ Gateway: gift_card | Amount: 10.0
2025-09-10 21:16:16,764 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-10 21:16:16,765 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-10 21:16:16,765 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:16:16,766 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:16:17,289 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:16:17,292 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:16:17,294 - sync_service - INFO - No orders to process for store international
2025-09-10 21:16:17,295 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-10 21:16:17,296 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-10 21:16:36,312 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:16:36,313 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:16:36,390 - sync_service - INFO - Starting all syncs...
2025-09-10 21:16:36,392 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:16:36,393 - sync_service - INFO - Starting orders sync...
2025-09-10 21:16:36,394 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:16:36,394 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:16:38,039 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:16:38,041 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:16:38,042 - sync_service - INFO - No orders to process for store local
2025-09-10 21:16:38,044 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:16:38,045 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:16:39,529 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:16:39,529 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:16:39,530 - sync_service - INFO - No orders to process for store international
2025-09-10 21:16:39,531 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-10 21:16:39,533 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-10 21:19:21,410 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-10 21:19:21,410 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-10 21:19:21,470 - sync_service - INFO - Starting all syncs...
2025-09-10 21:19:21,472 - sync_service - INFO - Starting sales orders sync...
2025-09-10 21:19:21,475 - sync_service - INFO - Starting orders sync...
2025-09-10 21:19:21,476 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:19:21,477 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:19:22,527 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzY0OTMwNjI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA1NDUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-10 21:19:22,528 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-10 21:19:22,529 - sync_service - INFO - Processing 1 orders from store local
2025-09-10 21:19:22,529 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-10 21:19:22,530 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-10 21:19:22,530 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-10 21:19:22,531 - sync_service - INFO - üéÅ GIFT CARDS USED: 1 cards, Total Amount: 10.0
2025-09-10 21:19:22,532 - sync_service - INFO -    üéÅ Gift Card 1: cef5 - 10.0 EGP
2025-09-10 21:19:22,533 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:19:22,534 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:19:22,535 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-10 21:19:22,535 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-10 21:19:23,479 - sync_service - INFO - SAP login successful
2025-09-10 21:19:24,926 - sync_service - INFO - Found existing customer: C0021073
2025-09-10 21:19:24,927 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-10 21:19:24,928 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-10 21:19:24,928 - sync_service - INFO - üéÅ Processing 1 gift card redemption(s)
2025-09-10 21:19:24,929 - sync_service - INFO - üéÅ Created gift card expense: cef5 - Amount: -10.0
2025-09-10 21:19:24,929 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-10 21:19:26,867 - sync_service - INFO - SAP logging client login successful
2025-09-10 21:19:27,877 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:19:30,992 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-10 21:19:30,993 - sync_service - INFO - Created invoice in SAP: 23156
2025-09-10 21:19:30,993 - sync_service - INFO - Created invoice data: {'DocEntry': 23156, 'DocNum': 200004168}
2025-09-10 21:19:30,994 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-10 21:19:33,793 - sync_service - INFO - Added tag 'sap_invoice_23156' to order gid://shopify/Order/6383764930626
2025-09-10 21:19:35,676 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-10 21:19:35,677 - sync_service - INFO - Successfully processed order #1638
2025-09-10 21:19:35,677 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23156
2025-09-10 21:19:35,678 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-10 21:19:35,678 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-10 21:19:35,679 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-10 21:19:35,679 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-10 21:19:35,680 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:19:45,701 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-10 21:19:46,652 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-10 21:19:46,654 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-10 21:19:46,655 - sync_service - INFO - Retrying in 2 seconds...
2025-09-10 21:19:48,668 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-10 21:19:49,327 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-10 21:19:49,328 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-10 21:19:49,328 - sync_service - INFO - No orders to process for store international
2025-09-10 21:19:49,329 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-10 21:19:49,329 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-12 10:49:07,178 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-12 10:49:07,180 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-12 10:49:07,244 - sync_service - INFO - Starting all syncs...
2025-09-12 10:49:07,244 - sync_service - INFO - Starting new items sync...
2025-09-12 10:49:07,244 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-12 10:49:07,244 - sync_service - INFO - Fetching new items for store: local
2025-09-12 10:49:28,317 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:49:28,320 - sync_service - ERROR - Failed to get new items from SAP for store local: Failed to login to SAP
2025-09-12 10:49:28,320 - sync_service - INFO - Fetching new items for store: international
2025-09-12 10:49:49,381 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:49:49,381 - sync_service - ERROR - Failed to get new items from SAP for store international: Failed to login to SAP
2025-09-12 10:49:49,381 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-12 10:49:49,381 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-12 10:49:49,381 - sync_service - INFO - Starting stock change sync...
2025-09-12 10:49:49,381 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-12 10:49:49,381 - sync_service - INFO - Processing inventory changes for store: local
2025-09-12 10:50:10,424 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:50:10,424 - sync_service - ERROR - Failed to fetch stock changes for store local: Failed to login to SAP
2025-09-12 10:50:10,424 - sync_service - INFO - Processing inventory changes for store: international
2025-09-12 10:50:31,491 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:50:31,492 - sync_service - ERROR - Failed to fetch stock changes for store international: Failed to login to SAP
2025-09-12 10:50:31,493 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-12 10:50:31,493 - sync_service - INFO - Starting item changes sync...
2025-09-12 10:50:31,494 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-12 10:50:31,496 - sync_service - INFO - Processing item changes for store: local
2025-09-12 10:50:52,533 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:50:52,533 - sync_service - ERROR - Failed to get item changes from SAP for store local: Failed to login to SAP
2025-09-12 10:50:52,533 - sync_service - ERROR - Failed to get item changes for store local: Failed to login to SAP
2025-09-12 10:50:52,533 - sync_service - INFO - Processing item changes for store: international
2025-09-12 10:51:13,570 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:51:13,570 - sync_service - ERROR - Failed to get item changes from SAP for store international: Failed to login to SAP
2025-09-12 10:51:13,570 - sync_service - ERROR - Failed to get item changes for store international: Failed to login to SAP
2025-09-12 10:51:13,570 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-12 10:51:13,570 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-12 10:51:13,570 - sync_service - INFO - Starting price changes sync...
2025-09-12 10:51:13,586 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-12 10:51:13,586 - sync_service - INFO - Processing price changes for store: local
2025-09-12 10:51:34,635 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:51:34,635 - sync_service - ERROR - Failed to get price changes from SAP for store local: Failed to login to SAP
2025-09-12 10:51:34,635 - sync_service - ERROR - Failed to get price changes for store local: Failed to login to SAP
2025-09-12 10:51:34,635 - sync_service - INFO - Processing price changes for store: international
2025-09-12 10:51:55,702 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-12 10:51:55,702 - sync_service - ERROR - Failed to get price changes from SAP for store international: Failed to login to SAP
2025-09-12 10:51:55,702 - sync_service - ERROR - Failed to get price changes for store international: Failed to login to SAP
2025-09-12 10:51:55,702 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-12 10:51:55,702 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-12 10:51:55,702 - sync_service - INFO - Starting sales orders sync...
2025-09-12 10:51:55,702 - sync_service - INFO - Starting orders sync...
2025-09-12 10:51:55,718 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-12
2025-09-12 10:51:55,718 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-12'}}, 'response': None, 'status': None}
2025-09-12 10:51:56,438 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-12 10:51:56,438 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-12 10:51:56,438 - sync_service - INFO - No orders to process for store local
2025-09-12 10:51:56,438 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-12
2025-09-12 10:51:56,452 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-12'}}, 'response': None, 'status': None}
2025-09-12 10:51:57,035 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-12 10:51:57,035 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-12 10:51:57,035 - sync_service - INFO - No orders to process for store international
2025-09-12 10:51:57,035 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-12 10:51:57,035 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-13 20:43:46,520 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 20:43:46,520 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 20:44:03,796 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 20:44:03,800 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 20:44:03,953 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 20:44:03,959 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 20:44:04,013 - sync_service - INFO - Starting all syncs...
2025-09-13 20:44:04,023 - sync_service - INFO - Starting new items sync...
2025-09-13 20:44:04,027 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-13 20:44:04,039 - sync_service - INFO - Fetching new items for store: local
2025-09-13 20:44:25,157 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:44:25,164 - sync_service - ERROR - Failed to get new items from SAP for store local: Failed to login to SAP
2025-09-13 20:44:25,168 - sync_service - INFO - Fetching new items for store: international
2025-09-13 20:44:46,221 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:44:46,223 - sync_service - ERROR - Failed to get new items from SAP for store international: Failed to login to SAP
2025-09-13 20:44:46,225 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-13 20:44:46,226 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-13 20:44:46,226 - sync_service - INFO - Starting stock change sync...
2025-09-13 20:44:46,226 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-13 20:44:46,226 - sync_service - INFO - Processing inventory changes for store: local
2025-09-13 20:45:07,257 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:45:07,262 - sync_service - ERROR - Failed to fetch stock changes for store local: Failed to login to SAP
2025-09-13 20:45:07,262 - sync_service - INFO - Processing inventory changes for store: international
2025-09-13 20:45:28,307 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:45:28,309 - sync_service - ERROR - Failed to fetch stock changes for store international: Failed to login to SAP
2025-09-13 20:45:28,316 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-13 20:45:28,320 - sync_service - INFO - Starting item changes sync...
2025-09-13 20:45:28,322 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-13 20:45:28,328 - sync_service - INFO - Processing item changes for store: local
2025-09-13 20:45:49,378 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:45:49,380 - sync_service - ERROR - Failed to get item changes from SAP for store local: Failed to login to SAP
2025-09-13 20:45:49,384 - sync_service - ERROR - Failed to get item changes for store local: Failed to login to SAP
2025-09-13 20:45:49,387 - sync_service - INFO - Processing item changes for store: international
2025-09-13 20:46:10,441 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:46:10,443 - sync_service - ERROR - Failed to get item changes from SAP for store international: Failed to login to SAP
2025-09-13 20:46:10,446 - sync_service - ERROR - Failed to get item changes for store international: Failed to login to SAP
2025-09-13 20:46:10,446 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-13 20:46:10,448 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-13 20:46:10,448 - sync_service - INFO - Starting price changes sync...
2025-09-13 20:46:10,449 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-13 20:46:10,449 - sync_service - INFO - Processing price changes for store: local
2025-09-13 20:46:16,188 - sync_service - ERROR - SAP login error: All connection attempts failed
2025-09-13 20:46:16,190 - sync_service - ERROR - Failed to get price changes from SAP for store local: Failed to login to SAP
2025-09-13 20:46:16,194 - sync_service - ERROR - Failed to get price changes for store local: Failed to login to SAP
2025-09-13 20:46:16,194 - sync_service - INFO - Processing price changes for store: international
2025-09-13 20:59:42,598 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 20:59:42,601 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 20:59:42,738 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 20:59:42,742 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 20:59:42,747 - sync_service - INFO - Starting returns sync...
2025-09-13 20:59:42,749 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 20:59:42,751 - sync_service - INFO - Processing returns for store: local
2025-09-13 20:59:42,755 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned
2025-09-13 20:59:42,758 - sync_service - ERROR - GraphQL query attempt 1 failed for store local: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:43,776 - sync_service - ERROR - GraphQL query attempt 2 failed for store local: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:45,790 - sync_service - ERROR - GraphQL query attempt 3 failed for store local: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:45,795 - sync_service - ERROR - Failed to get returned orders from Shopify store local: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:45,798 - sync_service - INFO - No returned orders to process for store local
2025-09-13 20:59:45,801 - sync_service - INFO - Processing returns for store: international
2025-09-13 20:59:45,809 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned
2025-09-13 20:59:45,816 - sync_service - ERROR - GraphQL query attempt 1 failed for store international: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:46,827 - sync_service - ERROR - GraphQL query attempt 2 failed for store international: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:48,847 - sync_service - ERROR - GraphQL query attempt 3 failed for store international: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:48,870 - sync_service - ERROR - Failed to get returned orders from Shopify store international: 'MultiStoreShopifyClient' object has no attribute 'execute_graphql_query'
2025-09-13 20:59:48,877 - sync_service - INFO - No returned orders to process for store international
2025-09-13 20:59:48,901 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:00:57,050 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:00:57,051 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:00:57,095 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:00:57,096 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:00:57,097 - sync_service - INFO - Starting returns sync...
2025-09-13 21:00:57,098 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:00:57,100 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:00:57,102 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned
2025-09-13 21:00:57,104 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        fulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned'}}, 'response': None, 'status': None}
2025-09-13 21:01:07,134 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:01:08,217 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:01:09,950 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:01:09,950 - sync_service - WARNING - No orders data returned from Shopify for store local
2025-09-13 21:01:09,952 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:01:09,953 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:01:09,955 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned
2025-09-13 21:01:09,957 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        fulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed fulfillment_status:returned'}}, 'response': None, 'status': None}
2025-09-13 21:01:19,966 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 21:01:21,701 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:01:21,704 - sync_service - WARNING - No orders data returned from Shopify for store international
2025-09-13 21:01:21,706 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:01:21,710 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:04:01,555 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:04:01,557 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:04:01,565 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    fulfillmentStatus\n                    tags\n                    lineItems(first: 10) {\n                        edges {\n                            node {\n                                id\n                                name\n                                quantity\n                                sku\n                                variant {\n                                    id\n                                    sku\n                                    price\n                                    compareAtPrice\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 21:04:11,596 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:04:13,381 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:04:15,386 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:04:15,389 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    fulfillmentStatus\n                    tags\n                    lineItems(first: 10) {\n                        edges {\n                            node {\n                                id\n                                name\n                                quantity\n                                sku\n                                variant {\n                                    id\n                                    sku\n                                    price\n                                    compareAtPrice\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 21:04:15,898 - sync_service - ERROR - GraphQL query error for store international: {'message': "Field 'fulfillmentStatus' doesn't exist on type 'Order'", 'locations': [{'line': 8, 'column': 5}], 'path': ['query getOrder', 'order', 'fulfillmentStatus'], 'extensions': {'code': 'undefinedField', 'typeName': 'Order', 'fieldName': 'fulfillmentStatus'}}
GraphQL Errors: [
  {
    "message": "Field 'fulfillmentStatus' doesn't exist on type 'Order'",
    "locations": [
      {
        "line": 8,
        "column": 5
      }
    ],
    "path": [
      "query getOrder",
      "order",
      "fulfillmentStatus"
    ],
    "extensions": {
      "code": "undefinedField",
      "typeName": "Order",
      "fieldName": "fulfillmentStatus"
    }
  }
]
2025-09-13 21:04:17,596 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:05:25,618 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:05:25,618 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:05:25,620 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                    lineItems(first: 10) {\n                        edges {\n                            node {\n                                id\n                                name\n                                quantity\n                                sku\n                                variant {\n                                    id\n                                    sku\n                                    price\n                                    compareAtPrice\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 21:05:35,637 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:05:37,833 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:05:39,931 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:05:39,933 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                    lineItems(first: 10) {\n                        edges {\n                            node {\n                                id\n                                name\n                                quantity\n                                sku\n                                variant {\n                                    id\n                                    sku\n                                    price\n                                    compareAtPrice\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 21:05:40,398 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'order': None}, 'status': 'success'}
2025-09-13 21:06:22,421 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:06:22,423 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:06:22,431 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $query: String) {\n                orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                        node {\n                            id\n                            name\n                            createdAt\n                            displayFinancialStatus\n                            displayFulfillmentStatus\n                            tags\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'first': 20, 'query': 'tag:returntest'}}, 'response': None, 'status': None}
2025-09-13 21:06:32,550 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:06:34,850 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:06:36,564 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:06:36,566 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $query: String) {\n                orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                        node {\n                            id\n                            name\n                            createdAt\n                            displayFinancialStatus\n                            displayFulfillmentStatus\n                            tags\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'first': 20, 'query': 'tag:returntest'}}, 'response': None, 'status': None}
2025-09-13 21:06:37,113 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': []}}, 'status': 'success'}
2025-09-13 21:06:37,114 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $query: String) {\n                orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                        node {\n                            id\n                            name\n                            createdAt\n                            displayFinancialStatus\n                            displayFulfillmentStatus\n                            tags\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'first': 20, 'query': 'tag:sap_payment_synced'}}, 'response': None, 'status': None}
2025-09-13 21:06:37,668 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383774761026', 'name': '#1639', 'createdAt': '2025-09-10T12:10:12Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['salestest', 'sap_invoice_23150', 'sap_invoice_synced', 'sap_payment_22343', 'sap_payment_synced']}}, {'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['salestest', 'sap_invoice_23153', 'sap_invoice_synced', 'sap_payment_22345', 'sap_payment_synced']}}, {'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:06:37,674 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $query: String) {\n                orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                        node {\n                            id\n                            name\n                            createdAt\n                            displayFinancialStatus\n                            displayFulfillmentStatus\n                            tags\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'first': 20, 'query': 'tag:sap_payment_synced'}}, 'response': None, 'status': None}
2025-09-13 21:06:38,333 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6972344696922', 'name': '#1018', 'createdAt': '2025-09-10T13:05:52Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['salestest', 'sap_invoice_23151', 'sap_invoice_synced', 'sap_payment_22344', 'sap_payment_synced']}}, {'node': {'id': 'gid://shopify/Order/6947886202970', 'name': '#1015', 'createdAt': '2025-08-28T00:51:11Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['sap_invoice_23144', 'sap_invoice_synced', 'sap_payment_22340', 'sap_payment_synced', 'take']}}]}}, 'status': 'success'}
2025-09-13 21:07:00,681 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:07:00,866 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:07:01,114 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:07:01,118 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:07:01,125 - sync_service - INFO - Starting returns sync...
2025-09-13 21:07:01,131 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:07:01,134 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:07:01,135 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded OR financial_status:refunded
2025-09-13 21:07:01,137 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded OR financial_status:refunded'}}, 'response': None, 'status': None}
2025-09-13 21:07:11,178 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:07:13,062 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:07:15,171 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:07:15,517 - sync_service - WARNING - No orders data returned from Shopify for store local
2025-09-13 21:07:16,179 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:07:16,207 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:07:16,364 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded OR financial_status:refunded
2025-09-13 21:07:16,412 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded OR financial_status:refunded'}}, 'response': None, 'status': None}
2025-09-13 21:07:26,733 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 21:07:28,321 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:07:28,324 - sync_service - WARNING - No orders data returned from Shopify for store international
2025-09-13 21:07:28,325 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:07:28,326 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:07:49,617 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:07:49,619 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:07:49,727 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:07:49,731 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:07:49,734 - sync_service - INFO - Starting returns sync...
2025-09-13 21:07:49,736 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:07:49,741 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:07:49,744 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded
2025-09-13 21:07:49,746 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:07:59,817 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:08:00,743 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:08:02,348 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:08:02,349 - sync_service - WARNING - No orders data returned from Shopify for store local
2025-09-13 21:08:02,349 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:08:02,350 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:08:02,350 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded
2025-09-13 21:08:02,350 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:08:02,894 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:08:02,896 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:08:02,897 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:08:02,897 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:08:54,948 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:08:54,951 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:08:55,076 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:08:55,082 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:08:55,084 - sync_service - INFO - Starting returns sync...
2025-09-13 21:08:55,086 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:08:55,089 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:08:55,092 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed
2025-09-13 21:08:55,097 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed'}}, 'response': None, 'status': None}
2025-09-13 21:08:55,898 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:08:55,903 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:08:55,905 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:08:55,907 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:08:55,909 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed
2025-09-13 21:08:55,912 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed'}}, 'response': None, 'status': None}
2025-09-13 21:08:56,618 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:08:56,621 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:08:56,627 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:08:56,629 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:09:45,742 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:09:45,745 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:09:45,754 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest'}}, 'response': None, 'status': None}
2025-09-13 21:09:46,552 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:09:46,556 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:sap_payment_synced'}}, 'response': None, 'status': None}
2025-09-13 21:09:47,349 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383774761026', 'name': '#1639', 'createdAt': '2025-09-10T12:10:12Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['salestest', 'sap_invoice_23150', 'sap_invoice_synced', 'sap_payment_22343', 'sap_payment_synced']}}, {'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['salestest', 'sap_invoice_23153', 'sap_invoice_synced', 'sap_payment_22345', 'sap_payment_synced']}}, {'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:09:47,417 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced'}}, 'response': None, 'status': None}
2025-09-13 21:09:47,971 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:09:47,977 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:09:48,590 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:09:48,944 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    createdAt\n                    displayFinancialStatus\n                    displayFulfillmentStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced -tag:sap_return_synced -tag:sap_return_failed'}}, 'response': None, 'status': None}
2025-09-13 21:09:58,966 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:10:01,734 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:10:03,405 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:10:30,817 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:10:30,818 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:10:30,887 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:10:30,889 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:10:30,893 - sync_service - INFO - Starting returns sync...
2025-09-13 21:10:30,895 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:10:30,897 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:10:30,898 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced
2025-09-13 21:10:30,901 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:10:31,532 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:10:31,533 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:10:31,535 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:10:31,535 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:10:31,537 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced
2025-09-13 21:10:31,540 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:10:32,071 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:10:32,071 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:10:32,073 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:10:32,075 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:11:04,570 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:11:04,571 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:11:04,604 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:11:04,605 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:11:04,606 - sync_service - INFO - Starting returns sync...
2025-09-13 21:11:04,608 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:11:04,609 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:11:04,609 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced
2025-09-13 21:11:04,610 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:11:14,636 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:11:15,618 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:11:17,508 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:11:17,511 - sync_service - WARNING - No orders data returned from Shopify for store local
2025-09-13 21:11:17,513 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:11:17,514 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:11:17,515 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced
2025-09-13 21:11:17,516 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:11:18,071 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:11:18,073 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:11:18,077 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:11:18,079 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:13:59,187 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:13:59,189 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:13:59,250 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:13:59,251 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:13:59,251 - sync_service - INFO - Starting returns sync...
2025-09-13 21:13:59,252 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:13:59,252 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:13:59,252 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded
2025-09-13 21:13:59,253 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:14:00,167 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:14:00,168 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:14:00,169 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:14:00,170 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:14:00,171 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded
2025-09-13 21:14:00,173 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:14:00,721 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:14:00,723 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:14:00,725 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:14:00,726 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:18:22,791 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:18:22,793 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:18:22,804 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query getOrder($id: ID!) {\n            order(id: $id) {\n                id\n                name\n                createdAt\n                displayFinancialStatus\n                displayFulfillmentStatus\n                tags\n                lineItems(first: 10) {\n                    edges {\n                        node {\n                            id\n                            name\n                            quantity\n                            sku\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 21:18:32,850 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:18:34,925 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:18:35,811 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:19:30,860 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:19:30,861 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:19:30,873 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        tags\n                        lineItems(first: 10) {\n                            edges {\n                                node {\n                                    id\n                                    name\n                                    quantity\n                                    sku\n                                    variant {\n                                        id\n                                        sku\n                                        price\n                                        compareAtPrice\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                pageInfo {\n                    hasNextPage\n                    endCursor\n                }\n            }\n        }\n        ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:19:31,677 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:19:31,679 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        tags\n                        lineItems(first: 10) {\n                            edges {\n                                node {\n                                    id\n                                    name\n                                    quantity\n                                    sku\n                                    variant {\n                                        id\n                                        sku\n                                        price\n                                        compareAtPrice\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                pageInfo {\n                    hasNextPage\n                    endCursor\n                }\n            }\n        }\n        ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest'}}, 'response': None, 'status': None}
2025-09-13 21:19:32,224 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00'}}}]}}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:19:32,230 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n        query getOrders($first: Int!, $after: String, $query: String) {\n            orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        tags\n                        lineItems(first: 10) {\n                            edges {\n                                node {\n                                    id\n                                    name\n                                    quantity\n                                    sku\n                                    variant {\n                                        id\n                                        sku\n                                        price\n                                        compareAtPrice\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                pageInfo {\n                    hasNextPage\n                    endCursor\n                }\n            }\n        }\n        ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:19:32,798 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00'}}}]}}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoiMjAyNS0wOS0xMCAwOTo0MTozOS41MjIxMjgifQ=='}}}, 'status': 'success'}
2025-09-13 21:20:07,293 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:20:07,295 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:20:07,304 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced -tag:sap_return_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:20:17,342 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:20:19,605 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:20:21,545 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:20:21,548 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:20:22,063 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:20:22,066 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:20:22,774 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:20:22,776 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest tag:sap_payment_synced -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:20:23,273 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:20:23,276 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:returntest financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:20:23,887 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:20:23,891 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n    query getOrders($first: Int!, $query: String) {\n        orders(first: $first, sortKey: CREATED_AT, reverse: true, query: $query) {\n            edges {\n                node {\n                    id\n                    name\n                    displayFinancialStatus\n                    tags\n                }\n            }\n        }\n    }\n    ', 'variables': {'first': 10, 'query': 'tag:sap_payment_synced financial_status:partially_refunded'}}, 'response': None, 'status': None}
2025-09-13 21:20:33,213 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}]}}, 'status': 'success'}
2025-09-13 21:20:56,940 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:20:56,942 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:20:57,002 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:20:57,004 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:20:57,006 - sync_service - INFO - Starting returns sync...
2025-09-13 21:20:57,008 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:20:57,008 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:20:57,009 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:20:57,009 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:20:57,623 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:20:57,625 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:20:57,626 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:20:57,627 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:20:57,628 - sync_service - INFO - Fetching returned orders with filter: tag: returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:20:57,628 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag: returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:20:58,219 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:20:58,221 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:20:58,222 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:20:58,225 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:22:19,174 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:22:19,176 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:22:19,236 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:22:19,237 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:22:19,239 - sync_service - INFO - Starting returns sync...
2025-09-13 21:22:19,240 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:22:19,241 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:22:19,242 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:22:19,243 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:22:29,275 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:22:30,752 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:22:32,352 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:22:32,355 - sync_service - WARNING - No orders data returned from Shopify for store local
2025-09-13 21:22:32,356 - sync_service - INFO - No returned orders to process for store local
2025-09-13 21:22:32,357 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:22:32,358 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:22:32,359 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:22:32,878 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:22:32,879 - sync_service - INFO - Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:22:32,882 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:22:32,882 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-13 21:33:52,294 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:33:52,296 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:33:52,340 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:33:52,341 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:33:52,342 - sync_service - INFO - Starting returns sync...
2025-09-13 21:33:52,343 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:33:52,344 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:33:52,345 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:33:52,347 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:33:52,349 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:34:02,378 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:34:03,919 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:34:06,033 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:34:06,081 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:34:06,755 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:34:07,925 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:34:08,006 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:34:09,014 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:34:09,019 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:34:09,022 - sync_service - INFO - Processing 1 returned orders for store local
2025-09-13 21:34:09,025 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:34:09,031 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:34:09,035 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:34:09,041 - sync_service - ERROR - Error fetching invoice 23147: 'SAPClient' object has no attribute 'make_request'
2025-09-13 21:34:09,048 - sync_service - ERROR - Failed to fetch invoice 23147: 'SAPClient' object has no attribute 'make_request'
2025-09-13 21:34:09,051 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:34:09,054 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:34:09,056 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:34:09,059 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:34:09,059 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:34:19,087 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 21:34:20,053 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:34:20,133 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 21:34:20,151 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:34:21,237 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 21:34:21,267 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:34:22,243 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:34:22,285 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:34:22,302 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:34:22,330 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:42:28,522 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:42:28,525 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:42:28,596 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:42:28,598 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:42:28,600 - sync_service - INFO - Starting returns sync...
2025-09-13 21:42:28,601 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:42:28,601 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:42:28,602 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:42:28,603 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:42:28,604 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:42:38,637 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:42:39,651 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:42:41,216 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:42:41,217 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:42:41,218 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:42:42,221 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:42:42,222 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:42:42,859 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:42:42,860 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:42:42,862 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:42:42,863 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:42:42,864 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:42:43,798 - sync_service - INFO - SAP login successful
2025-09-13 21:42:46,243 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:42:46,567 - sync_service - ERROR - Failed to fetch invoice 23147: {'msg': 'success', 'data': {'odata.metadata': 'https://10.0.0.100:50000/b1s/v1/$metadata#Invoices/@Element', 'DocEntry': 23147, 'DocNum': 200004159, 'DocType': 'dDocument_Items', 'HandWritten': 'tNO', 'Printed': 'psNo', 'DocDate': '2025-09-10', 'DocDueDate': '2025-09-10', 'CardCode': 'C0021070', 'CardName': 'Nermin Ahmed', 'Address': None, 'NumAtCard': '1635', 'DocTotal': 208.5, 'AttachmentEntry': None, 'DocCurrency': 'EGP', 'DocRate': 1.0, 'Reference1': '200004159', 'Reference2': None, 'Comments': 'Shopify Order: #1635 | Payment: PAID | Fulfillment: FULFILLED', 'JournalMemo': 'A/R Invoices - C0021070', 'PaymentGroupCode': -1, 'DocTime': '20:35:00', 'SalesPersonCode': 28, 'TransportationCode': -1, 'Confirmed': 'tYES', 'ImportFileNum': 1635, 'SummeryType': 'dNoSummary', 'ContactPersonCode': None, 'ShowSCN': 'tNO', 'Series': 82, 'TaxDate': '2025-09-10', 'PartialSupply': 'tYES', 'DocObjectCode': 'oInvoices', 'ShipToCode': None, 'Indicator': None, 'FederalTaxID': None, 'DiscountPercent': 0.0, 'PaymentReference': None, 'CreationDate': '2025-09-10', 'UpdateDate': '2025-09-10', 'FinancialPeriod': 57, 'TransNum': 96938, 'VatSum': 0.0, 'VatSumSys': 0.0, 'VatSumFc': 0.0, 'NetProcedure': 'tNO', 'DocTotalFc': 0.0, 'DocTotalSys': 208.5, 'Form1099': None, 'Box1099': None, 'RevisionPo': 'tNO', 'RequriedDate': None, 'CancelDate': None, 'BlockDunning': 'tNO', 'Submitted': 'tNO', 'Segment': 0, 'PickStatus': 'tNO', 'Pick': 'tNO', 'PaymentMethod': None, 'PaymentBlock': 'tNO', 'PaymentBlockEntry': None, 'CentralBankIndicator': None, 'MaximumCashDiscount': 'tNO', 'Reserve': 'tNO', 'Project': None, 'ExemptionValidityDateFrom': None, 'ExemptionValidityDateTo': None, 'WareHouseUpdateType': 'dwh_Stock', 'Rounding': 'tNO', 'ExternalCorrectedDocNum': None, 'InternalCorrectedDocNum': None, 'NextCorrectingDocument': None, 'DeferredTax': 'tNO', 'TaxExemptionLetterNum': None, 'WTApplied': 0.0, 'WTAppliedFC': 0.0, 'BillOfExchangeReserved': 'tNO', 'AgentCode': None, 'WTAppliedSC': 0.0, 'TotalEqualizationTax': 0.0, 'TotalEqualizationTaxFC': 0.0, 'TotalEqualizationTaxSC': 0.0, 'NumberOfInstallments': 1, 'ApplyTaxOnFirstInstallment': 'tNO', 'WTNonSubjectAmount': 0.0, 'WTNonSubjectAmountSC': 0.0, 'WTNonSubjectAmountFC': 0.0, 'WTExemptedAmount': 0.0, 'WTExemptedAmountSC': 0.0, 'WTExemptedAmountFC': 0.0, 'BaseAmount': 0.0, 'BaseAmountSC': 0.0, 'BaseAmountFC': 0.0, 'WTAmount': 0.0, 'WTAmountSC': 0.0, 'WTAmountFC': 0.0, 'VatDate': None, 'DocumentsOwner': None, 'FolioPrefixString': None, 'FolioNumber': None, 'DocumentSubType': 'bod_None', 'BPChannelCode': None, 'BPChannelContact': None, 'Address2': '', 'DocumentStatus': 'bost_Close', 'PeriodIndicator': 'Default', 'PayToCode': None, 'ManualNumber': None, 'UseShpdGoodsAct': 'tNO', 'IsPayToBank': 'tNO', 'PayToBankCountry': None, 'PayToBankCode': None, 'PayToBankAccountNo': None, 'PayToBankBranch': None, 'BPL_IDAssignedToInvoice': None, 'DownPayment': 0.0, 'ReserveInvoice': 'tNO', 'LanguageCode': 8, 'TrackingNumber': None, 'PickRemark': None, 'ClosingDate': None, 'SequenceCode': None, 'SequenceSerial': None, 'SeriesString': None, 'SubSeriesString': None, 'SequenceModel': '0', 'UseCorrectionVATGroup': 'tNO', 'TotalDiscount': 0.0, 'DownPaymentAmount': 0.0, 'DownPaymentPercentage': 0.0, 'DownPaymentType': 'dptInvoice', 'DownPaymentAmountSC': 0.0, 'DownPaymentAmountFC': 0.0, 'VatPercent': 0.0, 'ServiceGrossProfitPercent': 0.0, 'OpeningRemarks': None, 'ClosingRemarks': None, 'RoundingDiffAmount': 0.0, 'RoundingDiffAmountFC': 0.0, 'RoundingDiffAmountSC': 0.0, 'Cancelled': 'tNO', 'SignatureInputMessage': None, 'SignatureDigest': None, 'CertificationNumber': None, 'PrivateKeyVersion': None, 'ControlAccount': '10601110', 'InsuranceOperation347': 'tNO', 'ArchiveNonremovableSalesQuotation': 'tNO', 'GTSChecker': None, 'GTSPayee': None, 'ExtraMonth': 0, 'ExtraDays': 0, 'CashDiscountDateOffset': 0, 'StartFrom': 'pdt_None', 'NTSApproved': 'tNO', 'ETaxWebSite': None, 'ETaxNumber': None, 'NTSApprovedNumber': None, 'EDocGenerationType': 'edocNotRelevant', 'EDocSeries': None, 'EDocNum': None, 'EDocExportFormat': None, 'EDocStatus': 'edoc_Ok', 'EDocErrorCode': None, 'EDocErrorMessage': None, 'DownPaymentStatus': 'so_Open', 'GroupSeries': None, 'GroupNumber': None, 'GroupHandWritten': 'tNO', 'ReopenOriginalDocument': None, 'ReopenManuallyClosedOrCanceledDocument': None, 'CreateOnlineQuotation': 'tNO', 'POSEquipmentNumber': None, 'POSManufacturerSerialNumber': None, 'POSCashierNumber': None, 'ApplyCurrentVATRatesForDownPaymentsToDraw': 'tNO', 'ClosingOption': 'coByCurrentSystemDate', 'SpecifiedClosingDate': None, 'OpenForLandedCosts': 'tYES', 'AuthorizationStatus': 'dasWithout', 'TotalDiscountFC': 0.0, 'TotalDiscountSC': 0.0, 'RelevantToGTS': 'tNO', 'BPLName': None, 'VATRegNum': None, 'AnnualInvoiceDeclarationReference': None, 'Supplier': None, 'Releaser': None, 'Receiver': None, 'BlanketAgreementNumber': None, 'IsAlteration': 'tNO', 'CancelStatus': 'csNo', 'AssetValueDate': '2025-09-10', 'InvoicePayment': 'tNO', 'DocumentDelivery': 'ddtNoneSeleted', 'AuthorizationCode': None, 'StartDeliveryDate': None, 'StartDeliveryTime': None, 'EndDeliveryDate': None, 'EndDeliveryTime': None, 'VehiclePlate': None, 'ATDocumentType': None, 'ElecCommStatus': None, 'ElecCommMessage': None, 'ReuseDocumentNum': 'tNO', 'ReuseNotaFiscalNum': 'tNO', 'PrintSEPADirect': 'tNO', 'FiscalDocNum': None, 'POSDailySummaryNo': None, 'POSReceiptNo': None, 'PointOfIssueCode': None, 'Letter': None, 'FolioNumberFrom': None, 'FolioNumberTo': None, 'InterimType': 'boidt_None', 'RelatedType': -1, 'RelatedEntry': None, 'SAPPassport': None, 'DocumentTaxID': None, 'DateOfReportingControlStatementVAT': None, 'ReportingSectionControlStatementVAT': None, 'ExcludeFromTaxReportControlStatementVAT': 'tNO', 'POS_CashRegister': None, 'UpdateTime': '20:35:39', 'CreateQRCodeFrom': None, 'PriceMode': 'pmdNet', 'Revision': 'tNO', 'OriginalRefNo': None, 'OriginalRefDate': None, 'GSTTransactionType': None, 'OriginalCreditOrDebitNo': None, 'OriginalCreditOrDebitDate': None, 'ECommerceOperator': None, 'ECommerceGSTIN': None, 'ShipFrom': None, 'CommissionTrade': 'ct_Empty', 'CommissionTradeReturn': 'tNO', 'UseBillToAddrToDetermineTax': 'tNO', 'IssuingReason': 1, 'Cig': None, 'Cup': None, 'EDocType': 'edocFE', 'PaidToDate': 208.5, 'PaidToDateFC': 0.0, 'PaidToDateSys': 208.5, 'BaseType': -1, 'BaseEntry': None, 'U_UI_Telephone': None, 'U_Photographers': None, 'U_Seen': 'N', 'U_Courier': '4', 'U_IssueType': '1', 'U_Location': None, 'U_Deliv': 'N', 'U_CustomerName': None, 'U_CustomerEmail': None, 'U_CutomerPhone': None, 'U_CustomerAddress': None, 'U_OrderType': '', 'U_wrapping': 'N', 'U_Pay_type': '1', 'U_GRPOweight': 0.0, 'U_GIReason': None, 'U_DiscountReason': None, 'U_Planned_Order': None, 'U_POS_Receipt_Number': None, 'U_SBO_DocVer': '1.0', 'U_WHPaymentTerm': None, 'U_BillingAddress': 'Zayed, Zayed, Giza\rEgypt', 'U_DeliveryAddress': 'Zayed, Zayed, Giza\rEgypt', 'U_Shopify_Order_ID': '6383666757698', 'Document_ApprovalRequests': [], 'DocumentLines': [{'LineNum': 0, 'ItemCode': 'FG-0000714', 'ItemDescription': 'AA-Ring Blue', 'Quantity': 1.0, 'ShipDate': None, 'Price': 8.5, 'PriceAfterVAT': 8.5, 'Currency': 'EGP', 'Rate': 0.0, 'DiscountPercent': 0.0, 'VendorNum': None, 'SerialNum': None, 'WarehouseCode': 'SW', 'SalesPersonCode': 28, 'CommisionPercent': 0.0, 'TreeType': 'iNotATree', 'AccountCode': '40101101', 'UseBaseUnits': 'tNO', 'SupplierCatNum': None, 'CostingCode': 'ONL', 'ProjectCode': None, 'BarCode': '203090', 'VatGroup': 'X0', 'Height1': 0.0, 'Hight1Unit': None, 'Height2': 0.0, 'Height2Unit': None, 'Lengh1': 0.0, 'Lengh1Unit': None, 'Lengh2': 0.0, 'Lengh2Unit': None, 'Weight1': 0.0, 'Weight1Unit': None, 'Weight2': 0.0, 'Weight2Unit': None, 'Factor1': 1.0, 'Factor2': 1.0, 'Factor3': 1.0, 'Factor4': 1.0, 'BaseType': -1, 'BaseEntry': None, 'BaseLine': None, 'Volume': 0.0, 'VolumeUnit': 2, 'Width1': 0.0, 'Width1Unit': None, 'Width2': 0.0, 'Width2Unit': None, 'Address': '', 'TaxCode': None, 'TaxType': 'tt_Yes', 'TaxLiable': 'tYES', 'PickStatus': 'tNO', 'PickQuantity': 0.0, 'PickListIdNumber': None, 'OriginalItem': None, 'BackOrder': None, 'FreeText': None, 'ShippingMethod': -1, 'POTargetNum': None, 'POTargetEntry': None, 'POTargetRowNum': None, 'CorrectionInvoiceItem': 'ciis_ShouldBe', 'CorrInvAmountToStock': 0.0, 'CorrInvAmountToDiffAcct': 0.0, 'AppliedTax': 0.0, 'AppliedTaxFC': 0.0, 'AppliedTaxSC': 0.0, 'WTLiable': 'tNO', 'DeferredTax': 'tNO', 'EqualizationTaxPercent': 0.0, 'TotalEqualizationTax': 0.0, 'TotalEqualizationTaxFC': 0.0, 'TotalEqualizationTaxSC': 0.0, 'NetTaxAmount': 0.0, 'NetTaxAmountFC': 0.0, 'NetTaxAmountSC': 0.0, 'MeasureUnit': 'Piece', 'UnitsOfMeasurment': 1.0, 'LineTotal': 8.5, 'TaxPercentagePerRow': 0.0, 'TaxTotal': 0.0, 'ConsumerSalesForecast': 'tNO', 'ExciseAmount': 0.0, 'TaxPerUnit': 0.0, 'TotalInclTax': 0.0, 'CountryOrg': None, 'SWW': None, 'TransactionType': None, 'DistributeExpense': 'tYES', 'RowTotalFC': 0.0, 'RowTotalSC': 8.5, 'LastBuyInmPrice': 0.0, 'LastBuyDistributeSumFc': 0.0, 'LastBuyDistributeSumSc': 0.0, 'LastBuyDistributeSum': 0.0, 'StockDistributesumForeign': 0.0, 'StockDistributesumSystem': 0.0, 'StockDistributesum': 0.0, 'StockInmPrice': 0.0, 'PickStatusEx': 'dlps_NotPicked', 'TaxBeforeDPM': 0.0, 'TaxBeforeDPMFC': 0.0, 'TaxBeforeDPMSC': 0.0, 'CFOPCode': None, 'CSTCode': None, 'Usage': None, 'TaxOnly': 'tNO', 'VisualOrder': 0, 'BaseOpenQuantity': 0.0, 'UnitPrice': 8.5, 'LineStatus': 'bost_Open', 'PackageQuantity': 1.0, 'Text': None, 'LineType': 'dlt_Regular', 'COGSCostingCode': 'ONL', 'COGSAccountCode': '50101001', 'ChangeAssemlyBoMWarehouse': 'N', 'GrossBuyPrice': 1000.0, 'GrossBase': -5, 'GrossProfitTotalBasePrice': 1000.0, 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'CostingCode4': None, 'CostingCode5': None, 'ItemDetails': None, 'LocationCode': None, 'ActualDeliveryDate': '2025-09-10', 'RemainingOpenQuantity': 1.0, 'OpenAmount': 8.5, 'OpenAmountFC': 0.0, 'OpenAmountSC': 8.5, 'ExLineNo': None, 'RequiredDate': None, 'RequiredQuantity': 0.0, 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'COGSCostingCode4': None, 'COGSCostingCode5': None, 'CSTforIPI': None, 'CSTforPIS': None, 'CSTforCOFINS': None, 'CreditOriginCode': None, 'WithoutInventoryMovement': 'tNO', 'AgreementNo': None, 'AgreementRowNumber': None, 'ActualBaseEntry': None, 'ActualBaseLine': None, 'DocEntry': 23147, 'Surpluses': 0.0, 'DefectAndBreakup': 0.0, 'Shortages': 0.0, 'ConsiderQuantity': 'tNO', 'PartialRetirement': 'tNO', 'RetirementQuantity': 0.0, 'RetirementAPC': 0.0, 'ThirdParty': 'tNO', 'ExpenseType': None, 'ReceiptNumber': None, 'ExpenseOperationType': None, 'FederalTaxID': None, 'GrossProfit': -991.5, 'GrossProfitFC': 0.0, 'GrossProfitSC': -991.5, 'PriceSource': 'dpsManual', 'StgSeqNum': None, 'StgEntry': None, 'StgDesc': None, 'UoMEntry': 1, 'UoMCode': 'Piece', 'InventoryQuantity': 1.0, 'RemainingOpenInventoryQuantity': 1.0, 'ParentLineNum': None, 'Incoterms': 0, 'TransportMode': 0, 'NatureOfTransaction': None, 'DestinationCountryForImport': None, 'DestinationRegionForImport': None, 'OriginCountryForExport': None, 'OriginRegionForExport': None, 'ItemType': 'dit_Item', 'ChangeInventoryQuantityIndependently': 'tNO', 'FreeOfChargeBP': 'tNO', 'SACEntry': None, 'HSNEntry': None, 'GrossPrice': 8.5, 'GrossTotal': 8.5, 'GrossTotalFC': 0.0, 'GrossTotalSC': 8.5, 'NCMCode': -1, 'ShipToCode': None, 'ShipToDescription': '', 'ExternalCalcTaxRate': 0.0, 'ExternalCalcTaxAmount': 0.0, 'ExternalCalcTaxAmountFC': 0.0, 'ExternalCalcTaxAmountSC': 0.0, 'StandardItemIdentification': None, 'CommodityClassification': None, 'U_I_DATE': None, 'U_I_Status': None, 'U_I_CUSTOMER': None, 'U_I_WAREHOUSE': None, 'U_I_RecieptNo': None, 'U_wrapping': 'Y', 'U_I_Rejected': 0.0, 'U_GiftCard': None, 'U_NileCode': None, 'U_ItemCost': None, 'U_TotalCost': None, 'U_Weight_GM': 0.0, 'LineTaxJurisdictions': [], 'ExportProcesses': [], 'EBooksDetails': [], 'DocumentLineAdditionalExpenses': [], 'WithholdingTaxLines': [], 'SerialNumbers': [], 'BatchNumbers': [], 'CCDNumbers': [], 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1.0, 'AllowNegativeQuantity': 'tNO', 'SerialAndBatchNumbersBaseLine': -1, 'BaseLineNumber': 0}]}], 'EWayBillDetails': {}, 'ElectronicProtocols': [], 'DocumentAdditionalExpenses': [{'ExpenseCode': 4, 'LineTotal': 80.0, 'LineTotalFC': 0.0, 'LineTotalSys': 80.0, 'PaidToDate': 0.0, 'PaidToDateFC': 0.0, 'PaidToDateSys': 0.0, 'Remarks': None, 'DistributionMethod': 'aedm_None', 'TaxLiable': 'tYES', 'VatGroup': 'X0', 'TaxPercent': 0.0, 'TaxSum': 0.0, 'TaxSumFC': 0.0, 'TaxSumSys': 0.0, 'DeductibleTaxSum': 0.0, 'DeductibleTaxSumFC': 0.0, 'DeductibleTaxSumSys': 0.0, 'AquisitionTax': 'tNO', 'TaxCode': None, 'TaxType': 'aext_NormalTax', 'TaxPaid': 0.0, 'TaxPaidFC': 0.0, 'TaxPaidSys': 0.0, 'EqualizationTaxPercent': 0.0, 'EqualizationTaxSum': 0.0, 'EqualizationTaxFC': 0.0, 'EqualizationTaxSys': 0.0, 'TaxTotalSum': 0.0, 'TaxTotalSumFC': 0.0, 'TaxTotalSumSys': 0.0, 'BaseDocEntry': -1, 'BaseDocLine': -1, 'BaseDocType': -1, 'BaseDocumentReference': None, 'LineNum': 0, 'LastPurchasePrice': None, 'Status': 'bost_Open', 'Stock': 'tNO', 'TargetAbsEntry': -1, 'TargetType': None, 'WTLiable': 'tNO', 'DistributionRule': 'ONL', 'Project': None, 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS', 'DistributionRule4': '', 'DistributionRule5': '', 'LineGross': 80.0, 'LineGrossSys': 80.0, 'LineGrossFC': 0.0, 'ExternalCalcTaxRate': 0.0, 'ExternalCalcTaxAmount': 0.0, 'ExternalCalcTaxAmountFC': 0.0, 'ExternalCalcTaxAmountSC': 0.0, 'U_GiftCard': None, 'DocExpenseTaxJurisdictions': [], 'DocFreightEBooksDetails': []}, {'ExpenseCode': 6, 'LineTotal': 120.0, 'LineTotalFC': 0.0, 'LineTotalSys': 120.0, 'PaidToDate': 0.0, 'PaidToDateFC': 0.0, 'PaidToDateSys': 0.0, 'Remarks': None, 'DistributionMethod': 'aedm_None', 'TaxLiable': 'tYES', 'VatGroup': 'X0', 'TaxPercent': 0.0, 'TaxSum': 0.0, 'TaxSumFC': 0.0, 'TaxSumSys': 0.0, 'DeductibleTaxSum': 0.0, 'DeductibleTaxSumFC': 0.0, 'DeductibleTaxSumSys': 0.0, 'AquisitionTax': 'tNO', 'TaxCode': None, 'TaxType': 'aext_NormalTax', 'TaxPaid': 0.0, 'TaxPaidFC': 0.0, 'TaxPaidSys': 0.0, 'EqualizationTaxPercent': 0.0, 'EqualizationTaxSum': 0.0, 'EqualizationTaxFC': 0.0, 'EqualizationTaxSys': 0.0, 'TaxTotalSum': 0.0, 'TaxTotalSumFC': 0.0, 'TaxTotalSumSys': 0.0, 'BaseDocEntry': -1, 'BaseDocLine': -1, 'BaseDocType': -1, 'BaseDocumentReference': None, 'LineNum': 1, 'LastPurchasePrice': None, 'Status': 'bost_Open', 'Stock': 'tNO', 'TargetAbsEntry': -1, 'TargetType': None, 'WTLiable': 'tNO', 'DistributionRule': 'ONL', 'Project': None, 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS', 'DistributionRule4': '', 'DistributionRule5': '', 'LineGross': 120.0, 'LineGrossSys': 120.0, 'LineGrossFC': 0.0, 'ExternalCalcTaxRate': 0.0, 'ExternalCalcTaxAmount': 0.0, 'ExternalCalcTaxAmountFC': 0.0, 'ExternalCalcTaxAmountSC': 0.0, 'U_GiftCard': None, 'DocExpenseTaxJurisdictions': [], 'DocFreightEBooksDetails': []}], 'WithholdingTaxDataWTXCollection': [], 'WithholdingTaxDataCollection': [], 'DocumentPackages': [], 'DocumentSpecialLines': [], 'DocumentInstallments': [{'DueDate': '2025-09-10', 'Percentage': 100.0, 'Total': 208.5, 'LastDunningDate': None, 'DunningLevel': 0, 'TotalFC': 0.0, 'InstallmentId': 1, 'PaymentOrdered': 'tNO'}], 'DownPaymentsToDraw': [], 'TaxExtension': {'TaxId0': None, 'TaxId1': None, 'TaxId2': None, 'TaxId3': None, 'TaxId4': None, 'TaxId5': None, 'TaxId6': None, 'TaxId7': None, 'TaxId8': None, 'TaxId9': None, 'State': None, 'County': None, 'Incoterms': None, 'Vehicle': None, 'VehicleState': None, 'NFRef': None, 'Carrier': None, 'PackQuantity': None, 'PackDescription': None, 'Brand': None, 'ShipUnitNo': None, 'NetWeight': 0.0, 'GrossWeight': 0.0, 'StreetS': None, 'BlockS': None, 'BuildingS': None, 'CityS': None, 'ZipCodeS': None, 'CountyS': None, 'StateS': None, 'CountryS': None, 'StreetB': None, 'BlockB': None, 'BuildingB': None, 'CityB': None, 'ZipCodeB': None, 'CountyB': None, 'StateB': None, 'CountryB': None, 'ImportOrExport': None, 'MainUsage': None, 'GlobalLocationNumberS': None, 'GlobalLocationNumberB': None, 'TaxId12': None, 'TaxId13': None, 'BillOfEntryNo': None, 'BillOfEntryDate': None, 'OriginalBillOfEntryNo': None, 'OriginalBillOfEntryDate': None, 'ImportOrExportType': 'et_IpmortsOrExports', 'PortCode': None, 'DocEntry': 23147, 'BoEValue': 0.0, 'ClaimRefund': None, 'DifferentialOfTaxRate': None, 'IsIGSTAccount': None}, 'AddressExtension': {'ShipToStreet': None, 'ShipToStreetNo': None, 'ShipToBlock': None, 'ShipToBuilding': None, 'ShipToCity': None, 'ShipToZipCode': None, 'ShipToCounty': None, 'ShipToState': None, 'ShipToCountry': None, 'ShipToAddressType': None, 'BillToStreet': None, 'BillToStreetNo': None, 'BillToBlock': None, 'BillToBuilding': None, 'BillToCity': None, 'BillToZipCode': None, 'BillToCounty': None, 'BillToState': None, 'BillToCountry': None, 'BillToAddressType': None, 'ShipToGlobalLocationNumber': None, 'BillToGlobalLocationNumber': None, 'ShipToAddress2': None, 'ShipToAddress3': None, 'BillToAddress2': None, 'BillToAddress3': None, 'PlaceOfSupply': None, 'PurchasePlaceOfSupply': None, 'DocEntry': 23147}, 'DocumentReferences': []}}
2025-09-13 21:42:46,780 - sync_service - ERROR - Failed to fetch invoice 23147: HTTP None
2025-09-13 21:42:46,785 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:42:46,946 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:42:46,953 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:42:46,970 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:42:46,987 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:42:47,720 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:42:47,721 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:42:47,726 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:42:47,732 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:43:27,802 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:43:27,803 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:43:27,833 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:43:27,833 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:43:27,834 - sync_service - INFO - Starting returns sync...
2025-09-13 21:43:27,834 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:43:27,835 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:43:27,835 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:43:27,835 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:43:27,836 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:43:28,531 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:43:28,533 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:43:28,535 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:43:28,536 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:43:28,537 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:43:29,449 - sync_service - INFO - SAP login successful
2025-09-13 21:43:31,586 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:43:32,683 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:43:32,684 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:43:32,685 - sync_service - INFO - Invoice 23147 is closed, attempting to reopen
2025-09-13 21:43:32,686 - sync_service - INFO - Attempting to reopen SAP invoice 23147
2025-09-13 21:43:35,329 - sync_service - INFO - API log added to SAP: sap - Invoices(23147)/Reopen - success
2025-09-13 21:43:35,331 - sync_service - INFO - Successfully reopened invoice 23147
2025-09-13 21:43:35,332 - sync_service - INFO - Successfully reopened invoice 23147
2025-09-13 21:43:35,334 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:43:35,334 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:43:35,335 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:43:37,805 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:43:37,807 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:43:37,808 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:43:37,810 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:43:37,812 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:43:37,813 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:43:37,815 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:43:37,816 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:43:38,363 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:43:38,366 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:43:38,367 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:43:38,368 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:53:57,443 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:53:57,446 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:53:57,510 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:53:57,512 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:53:57,516 - sync_service - INFO - Starting returns sync...
2025-09-13 21:53:57,518 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:53:57,518 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:53:57,519 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:53:57,519 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:53:57,521 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:54:07,555 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:54:08,548 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:54:10,288 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:54:10,289 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:54:10,291 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:54:11,305 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:54:11,306 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:54:11,941 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:54:11,942 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:54:11,943 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:54:11,944 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:54:11,945 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:54:13,339 - sync_service - INFO - SAP login successful
2025-09-13 21:54:18,221 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:54:18,223 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:54:18,224 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 21:54:18,227 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:54:18,229 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:54:18,232 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:54:18,232 - sync_service - INFO - Credit note body: {'CardCode': '', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'DiscountPercent': 15.0, 'U_ItemDiscountAmount': 1.5}]}
2025-09-13 21:54:21,618 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:54:21,620 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:54:21,620 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:54:21,620 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:54:21,621 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:54:21,622 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:54:21,623 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:54:21,624 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:54:31,639 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 21:54:33,275 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:54:33,277 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 21:54:33,280 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:54:34,297 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 21:54:34,299 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:54:34,842 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:54:34,853 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:54:34,893 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:54:34,898 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:55:07,639 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:55:07,643 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:55:07,782 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:55:07,784 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:55:07,786 - sync_service - INFO - Starting returns sync...
2025-09-13 21:55:07,790 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:55:07,792 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:55:07,794 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:55:07,796 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:55:07,799 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:55:17,877 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:55:18,940 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:55:20,655 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:55:20,658 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:55:20,662 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:55:21,679 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:55:21,682 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:55:22,417 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:55:22,421 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:55:22,426 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:55:22,429 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:55:22,433 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:55:23,455 - sync_service - INFO - SAP login successful
2025-09-13 21:55:26,389 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:55:26,398 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:55:26,400 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 21:55:26,401 - sync_service - INFO - Using CardCode: 
2025-09-13 21:55:26,408 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:55:26,413 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:55:26,415 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:55:26,420 - sync_service - INFO - Credit note body: {'CardCode': '', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'DiscountPercent': 15.0, 'U_ItemDiscountAmount': 1.5}]}
2025-09-13 21:55:29,785 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:55:29,792 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:55:29,796 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:55:29,803 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:55:29,806 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:55:29,808 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:55:29,812 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:55:29,816 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:55:30,412 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:55:30,415 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:55:30,417 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:55:30,418 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:55:52,597 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:55:52,600 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:55:52,652 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:55:52,654 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:55:52,656 - sync_service - INFO - Starting returns sync...
2025-09-13 21:55:52,657 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:55:52,658 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:55:52,658 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:55:52,660 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:55:52,661 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:55:53,276 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:55:53,280 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:55:53,282 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:55:53,283 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:55:53,284 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:55:54,276 - sync_service - INFO - SAP login successful
2025-09-13 21:55:56,964 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:55:59,081 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:55:59,086 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:55:59,089 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 21:55:59,092 - sync_service - INFO - Using CardCode: ''
2025-09-13 21:55:59,096 - sync_service - INFO - Fallback CardCode from data: ''
2025-09-13 21:55:59,098 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:55:59,099 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:55:59,101 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:55:59,105 - sync_service - INFO - Credit note body: {'CardCode': '', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'DiscountPercent': 15.0, 'U_ItemDiscountAmount': 1.5}]}
2025-09-13 21:56:01,768 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:56:01,772 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:56:01,775 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:56:01,778 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:56:01,782 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:56:01,784 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:56:01,787 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:56:01,791 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:56:02,316 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:56:02,321 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:56:02,325 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:56:02,329 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:56:33,177 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:56:33,180 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:56:33,279 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:56:33,282 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:56:33,285 - sync_service - INFO - Starting returns sync...
2025-09-13 21:56:33,304 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:56:33,309 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:56:33,311 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:56:33,313 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:56:33,315 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:56:43,392 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:56:44,377 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:56:45,771 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:56:45,775 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:56:45,779 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:56:46,794 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:56:46,797 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:56:47,578 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:56:47,583 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:56:47,587 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:56:47,589 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:56:47,593 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:56:48,583 - sync_service - INFO - SAP login successful
2025-09-13 21:56:51,566 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:56:51,572 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:56:51,575 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 21:56:51,578 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 21:56:51,582 - sync_service - INFO - Using CardCode: ''
2025-09-13 21:56:51,585 - sync_service - INFO - Fallback CardCode from data: ''
2025-09-13 21:56:51,589 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:56:51,592 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:56:51,595 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:56:51,599 - sync_service - INFO - Credit note body: {'CardCode': '', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'DiscountPercent': 15.0, 'U_ItemDiscountAmount': 1.5}]}
2025-09-13 21:56:54,294 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:56:54,298 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:56:54,301 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:56:54,305 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:56:54,306 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:56:54,307 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:56:54,308 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:56:54,310 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:57:04,352 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 21:57:05,803 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 21:57:05,806 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 21:57:05,807 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:57:06,811 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 21:57:06,814 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:57:07,316 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:57:07,318 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:57:07,319 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:57:07,320 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:59:03,851 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:59:03,855 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:59:03,929 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:59:03,931 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:59:03,932 - sync_service - INFO - Starting returns sync...
2025-09-13 21:59:03,933 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:59:03,935 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:59:03,936 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:59:03,937 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:59:03,940 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:59:13,985 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 21:59:15,427 - sync_service - INFO - SAP logging client login successful
2025-09-13 21:59:16,380 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 21:59:16,383 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 21:59:16,386 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 21:59:17,392 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 21:59:17,395 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:59:18,098 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:59:18,100 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:59:18,102 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:59:18,102 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:59:18,103 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:59:19,036 - sync_service - INFO - SAP login successful
2025-09-13 21:59:21,399 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 21:59:21,401 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 21:59:21,405 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 21:59:21,407 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 21:59:21,409 - sync_service - INFO - Invoice data keys: ['odata.metadata', 'DocEntry', 'DocNum', 'DocType', 'HandWritten', 'Printed', 'DocDate', 'DocDueDate', 'CardCode', 'CardName', 'Address', 'NumAtCard', 'DocTotal', 'AttachmentEntry', 'DocCurrency', 'DocRate', 'Reference1', 'Reference2', 'Comments', 'JournalMemo', 'PaymentGroupCode', 'DocTime', 'SalesPersonCode', 'TransportationCode', 'Confirmed', 'ImportFileNum', 'SummeryType', 'ContactPersonCode', 'ShowSCN', 'Series', 'TaxDate', 'PartialSupply', 'DocObjectCode', 'ShipToCode', 'Indicator', 'FederalTaxID', 'DiscountPercent', 'PaymentReference', 'CreationDate', 'UpdateDate', 'FinancialPeriod', 'TransNum', 'VatSum', 'VatSumSys', 'VatSumFc', 'NetProcedure', 'DocTotalFc', 'DocTotalSys', 'Form1099', 'Box1099', 'RevisionPo', 'RequriedDate', 'CancelDate', 'BlockDunning', 'Submitted', 'Segment', 'PickStatus', 'Pick', 'PaymentMethod', 'PaymentBlock', 'PaymentBlockEntry', 'CentralBankIndicator', 'MaximumCashDiscount', 'Reserve', 'Project', 'ExemptionValidityDateFrom', 'ExemptionValidityDateTo', 'WareHouseUpdateType', 'Rounding', 'ExternalCorrectedDocNum', 'InternalCorrectedDocNum', 'NextCorrectingDocument', 'DeferredTax', 'TaxExemptionLetterNum', 'WTApplied', 'WTAppliedFC', 'BillOfExchangeReserved', 'AgentCode', 'WTAppliedSC', 'TotalEqualizationTax', 'TotalEqualizationTaxFC', 'TotalEqualizationTaxSC', 'NumberOfInstallments', 'ApplyTaxOnFirstInstallment', 'WTNonSubjectAmount', 'WTNonSubjectAmountSC', 'WTNonSubjectAmountFC', 'WTExemptedAmount', 'WTExemptedAmountSC', 'WTExemptedAmountFC', 'BaseAmount', 'BaseAmountSC', 'BaseAmountFC', 'WTAmount', 'WTAmountSC', 'WTAmountFC', 'VatDate', 'DocumentsOwner', 'FolioPrefixString', 'FolioNumber', 'DocumentSubType', 'BPChannelCode', 'BPChannelContact', 'Address2', 'DocumentStatus', 'PeriodIndicator', 'PayToCode', 'ManualNumber', 'UseShpdGoodsAct', 'IsPayToBank', 'PayToBankCountry', 'PayToBankCode', 'PayToBankAccountNo', 'PayToBankBranch', 'BPL_IDAssignedToInvoice', 'DownPayment', 'ReserveInvoice', 'LanguageCode', 'TrackingNumber', 'PickRemark', 'ClosingDate', 'SequenceCode', 'SequenceSerial', 'SeriesString', 'SubSeriesString', 'SequenceModel', 'UseCorrectionVATGroup', 'TotalDiscount', 'DownPaymentAmount', 'DownPaymentPercentage', 'DownPaymentType', 'DownPaymentAmountSC', 'DownPaymentAmountFC', 'VatPercent', 'ServiceGrossProfitPercent', 'OpeningRemarks', 'ClosingRemarks', 'RoundingDiffAmount', 'RoundingDiffAmountFC', 'RoundingDiffAmountSC', 'Cancelled', 'SignatureInputMessage', 'SignatureDigest', 'CertificationNumber', 'PrivateKeyVersion', 'ControlAccount', 'InsuranceOperation347', 'ArchiveNonremovableSalesQuotation', 'GTSChecker', 'GTSPayee', 'ExtraMonth', 'ExtraDays', 'CashDiscountDateOffset', 'StartFrom', 'NTSApproved', 'ETaxWebSite', 'ETaxNumber', 'NTSApprovedNumber', 'EDocGenerationType', 'EDocSeries', 'EDocNum', 'EDocExportFormat', 'EDocStatus', 'EDocErrorCode', 'EDocErrorMessage', 'DownPaymentStatus', 'GroupSeries', 'GroupNumber', 'GroupHandWritten', 'ReopenOriginalDocument', 'ReopenManuallyClosedOrCanceledDocument', 'CreateOnlineQuotation', 'POSEquipmentNumber', 'POSManufacturerSerialNumber', 'POSCashierNumber', 'ApplyCurrentVATRatesForDownPaymentsToDraw', 'ClosingOption', 'SpecifiedClosingDate', 'OpenForLandedCosts', 'AuthorizationStatus', 'TotalDiscountFC', 'TotalDiscountSC', 'RelevantToGTS', 'BPLName', 'VATRegNum', 'AnnualInvoiceDeclarationReference', 'Supplier', 'Releaser', 'Receiver', 'BlanketAgreementNumber', 'IsAlteration', 'CancelStatus', 'AssetValueDate', 'InvoicePayment', 'DocumentDelivery', 'AuthorizationCode', 'StartDeliveryDate', 'StartDeliveryTime', 'EndDeliveryDate', 'EndDeliveryTime', 'VehiclePlate', 'ATDocumentType', 'ElecCommStatus', 'ElecCommMessage', 'ReuseDocumentNum', 'ReuseNotaFiscalNum', 'PrintSEPADirect', 'FiscalDocNum', 'POSDailySummaryNo', 'POSReceiptNo', 'PointOfIssueCode', 'Letter', 'FolioNumberFrom', 'FolioNumberTo', 'InterimType', 'RelatedType', 'RelatedEntry', 'SAPPassport', 'DocumentTaxID', 'DateOfReportingControlStatementVAT', 'ReportingSectionControlStatementVAT', 'ExcludeFromTaxReportControlStatementVAT', 'POS_CashRegister', 'UpdateTime', 'CreateQRCodeFrom', 'PriceMode', 'Revision', 'OriginalRefNo', 'OriginalRefDate', 'GSTTransactionType', 'OriginalCreditOrDebitNo', 'OriginalCreditOrDebitDate', 'ECommerceOperator', 'ECommerceGSTIN', 'ShipFrom', 'CommissionTrade', 'CommissionTradeReturn', 'UseBillToAddrToDetermineTax', 'IssuingReason', 'Cig', 'Cup', 'EDocType', 'PaidToDate', 'PaidToDateFC', 'PaidToDateSys', 'BaseType', 'BaseEntry', 'U_UI_Telephone', 'U_Photographers', 'U_Seen', 'U_Courier', 'U_IssueType', 'U_Location', 'U_Deliv', 'U_CustomerName', 'U_CustomerEmail', 'U_CutomerPhone', 'U_CustomerAddress', 'U_OrderType', 'U_wrapping', 'U_Pay_type', 'U_GRPOweight', 'U_GIReason', 'U_DiscountReason', 'U_Planned_Order', 'U_POS_Receipt_Number', 'U_SBO_DocVer', 'U_WHPaymentTerm', 'U_BillingAddress', 'U_DeliveryAddress', 'U_Shopify_Order_ID', 'Document_ApprovalRequests', 'DocumentLines', 'EWayBillDetails', 'ElectronicProtocols', 'DocumentAdditionalExpenses', 'WithholdingTaxDataWTXCollection', 'WithholdingTaxDataCollection', 'DocumentPackages', 'DocumentSpecialLines', 'DocumentInstallments', 'DownPaymentsToDraw', 'TaxExtension', 'AddressExtension', 'DocumentReferences']
2025-09-13 21:59:21,411 - sync_service - INFO - Invoice data card_code: 'NOT_FOUND'
2025-09-13 21:59:21,413 - sync_service - INFO - Using CardCode: ''
2025-09-13 21:59:21,414 - sync_service - INFO - Fallback CardCode from data: ''
2025-09-13 21:59:21,417 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 21:59:21,417 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 21:59:21,418 - sync_service - INFO - Creating SAP credit note
2025-09-13 21:59:21,419 - sync_service - INFO - Credit note body: {'CardCode': '', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'DiscountPercent': 15.0}]}
2025-09-13 21:59:23,903 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 21:59:23,906 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Customer record not found "\n      }\n   }\n}\n'}
2025-09-13 21:59:23,910 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Customer record not found "
      }
   }
}

2025-09-13 21:59:23,915 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 21:59:23,917 - sync_service - INFO - Processing returns for store: international
2025-09-13 21:59:23,918 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:59:23,919 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 21:59:23,919 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:59:24,476 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 21:59:24,480 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 21:59:24,482 - sync_service - INFO - No returned orders to process for store international
2025-09-13 21:59:24,483 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 21:59:55,568 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:59:55,569 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:59:55,652 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 21:59:55,655 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 21:59:55,657 - sync_service - INFO - Starting returns sync...
2025-09-13 21:59:55,658 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 21:59:55,659 - sync_service - INFO - Processing returns for store: local
2025-09-13 21:59:55,659 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 21:59:55,660 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 21:59:55,663 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 21:59:56,361 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 21:59:56,365 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 21:59:56,368 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 21:59:56,370 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 21:59:56,371 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 21:59:57,339 - sync_service - INFO - SAP login successful
2025-09-13 21:59:59,908 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:00:01,311 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:00:01,316 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:00:01,316 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:00:01,317 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:00:01,317 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:00:01,319 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:00:01,319 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:00:01,320 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:00:01,320 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:00:01,322 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:00:01,326 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': None, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0}]}
2025-09-13 22:00:04,157 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:00:04,162 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 404: {\n   "error" : {\n      "code" : -2028,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "Base Doc Missmatch "\n      }\n   }\n}\n'}
2025-09-13 22:00:04,166 - sync_service - ERROR - Failed to create credit note: HTTP 404: {
   "error" : {
      "code" : -2028,
      "message" : {
         "lang" : "en-us",
         "value" : "Base Doc Missmatch "
      }
   }
}

2025-09-13 22:00:04,168 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:00:04,172 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:00:04,174 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:00:04,175 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:00:04,176 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:00:04,708 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:00:04,714 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:00:04,715 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:00:04,716 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:00:37,837 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:00:37,841 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:00:37,950 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:00:37,953 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:00:37,954 - sync_service - INFO - Starting returns sync...
2025-09-13 22:00:37,955 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:00:37,956 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:00:37,958 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:00:37,959 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:00:37,960 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:00:47,992 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:00:48,967 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:00:49,898 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:00:49,901 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 22:00:49,902 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:00:50,904 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 22:00:50,906 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:00:51,513 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:00:51,514 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:00:51,517 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:00:51,518 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:00:51,518 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:00:52,753 - sync_service - INFO - SAP login successful
2025-09-13 22:00:54,794 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:00:54,797 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:00:54,799 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:00:54,800 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:00:54,803 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:00:54,804 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:00:54,805 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:00:54,806 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:00:54,807 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:00:54,807 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:00:54,809 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0}]}
2025-09-13 22:00:57,572 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:00:57,575 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -10,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "1470000341 - Fully allocate item \\"FG-0000714\\" to bin locations in warehouse \\"SW\\""\n      }\n   }\n}\n'}
2025-09-13 22:00:57,577 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1470000341 - Fully allocate item \"FG-0000714\" to bin locations in warehouse \"SW\""
      }
   }
}

2025-09-13 22:00:57,578 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:00:57,581 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:00:57,585 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:00:57,586 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:00:57,588 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:00:58,103 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:00:58,105 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:00:58,109 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:00:58,110 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:25:45,122 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:25:45,123 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:25:45,152 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:25:45,154 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:25:45,154 - sync_service - INFO - Starting returns sync...
2025-09-13 22:25:45,155 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:25:45,155 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:25:45,155 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:25:45,156 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:25:45,156 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:25:55,184 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:25:56,675 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:25:57,648 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:25:57,650 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 22:25:57,652 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:25:58,660 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 22:25:58,662 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:25:59,320 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:25:59,321 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:25:59,321 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:25:59,322 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:25:59,322 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:26:00,338 - sync_service - INFO - SAP login successful
2025-09-13 22:26:02,552 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:26:02,553 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:26:02,554 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:26:02,554 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:26:02,554 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:26:02,554 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:26:02,555 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:26:02,555 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:26:02,555 - sync_service - INFO - üì¶ No bin_location configured for this order location, skipping bin allocation for FG-0000714
2025-09-13 22:26:02,556 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:26:02,556 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:26:02,557 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0}]}
2025-09-13 22:26:05,148 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:26:05,149 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -10,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "1470000341 - Fully allocate item \\"FG-0000714\\" to bin locations in warehouse \\"SW\\""\n      }\n   }\n}\n'}
2025-09-13 22:26:05,150 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1470000341 - Fully allocate item \"FG-0000714\" to bin locations in warehouse \"SW\""
      }
   }
}

2025-09-13 22:26:05,151 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:26:05,152 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:26:05,153 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:26:05,154 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:26:05,154 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:26:15,171 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 22:26:16,148 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 22:26:16,149 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 22:26:16,150 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:26:17,158 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 22:26:17,158 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:26:17,698 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:26:17,698 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:26:17,699 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:26:17,701 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:26:31,972 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:26:31,972 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:26:31,998 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:26:32,000 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:26:32,001 - sync_service - INFO - Starting returns sync...
2025-09-13 22:26:32,001 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:26:32,002 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:26:32,003 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:26:32,003 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:26:32,004 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:26:42,025 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:26:43,225 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:26:44,598 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:26:44,600 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 22:26:44,602 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:26:45,615 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 22:26:45,617 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:26:46,202 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:26:46,203 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:26:46,204 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:26:46,204 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:26:46,205 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:26:47,572 - sync_service - INFO - SAP login successful
2025-09-13 22:26:49,938 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:26:49,940 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:26:49,941 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:26:49,942 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:26:49,943 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:26:49,945 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:26:49,946 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:26:49,947 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:26:49,949 - sync_service - INFO - üîç Location analysis for FG-0000714: {'source_name': 'web', 'source_identifier': None, 'extracted_location_id': None, 'extracted_receipt_number': None, 'location_mapping': {'warehouse': 'SW', 'location_cc': 'ONL', 'department_cc': 'SAL', 'activity_cc': 'OnlineS'}, 'sap_codes': {'COGSCostingCode': 'ONL', 'CostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'CostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode3': 'OnlineS', 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS', 'Warehouse': 'SW', 'ReceiptNumber': ''}, 'is_web_order': True, 'is_pos_order': False}
2025-09-13 22:26:49,950 - sync_service - INFO - üîç Location mapping for FG-0000714: {'warehouse': 'SW', 'location_cc': 'ONL', 'department_cc': 'SAL', 'activity_cc': 'OnlineS'}
2025-09-13 22:26:49,950 - sync_service - INFO - üì¶ No bin_location configured for this order location, skipping bin allocation for FG-0000714
2025-09-13 22:26:49,951 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:26:49,952 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:26:49,953 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0}]}
2025-09-13 22:26:51,954 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:26:51,955 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -10,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "1470000341 - Fully allocate item \\"FG-0000714\\" to bin locations in warehouse \\"SW\\""\n      }\n   }\n}\n'}
2025-09-13 22:26:51,955 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1470000341 - Fully allocate item \"FG-0000714\" to bin locations in warehouse \"SW\""
      }
   }
}

2025-09-13 22:26:51,956 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:26:51,956 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:26:51,957 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:26:51,958 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:26:51,959 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:26:52,475 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:26:52,475 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:26:52,475 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:26:52,476 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:31:49,985 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:31:49,986 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:31:50,007 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:31:50,008 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:31:50,008 - sync_service - INFO - Starting returns sync...
2025-09-13 22:31:50,010 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:31:50,012 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:31:50,012 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:31:50,013 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:31:50,014 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:31:50,719 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:31:50,720 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:31:50,720 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:31:50,721 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:31:50,721 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:31:51,758 - sync_service - INFO - SAP login successful
2025-09-13 22:31:54,373 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:31:55,490 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:31:55,491 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:31:55,491 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:31:55,491 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:31:55,491 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:31:55,491 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:31:55,492 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:31:55,492 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:31:55,493 - sync_service - INFO - üîç Location analysis for FG-0000714: {'source_name': 'web', 'source_identifier': None, 'extracted_location_id': None, 'extracted_receipt_number': None, 'location_mapping': {'warehouse': 'SW', 'location_cc': 'ONL', 'department_cc': 'SAL', 'activity_cc': 'OnlineS'}, 'sap_codes': {'COGSCostingCode': 'ONL', 'CostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'CostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode3': 'OnlineS', 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS', 'Warehouse': 'SW', 'ReceiptNumber': ''}, 'is_web_order': True, 'is_pos_order': False}
2025-09-13 22:31:55,494 - sync_service - INFO - üîç Location mapping for FG-0000714: {'warehouse': 'SW', 'location_cc': 'ONL', 'department_cc': 'SAL', 'activity_cc': 'OnlineS'}
2025-09-13 22:31:55,494 - sync_service - INFO - üì¶ No bin_location configured for this order location, skipping bin allocation for FG-0000714
2025-09-13 22:31:55,495 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:31:55,496 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:31:55,496 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0}]}
2025-09-13 22:31:57,822 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:31:57,822 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -10,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "1470000341 - Fully allocate item \\"FG-0000714\\" to bin locations in warehouse \\"SW\\""\n      }\n   }\n}\n'}
2025-09-13 22:31:57,822 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "1470000341 - Fully allocate item \"FG-0000714\" to bin locations in warehouse \"SW\""
      }
   }
}

2025-09-13 22:31:57,822 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:31:57,823 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:31:57,823 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:31:57,825 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:31:57,825 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:31:58,351 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:31:58,352 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:31:58,352 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:31:58,353 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:32:50,839 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:32:50,840 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:32:50,882 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:32:50,883 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:32:50,885 - sync_service - INFO - Starting returns sync...
2025-09-13 22:32:50,886 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:32:50,886 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:32:50,887 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:32:50,887 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:32:50,888 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:00,914 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:33:02,405 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:33:03,487 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:33:03,487 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 22:33:03,488 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:33:04,490 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 22:33:04,490 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:05,089 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:33:05,090 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:33:05,090 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:33:05,091 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:33:05,091 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:33:06,103 - sync_service - INFO - SAP login successful
2025-09-13 22:33:08,770 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:33:08,771 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:33:08,772 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:33:08,772 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:33:08,773 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:33:08,773 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:33:08,773 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:33:08,774 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:33:08,774 - sync_service - INFO - üì¶ Added bin allocation for FG-0000714: BinAbsEntry=24, Quantity=1
2025-09-13 22:33:08,775 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:33:08,776 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:33:08,777 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0, 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1}]}]}
2025-09-13 22:33:11,524 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:33:11,525 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -1116,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "(14008) Please Fill the Discount Reason"\n      }\n   }\n}\n'}
2025-09-13 22:33:11,525 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(14008) Please Fill the Discount Reason"
      }
   }
}

2025-09-13 22:33:11,526 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:33:11,527 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:33:11,527 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:33:11,527 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:33:11,528 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:21,545 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 22:33:22,439 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 22:33:22,452 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 22:33:22,453 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:33:23,469 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 22:33:23,470 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:23,987 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:33:23,988 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:33:23,988 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:33:23,989 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:33:25,439 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:33:25,439 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:33:25,455 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:33:25,455 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:33:25,456 - sync_service - INFO - Starting returns sync...
2025-09-13 22:33:25,456 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:33:25,456 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:33:25,457 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:33:25,457 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:33:25,457 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:26,123 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:33:26,124 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:33:26,125 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:33:26,125 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:33:26,126 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:33:27,472 - sync_service - INFO - SAP login successful
2025-09-13 22:33:29,905 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:33:30,993 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:33:30,997 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:33:31,000 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:33:31,002 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:33:31,005 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:33:31,005 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:33:31,006 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:33:31,007 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:33:31,008 - sync_service - INFO - üì¶ Added bin allocation for FG-0000714: BinAbsEntry=24, Quantity=1
2025-09-13 22:33:31,009 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:33:31,011 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:33:31,012 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0, 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1}]}]}
2025-09-13 22:33:33,382 - sync_service - INFO - API log added to SAP: sap - CreditNotes - failure
2025-09-13 22:33:33,385 - sync_service - ERROR - Failed to create credit note: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -1116,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "(14008) Please Fill the Discount Reason"\n      }\n   }\n}\n'}
2025-09-13 22:33:33,387 - sync_service - ERROR - Failed to create credit note: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(14008) Please Fill the Discount Reason"
      }
   }
}

2025-09-13 22:33:33,388 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:33:33,389 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:33:33,390 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:33:33,391 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:33:33,392 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:33:35,122 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:33:35,122 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:33:35,123 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:33:35,123 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-13 22:36:46,070 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:36:46,071 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:36:46,122 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:36:46,123 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:36:46,124 - sync_service - INFO - Starting returns sync...
2025-09-13 22:36:46,125 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:36:46,126 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:36:46,128 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:36:46,131 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:36:46,132 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:36:56,168 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:36:57,113 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:36:58,052 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:36:58,054 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-13 22:36:58,056 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:36:59,067 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-13 22:36:59,070 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:36:59,670 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:36:59,672 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:36:59,673 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:36:59,673 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:36:59,673 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:37:00,651 - sync_service - INFO - SAP login successful
2025-09-13 22:37:02,903 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:37:02,905 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:37:02,906 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:37:02,907 - sync_service - INFO - Invoice 23147 is already open, proceeding with mapping
2025-09-13 22:37:02,908 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-13 22:37:02,910 - sync_service - INFO - Invoice data card_code: 'C0021070'
2025-09-13 22:37:02,913 - sync_service - INFO - Using CardCode: 'C0021070'
2025-09-13 22:37:02,917 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-13 22:37:02,919 - sync_service - INFO - üì¶ Added bin allocation for FG-0000714: BinAbsEntry=24, Quantity=1
2025-09-13 22:37:02,921 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-13 22:37:02,923 - sync_service - INFO - Creating SAP credit note
2025-09-13 22:37:02,924 - sync_service - INFO - Credit note body: {'CardCode': 'C0021070', 'DocDate': '2025-09-13', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23147, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0, 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1}]}]}
2025-09-13 22:37:06,017 - sync_service - INFO - API log added to SAP: sap - CreditNotes - success
2025-09-13 22:37:06,021 - sync_service - INFO - Successfully created credit note with DocEntry: 1950
2025-09-13 22:37:06,022 - sync_service - INFO - Successfully created credit note 1950 for return order #1635
2025-09-13 22:37:06,023 - sync_service - INFO - Adding tags ['sap_return_synced', 'sap_return_1950'] to order gid://shopify/Order/6383666757698
2025-09-13 22:37:06,024 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    tags\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-13 22:37:16,017 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-13 22:37:17,258 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-13 22:37:17,259 - sync_service - ERROR - Failed to retrieve order gid://shopify/Order/6383666757698
2025-09-13 22:37:17,260 - sync_service - WARNING - Credit note created but failed to add tags to order #1635
2025-09-13 22:37:17,262 - sync_service - INFO - Returns sync completed for store local: 1 successful, 0 errors
2025-09-13 22:37:17,263 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:37:17,264 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:37:17,266 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:37:17,267 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:37:27,281 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 22:37:28,278 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 22:37:28,388 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 22:37:28,418 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:37:29,464 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 22:37:29,484 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:37:30,287 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:37:30,312 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:37:30,324 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:37:30,325 - sync_service - INFO - Returns sync completed: 1 successful, 0 errors
2025-09-13 22:39:01,588 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:39:01,589 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:39:01,622 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-13 22:39:01,623 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-13 22:39:01,623 - sync_service - INFO - Starting returns sync...
2025-09-13 22:39:01,624 - sync_service - INFO - Starting returns sync for all stores
2025-09-13 22:39:01,625 - sync_service - INFO - Processing returns for store: local
2025-09-13 22:39:01,625 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:39:01,626 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-13 22:39:01,627 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:39:02,236 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23147', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-13 22:39:02,238 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-13 22:39:02,239 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-13 22:39:02,240 - sync_service - INFO - Found invoice entry 23147 for order #1635
2025-09-13 22:39:02,240 - sync_service - INFO - Fetching SAP invoice 23147
2025-09-13 22:39:03,640 - sync_service - INFO - SAP login successful
2025-09-13 22:39:05,700 - sync_service - INFO - SAP logging client login successful
2025-09-13 22:39:07,192 - sync_service - INFO - API log added to SAP: sap - Invoices(23147) - success
2025-09-13 22:39:07,193 - sync_service - INFO - Successfully fetched invoice 23147
2025-09-13 22:39:07,193 - sync_service - INFO - Invoice data CardCode: 'C0021070'
2025-09-13 22:39:07,194 - sync_service - INFO - Invoice 23147 is closed, attempting to reopen
2025-09-13 22:39:07,196 - sync_service - INFO - Attempting to reopen SAP invoice 23147
2025-09-13 22:39:09,232 - sync_service - INFO - API log added to SAP: sap - Invoices(23147)/Reopen - failure
2025-09-13 22:39:09,233 - sync_service - ERROR - Failed to reopen invoice 23147: {'msg': 'failure', 'error': 'HTTP 400: {\n   "error" : {\n      "code" : -5006,\n      "message" : {\n         "lang" : "en-us",\n         "value" : "The requested action is not supported for this object."\n      }\n   }\n}\n'}
2025-09-13 22:39:09,233 - sync_service - ERROR - Failed to reopen invoice 23147
2025-09-13 22:39:09,234 - sync_service - INFO - Returns sync completed for store local: 0 successful, 1 errors
2025-09-13 22:39:09,235 - sync_service - INFO - Processing returns for store: international
2025-09-13 22:39:09,235 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-13 22:39:09,236 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-13 22:39:09,237 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:39:19,232 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-13 22:39:20,180 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-13 22:39:20,182 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-13 22:39:20,183 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-13 22:39:21,189 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-13 22:39:21,190 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-13 22:39:22,119 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-13 22:39:22,123 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-13 22:39:22,124 - sync_service - INFO - No returned orders to process for store international
2025-09-13 22:39:22,124 - sync_service - INFO - Returns sync completed: 0 successful, 1 errors
2025-09-14 11:52:13,128 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 11:52:13,128 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 11:52:13,191 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 11:52:13,192 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 11:52:13,197 - sync_service - INFO - Starting all syncs...
2025-09-14 11:52:13,199 - sync_service - INFO - Starting new items sync...
2025-09-14 11:52:13,200 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 11:52:13,201 - sync_service - INFO - Fetching new items for store: local
2025-09-14 11:52:14,040 - sync_service - INFO - SAP login successful
2025-09-14 11:52:15,620 - sync_service - INFO - SAP logging client login successful
2025-09-14 11:52:16,510 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 11:52:16,512 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 11:52:16,513 - sync_service - INFO - Fetching new items for store: international
2025-09-14 11:52:18,074 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 11:52:18,076 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 11:52:18,078 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 11:52:18,079 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 11:52:18,137 - sync_service - INFO - Starting stock change sync...
2025-09-14 11:52:18,138 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 11:52:18,139 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 11:52:20,119 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 11:52:20,121 - sync_service - INFO - No stock changes found for store local.
2025-09-14 11:52:20,123 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 11:52:21,896 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 11:52:21,898 - sync_service - INFO - No stock changes found for store international.
2025-09-14 11:52:21,898 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 11:52:21,899 - sync_service - INFO - Starting item changes sync...
2025-09-14 11:52:21,900 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 11:52:21,901 - sync_service - INFO - Processing item changes for store: local
2025-09-14 11:52:22,515 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 11:52:22,516 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 11:52:22,518 - sync_service - INFO - No item changes found for store local
2025-09-14 11:52:22,519 - sync_service - INFO - Processing item changes for store: international
2025-09-14 11:52:23,900 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 11:52:23,901 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 11:52:23,902 - sync_service - INFO - No item changes found for store international
2025-09-14 11:52:23,902 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 11:52:23,903 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 11:52:23,904 - sync_service - INFO - Starting price changes sync...
2025-09-14 11:52:23,904 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 11:52:23,904 - sync_service - INFO - Processing price changes for store: local
2025-09-14 11:52:25,438 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 11:52:25,442 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 11:52:25,443 - sync_service - INFO - No price changes found for store local
2025-09-14 11:52:25,444 - sync_service - INFO - Processing price changes for store: international
2025-09-14 11:52:26,787 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 11:52:26,789 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 11:52:26,791 - sync_service - INFO - No price changes found for store international
2025-09-14 11:52:26,791 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 11:52:26,792 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 11:52:26,793 - sync_service - INFO - Starting sales orders sync...
2025-09-14 11:52:26,794 - sync_service - INFO - Starting orders sync...
2025-09-14 11:52:26,795 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-14
2025-09-14 11:52:26,795 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-14'}}, 'response': None, 'status': None}
2025-09-14 11:52:27,525 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 11:52:27,527 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 11:52:27,528 - sync_service - INFO - No orders to process for store local
2025-09-14 11:52:27,538 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-14
2025-09-14 11:52:27,540 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-14'}}, 'response': None, 'status': None}
2025-09-14 11:52:28,097 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 11:52:28,101 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 11:52:28,102 - sync_service - INFO - No orders to process for store international
2025-09-14 11:52:28,103 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 11:52:28,104 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 11:52:28,105 - sync_service - INFO - Starting returns sync...
2025-09-14 11:52:28,106 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 11:52:28,113 - sync_service - INFO - Processing returns for store: local
2025-09-14 11:52:28,114 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-14 11:52:28,115 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 11:52:28,116 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-14 11:52:38,137 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 11:52:38,416 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 11:52:38,421 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-14 11:52:38,422 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-14 11:52:39,440 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-14 11:52:39,441 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-14 11:52:39,912 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 11:52:39,915 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 11:52:39,916 - sync_service - INFO - No returned orders to process for store local
2025-09-14 11:52:39,917 - sync_service - INFO - Processing returns for store: international
2025-09-14 11:52:39,917 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced
2025-09-14 11:52:39,917 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 11:52:39,918 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced'}}, 'response': None, 'status': None}
2025-09-14 11:52:40,371 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 11:52:40,372 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 11:52:40,374 - sync_service - INFO - No returned orders to process for store international
2025-09-14 11:52:40,375 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:00:02,917 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:00:02,917 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:00:02,969 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:00:02,970 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:00:02,974 - sync_service - INFO - Starting all syncs...
2025-09-14 12:00:02,975 - sync_service - INFO - Starting new items sync...
2025-09-14 12:00:02,975 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:00:02,976 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:00:03,735 - sync_service - INFO - SAP login successful
2025-09-14 12:00:05,316 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:00:06,035 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:00:06,036 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:00:06,037 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:00:07,465 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:00:07,467 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:00:07,468 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:00:07,469 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:00:07,470 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:00:07,471 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:00:07,471 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:00:08,895 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:00:08,898 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:00:08,900 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:00:10,336 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:00:10,337 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:00:10,338 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:00:10,339 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:00:10,340 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:00:10,340 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:00:10,873 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:00:10,875 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:00:10,880 - sync_service - INFO - No item changes found for store local
2025-09-14 12:00:10,881 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:00:12,172 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:00:12,174 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:00:12,175 - sync_service - INFO - No item changes found for store international
2025-09-14 12:00:12,176 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:00:12,176 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:00:12,177 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:00:12,177 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:00:12,178 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:00:13,555 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:00:13,557 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:00:13,558 - sync_service - INFO - No price changes found for store local
2025-09-14 12:00:13,559 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:00:14,940 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:00:14,944 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:00:14,945 - sync_service - INFO - No price changes found for store international
2025-09-14 12:00:14,946 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:00:14,946 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:00:14,947 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:00:14,948 - sync_service - INFO - Starting orders sync...
2025-09-14 12:00:14,949 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:00:14,950 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:00:15,683 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest'], 'shippingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}, {'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PENDING', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987999703106', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6383774761026', 'name': '#1639', 'createdAt': '2025-09-10T12:10:12Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': [{'node': {'targetType': 'LINE_ITEM', 'allocationMethod': 'ACROSS', 'value': {'__typename': 'MoneyV2', 'amount': '6200.0', 'currencyCode': 'EGP'}, 'code': 'Test discount'}}]}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988200243266', 'name': 'Iron Man Necklace - Red', 'quantity': 1, 'sku': 'FG-0000713', 'originalUnitPriceSet': {'shopMoney': {'amount': '6000.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '6000.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '6000.0', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Test discount'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42444515803202', 'sku': 'FG-0000713', 'price': '6000.00', 'compareAtPrice': '6000.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}, {'node': {'id': 'gid://shopify/LineItem/15988200276034', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [{'allocatedAmount': {'amount': '8.5', 'currencyCode': 'EGP'}, 'discountApplication': {'__typename': 'DiscountCodeApplication', 'code': 'Test discount'}}], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163536601154', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T12:09:20Z', 'receiptJson': '{"payment_id":"rTvKRR4pZ7GkxvrU7JK6wgRVo"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzc0NzYxMDI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA2MjEyMDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:00:15,685 - sync_service - INFO - Retrieved 5 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:00:15,685 - sync_service - INFO - Processing 5 orders from store local
2025-09-14 12:00:15,685 - sync_service - INFO - Processing order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-14 12:00:15,686 - sync_service - INFO - Processing order: #1635 | Payment: PARTIALLY_REFUNDED | Fulfillment: FULFILLED
2025-09-14 12:00:15,724 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 208.5
2025-09-14 12:00:15,726 - sync_service - INFO - üîë ONLINE PAYMENT ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-14 12:00:15,726 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-14 12:00:15,727 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-14 12:00:15,728 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-14 12:00:15,728 - sync_service - INFO - üìç SAP BILLING ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-14 12:00:16,143 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:00:16,690 - sync_service - INFO - Created customer in SAP: C0021079
2025-09-14 12:00:16,691 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:00:16,729 - sync_service - INFO - Using location-based costing codes for order #1635: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:00:16,731 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:00:16,732 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:00:16,732 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:00:17,887 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:19,017 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:19,019 - sync_service - INFO - Created invoice in SAP: 23157
2025-09-14 12:00:19,020 - sync_service - INFO - Created invoice data: {'DocEntry': 23157, 'DocNum': 200004169}
2025-09-14 12:00:19,020 - sync_service - INFO - Order #1635 is not paid (status: PARTIALLY_REFUNDED) - skipping payment creation
2025-09-14 12:00:27,881 - sync_service - INFO - Added tag 'sap_invoice_23157' to order gid://shopify/Order/6383666757698
2025-09-14 12:00:29,789 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383666757698
2025-09-14 12:00:29,792 - sync_service - INFO - Successfully processed order #1635
2025-09-14 12:00:29,793 - sync_service - INFO - ‚úÖ Processed order #1635 -> SAP Invoice: 23157
2025-09-14 12:00:29,794 - sync_service - INFO -    üîë Payment ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-14 12:00:29,795 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 208.5
2025-09-14 12:00:29,802 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Zayed
2025-09-14 12:00:29,803 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Zayed
2025-09-14 12:00:29,804 - sync_service - INFO - Processing order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 12:00:29,804 - sync_service - INFO - Processing order: #1636 | Payment: PENDING | Fulfillment: FULFILLED
2025-09-14 12:00:29,805 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-14 12:00:29,806 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-14 12:00:29,810 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-14 12:00:29,811 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-14 12:00:29,812 - sync_service - INFO - üìç SAP BILLING ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-14 12:00:29,813 - sync_service - INFO - Order #1636 is pending payment - will process anyway
2025-09-14 12:00:30,139 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:00:30,517 - sync_service - INFO - Created customer in SAP: C0021080
2025-09-14 12:00:30,518 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:00:30,519 - sync_service - INFO - Using location-based costing codes for order #1636: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:00:30,520 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:00:30,520 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:00:30,521 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:00:31,093 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:32,044 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:32,046 - sync_service - INFO - Created invoice in SAP: 23158
2025-09-14 12:00:32,047 - sync_service - INFO - Created invoice data: {'DocEntry': 23158, 'DocNum': 200004170}
2025-09-14 12:00:32,048 - sync_service - INFO - Order #1636 is not paid (status: PENDING) - skipping payment creation
2025-09-14 12:00:35,221 - sync_service - INFO - Added tag 'sap_invoice_23158' to order gid://shopify/Order/6383668494402
2025-09-14 12:00:36,992 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383668494402
2025-09-14 12:00:36,993 - sync_service - INFO - Successfully processed order #1636
2025-09-14 12:00:36,993 - sync_service - INFO - ‚úÖ Processed order #1636 -> SAP Invoice: 23158
2025-09-14 12:00:36,994 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-14 12:00:36,994 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Nasr City
2025-09-14 12:00:36,995 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Nasr City
2025-09-14 12:00:36,995 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:00:36,995 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:00:36,996 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:00:36,996 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:00:36,997 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:00:36,997 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:00:37,320 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:00:37,712 - sync_service - INFO - Created customer in SAP: C0021081
2025-09-14 12:00:37,713 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:00:37,714 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:00:37,714 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-14 12:00:37,715 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-14 12:00:37,716 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-14 12:00:37,717 - sync_service - INFO - üéÅ GIFT CARDS USED: 1 cards, Total Amount: 10.0
2025-09-14 12:00:37,717 - sync_service - INFO -    üéÅ Gift Card 1: cef5 - 10.0 EGP
2025-09-14 12:00:37,719 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-14 12:00:37,722 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-14 12:00:37,725 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-14 12:00:37,734 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-14 12:00:38,082 - sync_service - INFO - Found existing customer: C0021073
2025-09-14 12:00:38,082 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:00:38,082 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:00:38,084 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:00:38,085 - sync_service - INFO - üéÅ Processing 1 gift card redemption(s)
2025-09-14 12:00:38,085 - sync_service - INFO - üéÅ Created gift card expense: cef5 - Amount: -10.0
2025-09-14 12:00:38,086 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:00:38,661 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:38,664 - sync_service - INFO - Order 6383764930626 already exists in SAP with DocEntry: 23156
2025-09-14 12:00:38,665 - sync_service - INFO - Order #1638 already exists in SAP with DocEntry: 23156
2025-09-14 12:00:40,751 - sync_service - INFO - Added tag 'sap_invoice_23156' to order gid://shopify/Order/6383764930626
2025-09-14 12:00:42,488 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-14 12:00:42,490 - sync_service - ERROR - ‚ùå Failed to process order: None
2025-09-14 12:00:42,491 - sync_service - INFO - Processing order #1639 (ID: gid://shopify/Order/6383774761026)
2025-09-14 12:00:42,492 - sync_service - INFO - Processing order: #1639 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:00:42,492 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 200.0
2025-09-14 12:00:42,493 - sync_service - INFO - üîë ONLINE PAYMENT ID: rTvKRR4pZ7GkxvrU7JK6wgRVo
2025-09-14 12:00:42,494 - sync_service - INFO - üè∑Ô∏è ITEM-LEVEL DISCOUNTS: 3 items with discounts
2025-09-14 12:00:42,537 - sync_service - INFO -    üè∑Ô∏è Unknown Discount: 6200.0
2025-09-14 12:00:42,541 - sync_service - INFO -    üè∑Ô∏è Iron Man Necklace - Red: 6000.0 EGP (Unknown Discount)
2025-09-14 12:00:42,547 - sync_service - INFO -    üè∑Ô∏è Iron Man Necklace - Blue: 8.5 EGP (Unknown Discount)
2025-09-14 12:00:42,547 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | zayedddd | Zayed, Giza | +201001234561
2025-09-14 12:00:42,548 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: zayedddd, Zayed, Giza
Egypt
2025-09-14 12:00:42,549 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | zayedddd | Zayed, Giza | +201001234561
2025-09-14 12:00:42,549 - sync_service - INFO - üìç SAP BILLING ADDRESS: zayedddd, Zayed, Giza
Egypt
2025-09-14 12:00:42,868 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:00:43,263 - sync_service - INFO - Created customer in SAP: C0021082
2025-09-14 12:00:43,264 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000713', VariantSKU='fg-0000713', Name='iron man necklace - red'
2025-09-14 12:00:43,265 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:00:43,266 - sync_service - INFO - Using location-based costing codes for order #1639: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:00:43,267 - sync_service - INFO - üéØ Additional discount for FG-0000713: 6000.0, Total Discount: 100.0%
2025-09-14 12:00:43,267 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:00:43,268 - sync_service - INFO - üéØ Additional discount for FG-0000714: 8.5, Total Discount: 100.0%
2025-09-14 12:00:43,268 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:00:43,269 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:00:43,285 - sync_service - INFO - Added discount reason to invoice: Test discount
2025-09-14 12:00:43,863 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:45,285 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:00:45,287 - sync_service - INFO - Created invoice in SAP: 23159
2025-09-14 12:00:45,288 - sync_service - INFO - Created invoice data: {'DocEntry': 23159, 'DocNum': 200004171}
2025-09-14 12:00:45,289 - sync_service - INFO - Order #1639 is paid - creating incoming payment in SAP
2025-09-14 12:00:45,290 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-14 12:00:46,158 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 12:00:46,159 - sync_service - INFO - Created incoming payment in SAP: 22346
2025-09-14 12:00:46,160 - sync_service - INFO - Successfully created incoming payment: 22346
2025-09-14 12:00:53,754 - sync_service - INFO - Added tag 'sap_payment_22346' to order gid://shopify/Order/6383774761026
2025-09-14 12:00:56,009 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383774761026
2025-09-14 12:01:06,651 - sync_service - INFO - Added tag 'sap_invoice_23159' to order gid://shopify/Order/6383774761026
2025-09-14 12:01:08,602 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383774761026
2025-09-14 12:01:08,605 - sync_service - INFO - Successfully processed order #1639
2025-09-14 12:01:08,606 - sync_service - INFO - ‚úÖ Processed order #1639 -> SAP Invoice: 23159
2025-09-14 12:01:08,607 - sync_service - INFO -    üîë Payment ID: rTvKRR4pZ7GkxvrU7JK6wgRVo
2025-09-14 12:01:08,608 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 200.0
2025-09-14 12:01:08,609 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Zayed
2025-09-14 12:01:08,639 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Zayed
2025-09-14 12:01:08,643 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:01:08,644 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:01:09,325 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6972344696922', 'name': '#1018', 'createdAt': '2025-09-10T13:05:52Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8209671618650', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Jeddah', 'address2': None, 'city': 'Jeddah', 'province': None, 'zip': None, 'country': 'Saudi Arabia', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/19209839738970', 'name': 'Iron Man Necklace - Blue', 'quantity': 2, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'USD'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42279168606298', 'sku': 'FG-0000714', 'price': '0.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7582947377242', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/9109902524506', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'N-Genius Online by Network', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'USD'}}, 'processedAt': '2025-09-10T13:04:50Z', 'receiptJson': '{"payment_id":"r4dteh0dcZO9oZGnVUrgZ5LLo"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2OTcyMzQ0Njk2OTIyLCJsYXN0X3ZhbHVlIjoxNzU3NTA5NTUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:01:09,328 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:01:09,335 - sync_service - INFO - Processing 1 orders from store international
2025-09-14 12:01:09,338 - sync_service - INFO - Processing order #1018 (ID: gid://shopify/Order/6972344696922)
2025-09-14 12:01:09,340 - sync_service - INFO - Processing order: #1018 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:01:09,342 - sync_service - INFO - Payment Gateway: N-Genius Online by Network | Card Type: Unknown | Amount: 1.0
2025-09-14 12:01:09,344 - sync_service - INFO - üîë ONLINE PAYMENT ID: r4dteh0dcZO9oZGnVUrgZ5LLo
2025-09-14 12:01:09,344 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-14 12:01:09,349 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-14 12:01:09,352 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Jeddah | Jeddah, None | +201001234561
2025-09-14 12:01:09,355 - sync_service - INFO - üìç SAP BILLING ADDRESS: Jeddah, Jeddah, Saudi Arabia
2025-09-14 12:01:09,682 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:01:10,147 - sync_service - INFO - Created customer in SAP: C0021083
2025-09-14 12:01:10,151 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:01:10,153 - sync_service - INFO - Using location-based costing codes for order #1018: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:01:10,164 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:01:10,165 - sync_service - INFO - Applied DHL freight expense for international order: {'ExpenseCode': 1, 'LineTotal': 1.0}
2025-09-14 12:01:11,223 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:01:12,309 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:01:12,316 - sync_service - INFO - Created invoice in SAP: 23160
2025-09-14 12:01:12,317 - sync_service - INFO - Created invoice data: {'DocEntry': 23160, 'DocNum': 200004172}
2025-09-14 12:01:12,318 - sync_service - INFO - Order #1018 is paid - creating incoming payment in SAP
2025-09-14 12:01:12,319 - sync_service - INFO - International store payment - using N-Genius Online by Network account: 10801237
2025-09-14 12:01:13,287 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 12:01:13,288 - sync_service - INFO - Created incoming payment in SAP: 22347
2025-09-14 12:01:13,288 - sync_service - INFO - Successfully created incoming payment: 22347
2025-09-14 12:01:26,146 - sync_service - INFO - Added tag 'sap_payment_22347' to order gid://shopify/Order/6972344696922
2025-09-14 12:01:28,163 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6972344696922
2025-09-14 12:01:31,024 - sync_service - INFO - Added tag 'sap_invoice_23160' to order gid://shopify/Order/6972344696922
2025-09-14 12:01:43,668 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6972344696922
2025-09-14 12:01:43,670 - sync_service - INFO - Successfully processed order #1018
2025-09-14 12:01:43,671 - sync_service - INFO - ‚úÖ Processed order #1018 -> SAP Invoice: 23160
2025-09-14 12:01:43,672 - sync_service - INFO -    üîë Payment ID: r4dteh0dcZO9oZGnVUrgZ5LLo
2025-09-14 12:01:43,672 - sync_service - INFO -    üí≥ Gateway: N-Genius Online by Network | Amount: 1.0
2025-09-14 12:01:43,673 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Jeddah
2025-09-14 12:01:43,674 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Jeddah
2025-09-14 12:01:43,675 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 6, 'success_count': 4, 'error_count': 2, 'details': None}
2025-09-14 12:01:43,679 - sync_service - INFO - Orders sync completed. Processed: 6, Success: 4, Errors: 2
2025-09-14 12:01:43,680 - sync_service - INFO - Starting returns sync...
2025-09-14 12:01:43,704 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:01:43,706 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:01:43,707 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:01:43,708 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:01:43,708 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:01:44,540 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:01:44,588 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:01:44,592 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:01:44,593 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:01:44,594 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:01:44,596 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:01:44,597 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:01:45,373 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:01:45,374 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:01:45,374 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:01:45,374 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:09:57,851 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:09:57,851 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:09:57,911 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:09:57,912 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:09:57,915 - sync_service - INFO - Starting all syncs...
2025-09-14 12:09:57,916 - sync_service - INFO - Starting new items sync...
2025-09-14 12:09:57,917 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:09:57,918 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:09:58,933 - sync_service - INFO - SAP login successful
2025-09-14 12:10:00,321 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:10:01,104 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:10:01,105 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:10:01,106 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:10:02,620 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:10:02,629 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:10:02,630 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:10:02,630 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:10:02,631 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:10:02,632 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:10:02,632 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:10:03,997 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:10:03,999 - sync_service - INFO - Processing 2 inventory changes for store local
2025-09-14 12:10:04,000 - sync_service - INFO - Updating inventory for item FG-0000713 (variant 44545425932354) at location 68605345858
2025-09-14 12:10:04,001 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425932354', 'available': 153}, 'response': None, 'status': None}
2025-09-14 12:10:04,568 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425932354, 'location_id': 68605345858, 'available': 153, 'updated_at': '2025-09-14T12:10:04+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425932354'}}, 'status': 'success'}
2025-09-14 12:10:05,304 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:10:05,418 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44545425965122) at location 68605345858
2025-09-14 12:10:05,419 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425965122', 'available': 101}, 'response': None, 'status': None}
2025-09-14 12:10:05,983 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425965122, 'location_id': 68605345858, 'available': 101, 'updated_at': '2025-09-14T12:10:05+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425965122'}}, 'status': 'success'}
2025-09-14 12:10:06,917 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:10:07,028 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:10:07,557 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:10:07,558 - sync_service - INFO - Processing 2 inventory changes for store international
2025-09-14 12:10:07,559 - sync_service - INFO - Updating inventory for item FG-0000713 (variant 44376531664986) at location 73474179162
2025-09-14 12:10:07,559 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531664986', 'available': 153}, 'response': None, 'status': None}
2025-09-14 12:10:08,077 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531664986, 'location_id': 73474179162, 'available': 153, 'updated_at': '2025-09-14T12:10:07+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531664986'}}, 'status': 'success'}
2025-09-14 12:10:08,336 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:10:08,442 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44376531697754) at location 73474179162
2025-09-14 12:10:08,443 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531697754', 'available': 101}, 'response': None, 'status': None}
2025-09-14 12:10:08,969 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531697754, 'location_id': 73474179162, 'available': 101, 'updated_at': '2025-09-14T12:10:08+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531697754'}}, 'status': 'success'}
2025-09-14 12:10:09,698 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:10:09,810 - sync_service - INFO - Stock change sync completed: 4 processed, 4 successful, 0 errors
2025-09-14 12:10:09,812 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:10:09,814 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:10:09,815 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:10:11,208 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:10:11,209 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:10:11,210 - sync_service - INFO - No item changes found for store local
2025-09-14 12:10:11,210 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:10:12,208 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:10:12,235 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:10:12,238 - sync_service - INFO - No item changes found for store international
2025-09-14 12:10:12,239 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:10:12,239 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:10:12,241 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:10:12,252 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:10:12,254 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:10:13,268 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:10:13,269 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:10:13,270 - sync_service - INFO - No price changes found for store local
2025-09-14 12:10:13,271 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:10:14,173 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:10:14,175 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:10:14,176 - sync_service - INFO - No price changes found for store international
2025-09-14 12:10:14,177 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:10:14,178 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:10:14,178 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:10:14,180 - sync_service - INFO - Starting orders sync...
2025-09-14 12:10:14,181 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:10:14,181 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:10:14,910 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:10:14,913 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:10:14,915 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:10:14,915 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:10:14,916 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:10:14,944 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:10:14,947 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:10:14,956 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:10:14,958 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:10:15,295 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:10:15,663 - sync_service - INFO - Created customer in SAP: C0021084
2025-09-14 12:10:15,665 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:10:15,666 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:10:15,666 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:10:15,667 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:10:16,238 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:10:16,239 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:10:16,240 - sync_service - INFO - No orders to process for store international
2025-09-14 12:10:16,241 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:10:16,242 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:10:16,242 - sync_service - INFO - Starting returns sync...
2025-09-14 12:10:16,243 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:10:16,244 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:10:16,245 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:10:16,247 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:10:16,248 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:10:16,749 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:10:16,751 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:10:16,752 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:10:16,752 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:10:16,753 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:10:16,753 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:10:16,754 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:10:17,368 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:10:17,369 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:10:17,370 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:10:17,371 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:15:05,113 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:15:05,114 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:15:05,158 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:15:05,159 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:15:05,161 - sync_service - INFO - Starting all syncs...
2025-09-14 12:15:05,162 - sync_service - INFO - Starting new items sync...
2025-09-14 12:15:05,162 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:15:05,163 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:15:06,033 - sync_service - INFO - SAP login successful
2025-09-14 12:15:07,522 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:15:08,207 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:15:08,209 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:15:08,211 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:15:10,057 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:15:10,058 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:15:10,059 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:15:10,061 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:15:10,062 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:15:10,062 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:15:10,064 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:15:12,342 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:15:12,346 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:15:12,348 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:15:13,815 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:15:13,818 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:15:13,821 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:15:13,822 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:15:13,824 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:15:13,825 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:15:14,367 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:15:14,371 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:15:14,373 - sync_service - INFO - No item changes found for store local
2025-09-14 12:15:14,374 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:15:15,692 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:15:15,696 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:15:15,698 - sync_service - INFO - No item changes found for store international
2025-09-14 12:15:15,700 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:15:15,701 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:15:15,703 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:15:15,704 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:15:15,705 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:15:17,090 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:15:17,092 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:15:17,094 - sync_service - INFO - No price changes found for store local
2025-09-14 12:15:17,095 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:15:18,390 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:15:18,394 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:15:18,395 - sync_service - INFO - No price changes found for store international
2025-09-14 12:15:18,396 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:15:18,397 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:15:18,398 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:15:18,399 - sync_service - INFO - Starting orders sync...
2025-09-14 12:15:18,402 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:15:18,403 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:28,428 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:15:28,713 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:15:28,714 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:15:28,714 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:15:30,728 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:31,389 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:15:31,392 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:15:31,393 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:15:31,394 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:15:31,394 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:15:31,395 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:15:31,395 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:15:31,396 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:15:31,396 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:15:31,772 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:15:32,554 - sync_service - INFO - Created customer in SAP: C0021085
2025-09-14 12:15:32,555 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:15:32,556 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:15:32,556 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:15:32,557 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:33,165 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:15:33,165 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:15:33,166 - sync_service - INFO - No orders to process for store international
2025-09-14 12:15:33,166 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:15:33,166 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:15:33,167 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:15:33,168 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:15:33,169 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:33,679 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:15:33,680 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:15:33,680 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:15:33,682 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:34,296 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:15:34,297 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:15:34,299 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:15:34,299 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:15:34,300 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:15:34,302 - sync_service - INFO - Starting returns sync...
2025-09-14 12:15:34,302 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:15:34,304 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:15:34,305 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:15:34,305 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:15:34,305 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:34,806 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:15:34,807 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:15:34,810 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:15:34,811 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:15:34,811 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:15:34,811 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:15:34,813 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:15:35,346 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:15:35,348 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:15:35,350 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:15:35,351 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:16:30,419 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:16:30,421 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:16:30,482 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:16:30,483 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:16:30,487 - sync_service - INFO - Starting all syncs...
2025-09-14 12:16:30,489 - sync_service - INFO - Starting new items sync...
2025-09-14 12:16:30,491 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:16:30,492 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:16:31,167 - sync_service - INFO - SAP login successful
2025-09-14 12:16:32,556 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:16:33,199 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:16:33,200 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:16:33,202 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:16:34,606 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:16:34,608 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:16:34,610 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:16:34,611 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:16:34,611 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:16:34,612 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:16:34,612 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:16:35,894 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:16:35,897 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:16:35,898 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:16:37,273 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:16:37,275 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:16:37,277 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:16:37,278 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:16:37,278 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:16:37,279 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:16:37,808 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:16:37,809 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:16:37,810 - sync_service - INFO - No item changes found for store local
2025-09-14 12:16:37,810 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:16:39,146 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:16:39,149 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:16:39,150 - sync_service - INFO - No item changes found for store international
2025-09-14 12:16:39,153 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:16:39,154 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:16:39,155 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:16:39,157 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:16:39,158 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:16:40,651 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:16:40,657 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:16:40,658 - sync_service - INFO - No price changes found for store local
2025-09-14 12:16:40,660 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:16:42,082 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:16:42,083 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:16:42,084 - sync_service - INFO - No price changes found for store international
2025-09-14 12:16:42,085 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:16:42,086 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:16:42,086 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:16:42,086 - sync_service - INFO - Starting orders sync...
2025-09-14 12:16:42,088 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:16:42,088 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:52,107 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:16:52,380 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:16:52,381 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:16:52,382 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:16:54,400 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:54,992 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:16:54,994 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:16:54,995 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:16:54,996 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:16:54,996 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:16:54,997 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:16:54,997 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:16:54,998 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:16:54,998 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:16:55,328 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:16:56,110 - sync_service - INFO - Created customer in SAP: C0021086
2025-09-14 12:16:56,111 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:16:56,111 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:16:56,111 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:16:56,113 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:56,564 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:16:56,566 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:16:56,568 - sync_service - INFO - No orders to process for store international
2025-09-14 12:16:56,568 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:16:56,570 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:16:56,572 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:16:56,575 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:16:56,578 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:57,066 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:16:57,067 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:16:57,068 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:16:57,071 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:57,648 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:16:57,650 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:16:57,652 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:16:57,658 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:16:57,659 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:16:57,661 - sync_service - INFO - Starting returns sync...
2025-09-14 12:16:57,662 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:16:57,664 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:16:57,665 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:16:57,666 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:16:57,668 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:16:58,181 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:16:58,183 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:16:58,186 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:16:58,187 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:16:58,190 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:16:58,192 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:16:58,194 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:17:08,197 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 12:17:08,478 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 12:17:08,479 - sync_service - WARNING - GraphQL query attempt 1 failed for store international: GraphQL query error for store international: 
2025-09-14 12:17:08,481 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-14 12:17:09,490 - sync_service - INFO - GraphQL query attempt 2/3 for store international
2025-09-14 12:17:09,493 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:17:09,985 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:17:09,992 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:17:09,995 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:17:09,995 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:17:47,652 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:17:47,654 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:17:47,751 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:17:47,754 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:17:47,757 - sync_service - INFO - Starting all syncs...
2025-09-14 12:17:47,759 - sync_service - INFO - Starting new items sync...
2025-09-14 12:17:47,761 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:17:47,762 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:17:48,547 - sync_service - INFO - SAP login successful
2025-09-14 12:17:49,976 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:17:50,754 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:17:50,764 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:17:50,778 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:17:52,146 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:17:52,148 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:17:52,149 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:17:52,150 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:17:52,151 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:17:52,151 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:17:52,152 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:17:53,485 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:17:53,487 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:17:53,488 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:17:54,999 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:17:55,019 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:17:55,032 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:17:55,039 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:17:55,042 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:17:55,044 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:17:55,583 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:17:55,584 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:17:55,585 - sync_service - INFO - No item changes found for store local
2025-09-14 12:17:55,586 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:17:56,939 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:17:56,947 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:17:56,949 - sync_service - INFO - No item changes found for store international
2025-09-14 12:17:56,949 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:17:56,951 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:17:56,951 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:17:56,951 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:17:56,952 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:17:58,289 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:17:58,290 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:17:58,294 - sync_service - INFO - No price changes found for store local
2025-09-14 12:17:58,296 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:17:59,704 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:17:59,706 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:17:59,708 - sync_service - INFO - No price changes found for store international
2025-09-14 12:17:59,710 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:17:59,711 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:17:59,712 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:17:59,713 - sync_service - INFO - Starting orders sync...
2025-09-14 12:17:59,714 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:17:59,714 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:09,742 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:18:10,898 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:18:10,899 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:18:10,900 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:18:12,906 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:13,529 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:18:13,530 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:18:13,531 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:18:13,532 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:18:13,533 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:18:13,533 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:18:13,535 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:18:13,535 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:18:13,536 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:18:13,859 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:18:14,658 - sync_service - INFO - Created customer in SAP: C0021087
2025-09-14 12:18:14,659 - sync_service - INFO - üîç DEBUG: Starting gift card detection for order #1637
2025-09-14 12:18:14,660 - sync_service - ERROR - üîç DEBUG: Error in gift card processing for order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:18:14,663 - sync_service - ERROR - üîç DEBUG: Traceback: Traceback (most recent call last):
  File "C:\Users\morsi\OneDrive\Documents\Python Projects\Mashura\jude_shopify\app\sync\sales\orders_sync.py", line 1733, in process_order
    gift_card_purchases = self._detect_gift_card_purchases(order_node)
  File "C:\Users\morsi\OneDrive\Documents\Python Projects\Mashura\jude_shopify\app\sync\sales\orders_sync.py", line 626, in _detect_gift_card_purchases
    variant_sku = (item.get('variant', {}).get('sku') or '').lower()
AttributeError: 'NoneType' object has no attribute 'get'

2025-09-14 12:18:14,664 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:18:14,664 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:18:14,665 - sync_service - ERROR - Error mapping order to SAP format: 'NoneType' object has no attribute 'get'
2025-09-14 12:18:14,665 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:18:14,667 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:18:14,672 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:18:14,674 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:15,273 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:18:15,275 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:18:15,277 - sync_service - INFO - No orders to process for store international
2025-09-14 12:18:15,278 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:18:15,278 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:18:15,279 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:18:15,279 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:18:15,280 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:15,761 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:18:15,763 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:18:15,764 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:18:15,766 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'financial_status:paid AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:16,543 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:18:16,547 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:18:16,548 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:18:16,549 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:18:16,551 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:18:16,552 - sync_service - INFO - Starting returns sync...
2025-09-14 12:18:16,556 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:18:16,557 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:18:16,559 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:18:16,560 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:18:16,561 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:26,573 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:18:26,845 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:18:26,847 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-14 12:18:26,848 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-14 12:18:27,872 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-14 12:18:27,875 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:28,479 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:18:28,480 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:18:28,480 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:18:28,481 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:18:28,482 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:18:28,482 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:18:28,483 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:18:28,993 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:18:28,996 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:18:28,997 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:18:28,998 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:19:05,340 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:19:05,342 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:19:05,404 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:19:05,406 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:19:05,410 - sync_service - INFO - Starting all syncs...
2025-09-14 12:19:05,411 - sync_service - INFO - Starting new items sync...
2025-09-14 12:19:05,412 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:19:05,412 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:19:06,165 - sync_service - INFO - SAP login successful
2025-09-14 12:19:07,696 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:19:08,354 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:19:08,356 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:19:08,357 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:19:09,849 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:19:09,859 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:19:09,860 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:19:09,863 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:19:09,864 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:19:09,865 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:19:09,867 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:19:11,282 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:19:11,284 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:19:11,286 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:19:14,092 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:19:14,095 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:19:14,095 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:19:14,095 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:19:14,097 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:19:14,097 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:19:16,198 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:19:16,201 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:19:16,203 - sync_service - INFO - No item changes found for store local
2025-09-14 12:19:16,204 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:19:17,945 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:19:17,946 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:19:17,947 - sync_service - INFO - No item changes found for store international
2025-09-14 12:19:17,948 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:19:17,948 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:19:17,948 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:19:17,948 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:19:17,949 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:19:19,375 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:19:19,380 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:19:19,381 - sync_service - INFO - No price changes found for store local
2025-09-14 12:19:19,383 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:19:20,688 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:19:20,693 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:19:20,695 - sync_service - INFO - No price changes found for store international
2025-09-14 12:19:20,698 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:19:20,699 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:19:20,700 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:19:20,701 - sync_service - INFO - Starting orders sync...
2025-09-14 12:19:20,703 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:19:20,705 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:30,739 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:19:31,040 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:19:31,047 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:19:31,047 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:19:33,056 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:34,531 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:19:34,532 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:19:34,533 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:19:34,534 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:19:34,536 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:19:34,537 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:19:34,540 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:19:34,545 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:19:34,546 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:19:34,875 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:19:35,653 - sync_service - INFO - Created customer in SAP: C0021088
2025-09-14 12:19:35,654 - sync_service - INFO - üîç DEBUG: Starting gift card detection for order #1637
2025-09-14 12:19:35,656 - sync_service - INFO - Checking line item for gift card: SKU='sr-0000072', VariantSKU='', Name='gift card - 10 egp'
2025-09-14 12:19:35,657 - sync_service - ERROR - üîç DEBUG: Error in gift card processing for order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:19:35,662 - sync_service - ERROR - üîç DEBUG: Traceback: Traceback (most recent call last):
  File "C:\Users\morsi\OneDrive\Documents\Python Projects\Mashura\jude_shopify\app\sync\sales\orders_sync.py", line 1734, in process_order
    gift_card_purchases = self._detect_gift_card_purchases(order_node)
  File "C:\Users\morsi\OneDrive\Documents\Python Projects\Mashura\jude_shopify\app\sync\sales\orders_sync.py", line 666, in _detect_gift_card_purchases
    "variant_id": item.get("variant", {}).get("id", ""),
AttributeError: 'NoneType' object has no attribute 'get'

2025-09-14 12:19:35,664 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:19:35,666 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:19:35,666 - sync_service - ERROR - Error mapping order to SAP format: 'NoneType' object has no attribute 'get'
2025-09-14 12:19:35,669 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:19:35,674 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:19:35,680 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:19:35,681 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:36,195 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:19:36,197 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:19:36,197 - sync_service - INFO - No orders to process for store international
2025-09-14 12:19:36,199 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:19:36,200 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:19:36,203 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:19:36,203 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:19:36,205 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:36,719 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:19:36,723 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 12:19:36,728 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 12:19:36,730 - sync_service - INFO - Processing payment recovery for order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-14 12:19:36,731 - sync_service - INFO - Processing payment recovery for order: #1635 | Payment: PARTIALLY_REFUNDED | Fulfillment: FULFILLED
2025-09-14 12:19:36,731 - sync_service - ERROR - Error processing payment recovery for order #1635: 'list' object has no attribute 'split'
2025-09-14 12:19:38,118 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6383666757698
2025-09-14 12:19:38,122 - sync_service - ERROR - ‚ùå Payment recovery failed for order: 'list' object has no attribute 'split'
2025-09-14 12:19:38,125 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:48,147 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 12:19:48,434 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 12:19:48,446 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 12:19:48,448 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:19:50,442 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:51,366 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:19:51,399 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:19:51,406 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:19:51,409 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:19:51,411 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 12:19:51,533 - sync_service - INFO - Starting returns sync...
2025-09-14 12:19:51,547 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:19:51,561 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:19:51,681 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:19:51,682 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:19:51,692 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:52,347 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:19:52,348 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:19:52,353 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:19:52,356 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:19:52,356 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:19:52,359 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:19:52,359 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:19:53,046 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:19:53,077 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:19:53,079 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:19:53,080 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:25:59,490 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:25:59,493 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:25:59,542 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:25:59,544 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:25:59,546 - sync_service - INFO - Starting all syncs...
2025-09-14 12:25:59,547 - sync_service - INFO - Starting new items sync...
2025-09-14 12:25:59,547 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:25:59,548 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:26:00,372 - sync_service - INFO - SAP login successful
2025-09-14 12:26:01,759 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:26:02,524 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:26:02,525 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:26:02,527 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:26:04,162 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:26:04,167 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:26:04,168 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:26:04,170 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:26:04,172 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:26:04,173 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:26:04,177 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:26:05,669 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:26:05,670 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:26:05,671 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:26:07,132 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:26:07,135 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:26:07,136 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:26:07,137 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:26:07,138 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:26:07,138 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:26:07,706 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:26:07,709 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:26:07,710 - sync_service - INFO - No item changes found for store local
2025-09-14 12:26:07,711 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:26:09,010 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:26:09,013 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:26:09,014 - sync_service - INFO - No item changes found for store international
2025-09-14 12:26:09,014 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:26:09,016 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:26:09,016 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:26:09,016 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:26:09,018 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:26:10,410 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:26:10,412 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:26:10,414 - sync_service - INFO - No price changes found for store local
2025-09-14 12:26:10,415 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:26:11,767 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:26:11,768 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:26:11,770 - sync_service - INFO - No price changes found for store international
2025-09-14 12:26:11,771 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:26:11,771 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:26:11,772 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:26:11,773 - sync_service - INFO - Starting orders sync...
2025-09-14 12:26:11,775 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:26:11,779 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:26:12,461 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}, {'node': {'id': 'gid://shopify/Order/6383764930626', 'name': '#1638', 'createdAt': '2025-09-10T11:57:32Z', 'displayFinancialStatus': 'PARTIALLY_PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8148002799682', 'firstName': 'Mariam', 'lastName': 'Tarek', 'email': 'test@testest.com', 'phone': None, 'addresses': [{'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'billingAddress': {'address1': 'Heliopolis', 'address2': None, 'city': 'Heliopolis', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005557779', 'firstName': 'Mariam', 'lastName': 'Tarek', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988181893186', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163522871362', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'gift_card', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{"gift_card_id":550228426818,"gift_card_last_characters":"cef5"}'}, {'id': 'gid://shopify/OrderTransaction/8163522904130', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '118.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:57:31Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzY0OTMwNjI2LCJsYXN0X3ZhbHVlIjoxNzU3NTA1NDUyMDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:26:12,464 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:26:12,467 - sync_service - INFO - Processing 2 orders from store local
2025-09-14 12:26:12,467 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:26:12,468 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:26:12,469 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:26:12,470 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:26:12,471 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:26:12,472 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:26:12,801 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:26:13,188 - sync_service - INFO - Created customer in SAP: C0021089
2025-09-14 12:26:13,189 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:26:13,192 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:26:13,193 - sync_service - INFO - Processing order #1638 (ID: gid://shopify/Order/6383764930626)
2025-09-14 12:26:13,194 - sync_service - INFO - Processing order: #1638 | Payment: PARTIALLY_PAID | Fulfillment: FULFILLED
2025-09-14 12:26:13,195 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-14 12:26:13,199 - sync_service - INFO - üéÅ GIFT CARDS USED: 1 cards, Total Amount: 10.0
2025-09-14 12:26:13,201 - sync_service - INFO -    üéÅ Gift Card 1: cef5 - 10.0 EGP
2025-09-14 12:26:13,202 - sync_service - INFO - üìç SHIP TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-14 12:26:13,203 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-14 12:26:13,204 - sync_service - INFO - üìç BILL TO: Mariam Tarek | Heliopolis | Heliopolis, Cairo | 01005557779
2025-09-14 12:26:13,204 - sync_service - INFO - üìç SAP BILLING ADDRESS: Heliopolis, Heliopolis, Cairo
Egypt
2025-09-14 12:26:13,995 - sync_service - INFO - Found existing customer: C0021073
2025-09-14 12:26:13,997 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:26:13,999 - sync_service - INFO - Using location-based costing codes for order #1638: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:26:14,001 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:26:14,003 - sync_service - INFO - üéÅ Processing 1 gift card redemption(s)
2025-09-14 12:26:14,004 - sync_service - INFO - üéÅ Created gift card expense: cef5 - Amount: -10.0
2025-09-14 12:26:14,005 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:26:14,603 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:26:15,798 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:26:15,799 - sync_service - INFO - Created invoice in SAP: 23161
2025-09-14 12:26:15,801 - sync_service - INFO - Created invoice data: {'DocEntry': 23161, 'DocNum': 200004173}
2025-09-14 12:26:15,802 - sync_service - INFO - Order #1638 is not paid (status: PARTIALLY_PAID) - skipping payment creation
2025-09-14 12:26:24,642 - sync_service - INFO - Added tag 'sap_invoice_23161' to order gid://shopify/Order/6383764930626
2025-09-14 12:26:26,353 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383764930626
2025-09-14 12:26:26,358 - sync_service - INFO - Successfully processed order #1638
2025-09-14 12:26:26,360 - sync_service - INFO - ‚úÖ Processed order #1638 -> SAP Invoice: 23161
2025-09-14 12:26:26,362 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-14 12:26:26,365 - sync_service - INFO -    üìç Ship To: Mariam Tarek - Heliopolis
2025-09-14 12:26:26,365 - sync_service - INFO -    üìç Bill To: Mariam Tarek - Heliopolis
2025-09-14 12:26:26,367 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:26:26,368 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:26:26,996 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:26:26,998 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:26:27,000 - sync_service - INFO - No orders to process for store international
2025-09-14 12:26:27,001 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 1, 'error_count': 1, 'details': None}
2025-09-14 12:26:27,001 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 1, Errors: 1
2025-09-14 12:26:27,002 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:26:27,003 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:26:27,003 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:26:27,486 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:26:27,487 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:26:27,489 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:26:27,491 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:26:28,018 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:26:28,019 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:26:28,019 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:26:28,020 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:26:28,021 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:26:28,021 - sync_service - INFO - Starting returns sync...
2025-09-14 12:26:28,021 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:26:28,022 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:26:28,022 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:26:28,023 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:26:28,023 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:27:27,954 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:27:27,954 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:27:27,973 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:27:27,974 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:27:27,977 - sync_service - INFO - Starting all syncs...
2025-09-14 12:27:27,978 - sync_service - INFO - Starting new items sync...
2025-09-14 12:27:27,979 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:27:27,979 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:27:28,842 - sync_service - INFO - SAP login successful
2025-09-14 12:27:31,086 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:27:31,815 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:27:31,817 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:27:31,818 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:27:33,185 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:27:33,186 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:27:33,187 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:27:33,187 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:27:33,188 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:27:33,189 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:27:33,189 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:27:34,521 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:27:34,525 - sync_service - INFO - Processing 1 inventory changes for store local
2025-09-14 12:27:34,526 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44545425965122) at location 68605345858
2025-09-14 12:27:34,527 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425965122', 'available': 100}, 'response': None, 'status': None}
2025-09-14 12:27:46,154 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425965122, 'location_id': 68605345858, 'available': 100, 'updated_at': '2025-09-14T12:27:45+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425965122'}}, 'status': 'success'}
2025-09-14 12:27:46,972 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:27:47,079 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:27:48,099 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:27:48,101 - sync_service - INFO - Processing 1 inventory changes for store international
2025-09-14 12:27:48,101 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44376531697754) at location 73474179162
2025-09-14 12:27:48,101 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531697754', 'available': 100}, 'response': None, 'status': None}
2025-09-14 12:27:48,720 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531697754, 'location_id': 73474179162, 'available': 100, 'updated_at': '2025-09-14T12:27:48+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531697754'}}, 'status': 'success'}
2025-09-14 12:27:49,002 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:27:49,105 - sync_service - INFO - Stock change sync completed: 2 processed, 2 successful, 0 errors
2025-09-14 12:27:49,106 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:27:49,107 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:27:49,110 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:27:50,555 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:27:50,556 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:27:50,557 - sync_service - INFO - No item changes found for store local
2025-09-14 12:27:50,559 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:27:51,936 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:27:51,939 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:27:51,941 - sync_service - INFO - No item changes found for store international
2025-09-14 12:27:51,943 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:27:51,945 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:27:51,947 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:27:51,949 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:27:51,951 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:27:52,966 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:27:52,970 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:27:52,972 - sync_service - INFO - No price changes found for store local
2025-09-14 12:27:52,973 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:27:53,522 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:27:53,524 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:27:53,527 - sync_service - INFO - No price changes found for store international
2025-09-14 12:27:53,529 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:27:53,531 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:27:53,534 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:27:53,536 - sync_service - INFO - Starting orders sync...
2025-09-14 12:27:53,537 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:27:53,538 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:03,579 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:28:03,856 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:28:03,860 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:28:03,862 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:28:05,883 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:06,456 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:28:06,458 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:28:06,461 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:28:06,462 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:28:06,462 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:28:06,463 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:28:06,464 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:28:06,464 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:28:06,465 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:28:06,785 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:28:07,179 - sync_service - INFO - Created customer in SAP: C0021090
2025-09-14 12:28:07,180 - sync_service - ERROR - Error processing order #1637: 'NoneType' object has no attribute 'get'
2025-09-14 12:28:07,182 - sync_service - ERROR - ‚ùå Failed to process order: 'NoneType' object has no attribute 'get'
2025-09-14 12:28:07,183 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:28:07,185 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:07,762 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:28:07,764 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:28:07,767 - sync_service - INFO - No orders to process for store international
2025-09-14 12:28:07,769 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:28:07,770 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 12:28:07,772 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:28:07,773 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:28:07,774 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:08,373 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:28:08,373 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:28:08,376 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:28:08,378 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:08,835 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:28:08,836 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:28:08,837 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:28:08,837 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:28:08,838 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:28:08,838 - sync_service - INFO - Starting returns sync...
2025-09-14 12:28:08,839 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:28:08,839 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:28:08,840 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:28:08,840 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:28:08,840 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:09,400 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:28:09,402 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:28:09,404 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:28:09,406 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:28:09,407 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:28:09,413 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:28:09,415 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:28:09,891 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:28:09,893 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:28:09,896 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:28:09,897 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:30:14,897 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:30:14,898 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:30:14,946 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:30:14,946 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:30:14,956 - sync_service - INFO - Starting all syncs...
2025-09-14 12:30:14,959 - sync_service - INFO - Starting new items sync...
2025-09-14 12:30:14,960 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:30:14,960 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:30:15,689 - sync_service - INFO - SAP login successful
2025-09-14 12:30:17,130 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:30:17,816 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:30:17,817 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:30:17,818 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:30:19,344 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:30:19,347 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:30:19,349 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:30:19,351 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:30:19,352 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:30:19,354 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:30:19,354 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:30:20,811 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:30:20,817 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:30:20,820 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:30:22,176 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:30:22,179 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:30:22,181 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:30:22,182 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:30:22,183 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:30:22,183 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:30:23,329 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:30:23,332 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:30:23,334 - sync_service - INFO - No item changes found for store local
2025-09-14 12:30:23,335 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:30:25,388 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:30:25,393 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:30:25,394 - sync_service - INFO - No item changes found for store international
2025-09-14 12:30:25,396 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:30:25,397 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:30:25,399 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:30:25,400 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:30:25,401 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:30:26,712 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:30:26,714 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:30:26,717 - sync_service - INFO - No price changes found for store local
2025-09-14 12:30:26,719 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:30:28,094 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:30:28,096 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:30:28,097 - sync_service - INFO - No price changes found for store international
2025-09-14 12:30:28,099 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:30:28,100 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:30:28,101 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:30:28,104 - sync_service - INFO - Starting orders sync...
2025-09-14 12:30:28,105 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:30:28,106 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:30:38,130 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:30:38,403 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:30:38,404 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:30:38,405 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:30:40,427 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:30:41,056 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383762276418', 'name': '#1637', 'createdAt': '2025-09-10T11:53:39Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Karim', 'lastName': 'Wafik', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15988176224322', 'name': 'Gift Card - 10 EGP', 'quantity': 1, 'sku': 'SR-0000072', 'originalUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': None}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163517628482', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '10.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T11:52:41Z', 'receiptJson': '{"payment_id":"rnefzJK80RuCvWYDW9Wl0VHRh"}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNzYyMjc2NDE4LCJsYXN0X3ZhbHVlIjoxNzU3NTA1MjE5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:30:41,060 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:30:41,062 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:30:41,064 - sync_service - INFO - Processing order #1637 (ID: gid://shopify/Order/6383762276418)
2025-09-14 12:30:41,065 - sync_service - INFO - Processing order: #1637 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 12:30:41,069 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 10.0
2025-09-14 12:30:41,072 - sync_service - INFO - üîë ONLINE PAYMENT ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:30:41,074 - sync_service - INFO - üìç BILL TO: Karim Wafik | nasr city | nasr city, Cairo | +201001234561
2025-09-14 12:30:41,076 - sync_service - INFO - üìç SAP BILLING ADDRESS: nasr city, nasr city, Cairo
Egypt
2025-09-14 12:30:41,414 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:30:42,281 - sync_service - INFO - Created customer in SAP: C0021091
2025-09-14 12:30:42,282 - sync_service - INFO - Checking line item for gift card: SKU='sr-0000072', VariantSKU='', Name='gift card - 10 egp'
2025-09-14 12:30:42,284 - sync_service - INFO - Found 1 gift card purchase(s) in order #1637
2025-09-14 12:30:42,285 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getGiftCards($query: String!) {\n                giftCards(first: 50, query: $query) {\n                    edges {\n                        node {\n                            id   \n                            order {\n                                id\n                            }     \n                            initialValue {\n                                amount\n                                currencyCode\n                            }\n                            createdAt\n                            expiresOn\n                            customer {\n                                id\n                                email\n                            }\n                        }\n                    }\n                }\n            }\n            ', 'variables': {'query': 'createdAt:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:30:42,894 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'giftCards': {'edges': [{'node': {'id': 'gid://shopify/GiftCard/548952375362', 'order': {'id': 'gid://shopify/Order/6240098123842'}, 'initialValue': {'amount': '7000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-06-22T08:07:24Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7886642348098', 'email': 'luciamarigo.lm@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549003231298', 'order': {'id': 'gid://shopify/Order/6245259968578'}, 'initialValue': {'amount': '5000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-06-25T15:50:59Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7897452216386', 'email': 'heba7977@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549193678914', 'order': {'id': 'gid://shopify/Order/6269720854594'}, 'initialValue': {'amount': '3000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-07-09T08:23:39Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7848224915522', 'email': 'abeya99@yahoo.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549510152258', 'order': {'id': 'gid://shopify/Order/6314790420546'}, 'initialValue': {'amount': '3800.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-03T12:30:09Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549802475586', 'order': {'id': 'gid://shopify/Order/6347058708546'}, 'initialValue': {'amount': '100.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-21T11:43:24Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/549803065410', 'order': {'id': 'gid://shopify/Order/6347117658178'}, 'initialValue': {'amount': '1.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-21T12:42:51Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/8081546084418', 'email': None}}}, {'node': {'id': 'gid://shopify/GiftCard/549948358722', 'order': {'id': 'gid://shopify/Order/6350536704066'}, 'initialValue': {'amount': '5000.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-08-25T17:30:39Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/8087593484354', 'email': 'rejewa@hotmail.com'}}}, {'node': {'id': 'gid://shopify/GiftCard/550228426818', 'order': {'id': 'gid://shopify/Order/6383762276418'}, 'initialValue': {'amount': '10.0', 'currencyCode': 'EGP'}, 'createdAt': '2025-09-10T11:53:41Z', 'expiresOn': None, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'email': 'karimwafik.kw@gmail.com'}}}]}}, 'status': 'success'}
2025-09-14 12:30:42,895 - sync_service - INFO - Found 1 gift cards for order 6383762276418
2025-09-14 12:30:43,446 - sync_service - INFO - API log added to SAP: sap - GiftCards('550228426818') - success
2025-09-14 12:30:43,448 - sync_service - INFO - Gift card 550228426818 exists in SAP
2025-09-14 12:30:43,449 - sync_service - INFO - Gift card 550228426818 already exists in SAP, using existing record
2025-09-14 12:30:43,451 - sync_service - INFO - Successfully created 1 gift card(s) in SAP
2025-09-14 12:30:43,452 - sync_service - INFO - Using location-based costing codes for order #1637: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:30:43,455 - sync_service - INFO - Added U_GiftCard field to line item: 550228426818 for amount: 10.0
2025-09-14 12:30:43,456 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:30:44,033 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:30:44,926 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:30:44,928 - sync_service - INFO - Created invoice in SAP: 23162
2025-09-14 12:30:44,930 - sync_service - INFO - Created invoice data: {'DocEntry': 23162, 'DocNum': 200004174}
2025-09-14 12:30:44,931 - sync_service - INFO - Order #1637 is paid - creating incoming payment in SAP
2025-09-14 12:30:44,934 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-14 12:30:46,171 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 12:30:46,175 - sync_service - INFO - Created incoming payment in SAP: 22348
2025-09-14 12:30:46,176 - sync_service - INFO - Successfully created incoming payment: 22348
2025-09-14 12:30:53,452 - sync_service - INFO - Added tag 'sap_payment_22348' to order gid://shopify/Order/6383762276418
2025-09-14 12:30:55,292 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383762276418
2025-09-14 12:30:58,071 - sync_service - INFO - Added tag 'sap_invoice_23162' to order gid://shopify/Order/6383762276418
2025-09-14 12:31:10,956 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383762276418
2025-09-14 12:31:10,959 - sync_service - INFO - Successfully processed order #1637
2025-09-14 12:31:10,960 - sync_service - INFO - ‚úÖ Processed order #1637 -> SAP Invoice: 23162
2025-09-14 12:31:10,961 - sync_service - INFO -    üîë Payment ID: rnefzJK80RuCvWYDW9Wl0VHRh
2025-09-14 12:31:10,961 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 10.0
2025-09-14 12:31:10,961 - sync_service - INFO -    üìç Bill To: Karim Wafik - nasr city
2025-09-14 12:31:10,962 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:31:10,963 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:31:11,445 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:31:11,447 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:31:11,448 - sync_service - INFO - No orders to process for store international
2025-09-14 12:31:11,449 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 12:31:11,451 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 12:31:11,452 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:31:11,454 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:31:11,456 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:31:12,081 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:31:12,086 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 12:31:12,090 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 12:31:12,092 - sync_service - INFO - Processing payment recovery for order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-14 12:31:12,093 - sync_service - INFO - Processing payment recovery for order: #1635 | Payment: PARTIALLY_REFUNDED | Fulfillment: FULFILLED
2025-09-14 12:31:12,093 - sync_service - ERROR - Error processing payment recovery for order #1635: 'list' object has no attribute 'split'
2025-09-14 12:31:13,408 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6383666757698
2025-09-14 12:31:13,410 - sync_service - ERROR - ‚ùå Payment recovery failed for order: 'list' object has no attribute 'split'
2025-09-14 12:31:13,410 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:31:13,878 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:31:13,880 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:31:13,881 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:31:13,883 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 12:31:13,884 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 12:31:13,885 - sync_service - INFO - Starting returns sync...
2025-09-14 12:31:13,887 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:31:13,889 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:31:13,890 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:31:13,892 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:31:13,893 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:31:14,436 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:31:14,438 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:31:14,441 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:31:14,444 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:31:14,446 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:31:14,447 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:31:14,449 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:31:22,524 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:31:22,526 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:31:22,527 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:31:22,528 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:36:07,915 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:36:07,917 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:36:07,977 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:36:07,978 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:36:07,980 - sync_service - INFO - Starting all syncs...
2025-09-14 12:36:07,983 - sync_service - INFO - Starting new items sync...
2025-09-14 12:36:07,984 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:36:07,985 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:36:08,761 - sync_service - INFO - SAP login successful
2025-09-14 12:36:10,274 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:36:10,949 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:36:10,954 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:36:10,955 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:36:12,370 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:36:12,373 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:36:12,375 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:36:12,376 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:36:12,377 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:36:12,378 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:36:12,379 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:36:13,811 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:36:13,813 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:36:13,814 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:36:15,310 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:36:15,313 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:36:15,315 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:36:15,316 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:36:15,318 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:36:15,322 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:36:16,101 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:36:16,105 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:36:16,107 - sync_service - INFO - No item changes found for store local
2025-09-14 12:36:16,107 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:36:17,945 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:36:17,945 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:36:17,947 - sync_service - INFO - No item changes found for store international
2025-09-14 12:36:17,947 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:36:17,948 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:36:17,948 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:36:17,949 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:36:17,949 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:36:19,284 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:36:19,289 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:36:19,291 - sync_service - INFO - No price changes found for store local
2025-09-14 12:36:19,292 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:36:20,715 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:36:20,716 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:36:20,718 - sync_service - INFO - No price changes found for store international
2025-09-14 12:36:20,720 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:36:20,721 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:36:20,721 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:36:20,722 - sync_service - INFO - Starting orders sync...
2025-09-14 12:36:20,723 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:36:20,724 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:30,736 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:36:31,015 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:36:31,018 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:36:31,019 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:36:33,020 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:33,616 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:33,619 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:36:33,620 - sync_service - INFO - No orders to process for store local
2025-09-14 12:36:33,623 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:36:33,626 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:34,231 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:34,233 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:36:34,237 - sync_service - INFO - No orders to process for store international
2025-09-14 12:36:34,238 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:36:34,238 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 12:36:34,240 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:36:34,242 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:36:34,243 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:34,742 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:34,743 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:36:34,743 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:36:34,743 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:35,210 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:35,211 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:36:35,212 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:36:35,213 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:36:35,213 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:36:35,214 - sync_service - INFO - Starting returns sync...
2025-09-14 12:36:35,214 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:36:35,215 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:36:35,215 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:36:35,216 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:36:35,216 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:35,962 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:35,964 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:36:35,964 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:36:35,965 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:36:35,965 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:36:35,965 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:36:35,968 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:36:36,449 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:36:36,451 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:36:36,453 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:36:36,453 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:37:38,614 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:37:38,614 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:37:38,646 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:37:38,648 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:37:38,652 - sync_service - INFO - Starting all syncs...
2025-09-14 12:37:38,653 - sync_service - INFO - Starting new items sync...
2025-09-14 12:37:38,653 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:37:38,654 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:37:39,464 - sync_service - INFO - SAP login successful
2025-09-14 12:37:40,896 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:37:41,560 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:37:41,562 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:37:41,563 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:37:42,964 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:37:42,966 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:37:42,968 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:37:42,969 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:37:42,970 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:37:42,972 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:37:42,974 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:37:44,339 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:37:44,343 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:37:44,345 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:37:45,708 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:37:45,711 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:37:45,715 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:37:45,716 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:37:45,718 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:37:45,719 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:37:46,266 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:37:46,268 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:37:46,270 - sync_service - INFO - No item changes found for store local
2025-09-14 12:37:46,272 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:37:47,556 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:37:47,560 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:37:47,562 - sync_service - INFO - No item changes found for store international
2025-09-14 12:37:47,563 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:37:47,565 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:37:47,568 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:37:47,569 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:37:47,571 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:37:48,989 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:37:48,997 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:37:48,998 - sync_service - INFO - No price changes found for store local
2025-09-14 12:37:49,000 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:37:50,523 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:37:50,526 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:37:50,531 - sync_service - INFO - No price changes found for store international
2025-09-14 12:37:50,532 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:37:50,535 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:37:50,535 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:37:50,539 - sync_service - INFO - Starting orders sync...
2025-09-14 12:37:50,539 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:37:50,542 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:00,564 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:38:00,838 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:38:00,839 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:38:00,841 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:38:02,855 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:03,426 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:38:03,429 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:38:03,430 - sync_service - INFO - No orders to process for store local
2025-09-14 12:38:03,431 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:38:03,435 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:03,929 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:38:03,932 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:38:03,933 - sync_service - INFO - No orders to process for store international
2025-09-14 12:38:03,935 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:38:03,938 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 12:38:03,941 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:38:03,943 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:38:03,945 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:05,063 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:38:05,065 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 12:38:05,068 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 12:38:05,069 - sync_service - INFO - Processing payment recovery for order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-14 12:38:05,071 - sync_service - INFO - Processing payment recovery for order: #1635 | Payment: PARTIALLY_REFUNDED | Fulfillment: FULFILLED
2025-09-14 12:38:05,072 - sync_service - INFO - Found SAP invoice DocEntry: 23157 for order #1635
2025-09-14 12:38:05,609 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:38:05,612 - sync_service - INFO - Found SAP invoice DocEntry: 23157
2025-09-14 12:38:05,614 - sync_service - INFO - Found SAP invoice DocEntry: 23157 for order #1635
2025-09-14 12:38:06,283 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 12:38:06,287 - sync_service - INFO - Payment for order 6383666757698 already exists in SAP with DocEntry: 22342
2025-09-14 12:38:06,289 - sync_service - INFO - Payment for order #1635 already exists in SAP with DocEntry: 22342
2025-09-14 12:38:07,582 - sync_service - INFO - Added tag 'sap_payment_22342' to order gid://shopify/Order/6383666757698
2025-09-14 12:38:07,582 - sync_service - INFO - ‚è≠Ô∏è Skipped order #1635 - Payment already exists in SAP
2025-09-14 12:38:07,584 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:08,135 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:38:08,137 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:38:08,139 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:38:08,140 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:38:08,142 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 1, Errors: 0
2025-09-14 12:38:08,143 - sync_service - INFO - Starting returns sync...
2025-09-14 12:38:08,144 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:38:08,146 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:38:08,147 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:38:08,148 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:38:08,149 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:08,750 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:38:08,752 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:38:08,754 - sync_service - INFO - No returned orders to process for store local
2025-09-14 12:38:08,756 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:38:08,757 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:38:08,759 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:38:08,762 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:38:09,263 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:38:09,264 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:38:09,265 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:38:09,267 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 12:40:08,791 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:40:08,792 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:40:08,821 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:40:08,823 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:40:08,825 - sync_service - INFO - Starting all syncs...
2025-09-14 12:40:08,827 - sync_service - INFO - Starting new items sync...
2025-09-14 12:40:08,828 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:40:08,828 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:40:09,582 - sync_service - INFO - SAP login successful
2025-09-14 12:40:11,505 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:40:12,243 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:40:12,245 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:40:12,246 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:40:13,644 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:40:13,645 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:40:13,645 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:40:13,647 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:40:13,647 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:40:13,648 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:40:13,648 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:40:15,111 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:40:15,113 - sync_service - INFO - No stock changes found for store local.
2025-09-14 12:40:15,116 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:40:16,973 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:40:16,977 - sync_service - INFO - No stock changes found for store international.
2025-09-14 12:40:16,978 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:40:16,979 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:40:16,980 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:40:16,980 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:40:21,369 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:40:21,371 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:40:21,372 - sync_service - INFO - No item changes found for store local
2025-09-14 12:40:21,373 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:40:22,764 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:40:22,765 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:40:22,766 - sync_service - INFO - No item changes found for store international
2025-09-14 12:40:22,768 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:40:22,770 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:40:22,771 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:40:22,772 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:40:22,772 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:40:24,227 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:40:24,230 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:40:24,232 - sync_service - INFO - No price changes found for store local
2025-09-14 12:40:24,233 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:40:25,551 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:40:25,558 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:40:25,561 - sync_service - INFO - No price changes found for store international
2025-09-14 12:40:25,562 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:40:25,563 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:40:25,564 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:40:25,564 - sync_service - INFO - Starting orders sync...
2025-09-14 12:40:25,565 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:40:25,566 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:35,575 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:40:35,852 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:40:35,856 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:40:35,857 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:40:37,863 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:38,460 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:40:38,461 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:40:38,462 - sync_service - INFO - No orders to process for store local
2025-09-14 12:40:38,463 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:40:38,463 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:38,965 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:40:38,969 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:40:38,971 - sync_service - INFO - No orders to process for store international
2025-09-14 12:40:38,972 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:40:38,972 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 12:40:38,973 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:40:38,974 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:40:38,976 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:39,583 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:40:39,585 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:40:39,587 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:40:39,587 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:40,040 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:40:40,047 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:40:40,060 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:40:40,062 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:40:40,064 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:40:40,065 - sync_service - INFO - Starting returns sync...
2025-09-14 12:40:40,074 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:40:40,076 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:40:40,077 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:40:40,077 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:40:40,079 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:40,712 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:40:40,714 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:40:40,715 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-14 12:40:40,716 - sync_service - INFO - Found invoice entry 23157 for order #1635
2025-09-14 12:40:40,718 - sync_service - INFO - Fetching SAP invoice 23157
2025-09-14 12:40:41,414 - sync_service - INFO - SAP login successful
2025-09-14 12:40:42,556 - sync_service - INFO - API log added to SAP: sap - Invoices(23157) - success
2025-09-14 12:40:42,559 - sync_service - INFO - Successfully fetched invoice 23157
2025-09-14 12:40:42,561 - sync_service - INFO - Invoice data CardCode: 'C0021079'
2025-09-14 12:40:42,562 - sync_service - INFO - Invoice 23157 is already open, proceeding with mapping
2025-09-14 12:40:42,563 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-14 12:40:42,564 - sync_service - INFO - Invoice data card_code: 'C0021079'
2025-09-14 12:40:42,565 - sync_service - INFO - Using CardCode: 'C0021079'
2025-09-14 12:40:42,566 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:40:42,568 - sync_service - INFO - üì¶ Added bin allocation for FG-0000714: BinAbsEntry=24, Quantity=1
2025-09-14 12:40:42,569 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-14 12:40:42,571 - sync_service - INFO - Creating SAP credit note
2025-09-14 12:40:42,571 - sync_service - INFO - Credit note body: {'CardCode': 'C0021079', 'DocDate': '2025-09-14', 'Comments': 'Return for Shopify Order #1635', 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23157, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0, 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1}]}]}
2025-09-14 12:40:44,128 - sync_service - INFO - API log added to SAP: sap - CreditNotes - success
2025-09-14 12:40:44,131 - sync_service - INFO - Successfully created credit note with DocEntry: 1951
2025-09-14 12:40:44,132 - sync_service - INFO - Successfully created credit note 1951 for return order #1635
2025-09-14 12:40:44,133 - sync_service - INFO - Adding tags ['sap_return_synced', 'sap_return_1951'] to order gid://shopify/Order/6383666757698
2025-09-14 12:40:44,135 - sync_service - INFO - GraphQL query attempt 1/3 for retrieving order gid://shopify/Order/6383666757698
2025-09-14 12:40:44,136 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    tags\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-14 12:40:44,808 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'order': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced']}}, 'status': 'success'}
2025-09-14 12:40:44,811 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n                            mutation orderUpdate($input: OrderInput!) {\n                                orderUpdate(input: $input) {\n                                    order {\n                                        id\n                                        tags\n                                    }\n                                    userErrors {\n                                        field\n                                        message\n                                    }\n                                }\n                            }\n                            ', 'variables': {'input': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['sap_invoice_23157', 'returntest', 'sap_payment_synced', 'sap_payment_22342', 'salestest', 'sap_return_1951', 'sap_invoice_synced', 'sap_return_synced']}}}, 'response': None, 'status': None}
2025-09-14 12:40:45,421 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orderUpdate': {'order': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['returntest', 'salestest', 'sap_invoice_23157', 'sap_invoice_synced', 'sap_payment_22342', 'sap_payment_synced', 'sap_return_1951', 'sap_return_synced']}, 'userErrors': []}}, 'status': 'success'}
2025-09-14 12:40:45,422 - sync_service - INFO - Successfully added tags to order gid://shopify/Order/6383666757698
2025-09-14 12:40:45,423 - sync_service - INFO - ‚úÖ Successfully processed return order #1635 -> Credit Note 1951
2025-09-14 12:40:45,425 - sync_service - INFO - Returns sync completed for store local: 1 successful, 0 errors
2025-09-14 12:40:45,427 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:40:45,428 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:40:45,430 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:40:45,432 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:40:45,922 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:40:45,926 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:40:45,927 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:40:45,929 - sync_service - INFO - Returns sync completed: 1 successful, 0 errors
2025-09-14 12:50:36,958 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:50:36,960 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:50:37,028 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:50:37,032 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:50:37,035 - sync_service - INFO - Starting all syncs...
2025-09-14 12:50:37,036 - sync_service - INFO - Starting new items sync...
2025-09-14 12:50:37,037 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:50:37,038 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:50:37,920 - sync_service - INFO - SAP login successful
2025-09-14 12:50:41,118 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:51:26,409 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:51:26,410 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:51:26,428 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 12:51:26,429 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 12:51:26,431 - sync_service - INFO - Starting all syncs...
2025-09-14 12:51:26,432 - sync_service - INFO - Starting new items sync...
2025-09-14 12:51:26,432 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 12:51:26,433 - sync_service - INFO - Fetching new items for store: local
2025-09-14 12:51:27,166 - sync_service - INFO - SAP login successful
2025-09-14 12:51:28,627 - sync_service - INFO - SAP logging client login successful
2025-09-14 12:51:29,311 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:51:29,313 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 12:51:29,314 - sync_service - INFO - Fetching new items for store: international
2025-09-14 12:51:31,208 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:51:31,211 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 12:51:31,213 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:51:31,214 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:51:31,215 - sync_service - INFO - Starting stock change sync...
2025-09-14 12:51:31,216 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 12:51:31,217 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 12:51:34,161 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:51:34,162 - sync_service - INFO - Processing 1 inventory changes for store local
2025-09-14 12:51:34,162 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44545425965122) at location 68605345858
2025-09-14 12:51:34,163 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': {'location_id': '68605345858', 'inventory_item_id': '44545425965122', 'available': 101}, 'response': None, 'status': None}
2025-09-14 12:51:34,810 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_local', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44545425965122, 'location_id': 68605345858, 'available': 101, 'updated_at': '2025-09-14T12:51:34+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/103109591106?inventory_item_id=44545425965122'}}, 'status': 'success'}
2025-09-14 12:51:35,449 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:51:35,554 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 12:51:36,500 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:51:36,504 - sync_service - INFO - Processing 1 inventory changes for store international
2025-09-14 12:51:36,506 - sync_service - INFO - Updating inventory for item FG-0000714 (variant 44376531697754) at location 73474179162
2025-09-14 12:51:36,507 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': {'location_id': '73474179162', 'inventory_item_id': '44376531697754', 'available': 101}, 'response': None, 'status': None}
2025-09-14 12:51:37,028 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'rest_inventory_international', 'request': None, 'response': {'inventory_level': {'inventory_item_id': 44376531697754, 'location_id': 73474179162, 'available': 101, 'updated_at': '2025-09-14T12:51:36+03:00', 'admin_graphql_api_id': 'gid://shopify/InventoryLevel/107863834714?inventory_item_id=44376531697754'}}, 'status': 'success'}
2025-09-14 12:51:37,295 - sync_service - INFO - API log added to SAP: shopify - inventory_levels - success
2025-09-14 12:51:37,406 - sync_service - INFO - Stock change sync completed: 2 processed, 2 successful, 0 errors
2025-09-14 12:51:37,407 - sync_service - INFO - Starting item changes sync...
2025-09-14 12:51:37,408 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 12:51:37,408 - sync_service - INFO - Processing item changes for store: local
2025-09-14 12:51:38,674 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:51:38,675 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 12:51:38,677 - sync_service - INFO - No item changes found for store local
2025-09-14 12:51:38,677 - sync_service - INFO - Processing item changes for store: international
2025-09-14 12:51:39,940 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:51:39,944 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 12:51:39,946 - sync_service - INFO - No item changes found for store international
2025-09-14 12:51:39,947 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:51:39,948 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:51:39,950 - sync_service - INFO - Starting price changes sync...
2025-09-14 12:51:39,951 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 12:51:39,952 - sync_service - INFO - Processing price changes for store: local
2025-09-14 12:51:40,846 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 12:51:40,848 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 12:51:40,850 - sync_service - INFO - No price changes found for store local
2025-09-14 12:51:40,851 - sync_service - INFO - Processing price changes for store: international
2025-09-14 12:51:41,388 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 12:51:41,390 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 12:51:41,390 - sync_service - INFO - No price changes found for store international
2025-09-14 12:51:41,391 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:51:41,393 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 12:51:41,394 - sync_service - INFO - Starting sales orders sync...
2025-09-14 12:51:41,395 - sync_service - INFO - Starting orders sync...
2025-09-14 12:51:41,395 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:51:41,396 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:51:51,407 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:51:51,676 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:51:51,680 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 12:51:51,681 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 12:51:53,693 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:51:54,350 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest'], 'shippingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:51:54,351 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 12:51:54,352 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 12:51:54,353 - sync_service - INFO - Processing order #1635 (ID: gid://shopify/Order/6383666757698)
2025-09-14 12:51:54,354 - sync_service - INFO - Processing order: #1635 | Payment: PARTIALLY_REFUNDED | Fulfillment: FULFILLED
2025-09-14 12:51:54,355 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 208.5
2025-09-14 12:51:54,355 - sync_service - INFO - üîë ONLINE PAYMENT ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-14 12:51:54,356 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-14 12:51:54,357 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-14 12:51:54,357 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Zayed | Zayed, Giza | +201001234561
2025-09-14 12:51:54,358 - sync_service - INFO - üìç SAP BILLING ADDRESS: Zayed, Zayed, Giza
Egypt
2025-09-14 12:51:54,758 - sync_service - INFO - Creating new customer in SAP
2025-09-14 12:51:55,145 - sync_service - INFO - Created customer in SAP: C0021092
2025-09-14 12:51:55,146 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 12:51:55,147 - sync_service - INFO - Using location-based costing codes for order #1635: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 12:51:55,147 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:51:55,148 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 12:51:55,148 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 12:51:56,631 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:51:58,656 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 12:51:58,658 - sync_service - INFO - Created invoice in SAP: 23163
2025-09-14 12:51:58,661 - sync_service - INFO - Created invoice data: {'DocEntry': 23163, 'DocNum': 200004175}
2025-09-14 12:51:58,661 - sync_service - INFO - Order #1635 is PARTIALLY_REFUNDED - treating as PAID for payment processing (order was paid, then partially refunded)
2025-09-14 12:51:58,662 - sync_service - INFO - Local store payment - using Paymob account: 10801247
2025-09-14 12:51:59,790 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 12:51:59,793 - sync_service - INFO - Created incoming payment in SAP: 22349
2025-09-14 12:51:59,796 - sync_service - INFO - Successfully created incoming payment: 22349
2025-09-14 12:52:01,878 - sync_service - INFO - Added tag 'sap_payment_22349' to order gid://shopify/Order/6383666757698
2025-09-14 12:52:03,716 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6383666757698
2025-09-14 12:52:12,704 - sync_service - INFO - Added tag 'sap_invoice_23163' to order gid://shopify/Order/6383666757698
2025-09-14 12:52:14,431 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383666757698
2025-09-14 12:52:14,434 - sync_service - INFO - Successfully processed order #1635
2025-09-14 12:52:14,437 - sync_service - INFO - ‚úÖ Processed order #1635 -> SAP Invoice: 23163
2025-09-14 12:52:14,438 - sync_service - INFO -    üîë Payment ID: rMXJ9k2C4tnWEVMj3qlNciTC4
2025-09-14 12:52:14,439 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 208.5
2025-09-14 12:52:14,440 - sync_service - INFO -    üìç Ship To: Nermin Ahmed - Zayed
2025-09-14 12:52:14,440 - sync_service - INFO -    üìç Bill To: Nermin Ahmed - Zayed
2025-09-14 12:52:14,441 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 12:52:14,442 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:52:14,962 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:52:14,963 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 12:52:14,963 - sync_service - INFO - No orders to process for store international
2025-09-14 12:52:14,964 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 12:52:14,965 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 12:52:14,965 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:52:14,966 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 12:52:14,967 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:52:15,495 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:52:15,496 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 12:52:15,496 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 12:52:15,497 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:52:15,999 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:52:16,000 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 12:52:16,001 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 12:52:16,003 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 12:52:16,003 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 12:52:16,004 - sync_service - INFO - Starting returns sync...
2025-09-14 12:52:16,005 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 12:52:16,006 - sync_service - INFO - Processing returns for store: local
2025-09-14 12:52:16,007 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:52:16,007 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 12:52:16,009 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:52:16,590 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383666757698', 'name': '#1635', 'createdAt': '2025-09-10T09:41:39Z', 'displayFinancialStatus': 'PARTIALLY_REFUNDED', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['returntest', 'salestest', 'sap_invoice_23163', 'sap_invoice_synced', 'sap_payment_22349', 'sap_payment_synced'], 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987996164162', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163378266178', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '208.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:40:26Z', 'receiptJson': '{"payment_id":"rMXJ9k2C4tnWEVMj3qlNciTC4"}'}, {'id': 'gid://shopify/OrderTransaction/8165986631746', 'kind': 'REFUND', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T10:57:12Z', 'receiptJson': '{"account_id":133136450,"credit_operation_id":367919170}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY2NzU3Njk4LCJsYXN0X3ZhbHVlIjoxNzU3NDk3Mjk5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 12:52:16,591 - sync_service - INFO - ‚úÖ Retrieved 1 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 12:52:16,592 - sync_service - INFO - üîÑ Processing return order #1635
2025-09-14 12:52:16,593 - sync_service - INFO - Found invoice entry 23163 for order #1635
2025-09-14 12:52:16,593 - sync_service - INFO - Fetching SAP invoice 23163
2025-09-14 12:52:17,308 - sync_service - INFO - SAP login successful
2025-09-14 12:52:18,391 - sync_service - INFO - API log added to SAP: sap - Invoices(23163) - success
2025-09-14 12:52:18,396 - sync_service - INFO - Successfully fetched invoice 23163
2025-09-14 12:52:18,397 - sync_service - INFO - Invoice data CardCode: 'C0021092'
2025-09-14 12:52:18,399 - sync_service - INFO - Invoice 23163 is closed, attempting to reopen
2025-09-14 12:52:18,399 - sync_service - INFO - Attempting to reopen SAP invoice 23163
2025-09-14 12:52:19,563 - sync_service - INFO - API log added to SAP: sap - Invoices(23163)/Reopen - success
2025-09-14 12:52:19,564 - sync_service - INFO - Successfully reopened invoice 23163
2025-09-14 12:52:19,565 - sync_service - INFO - Successfully reopened invoice 23163
2025-09-14 12:52:19,566 - sync_service - INFO - Invoice data keys: ['success', 'data', 'card_code', 'document_status', 'document_lines']
2025-09-14 12:52:19,568 - sync_service - INFO - Invoice data card_code: 'C0021092'
2025-09-14 12:52:19,569 - sync_service - INFO - Using CardCode: 'C0021092'
2025-09-14 12:52:19,570 - sync_service - INFO - üéØ Return pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 12:52:19,572 - sync_service - INFO - üì¶ Added bin allocation for FG-0000714: BinAbsEntry=24, Quantity=1
2025-09-14 12:52:19,573 - sync_service - INFO - üìã Mapped return order #1635 to SAP credit note format with 1 line items
2025-09-14 12:52:19,574 - sync_service - INFO - Creating SAP credit note
2025-09-14 12:52:19,575 - sync_service - INFO - Credit note body: {'CardCode': 'C0021092', 'DocDate': '2025-09-14', 'Comments': 'Return for Shopify Order #1635', 'Series': 85, 'U_ShopifyOrderID': '6383666757698', 'DocumentLines': [{'ItemCode': 'FG-0000714', 'Quantity': 1, 'UnitPrice': 10.0, 'BaseEntry': 23163, 'BaseType': 13, 'BaseLine': 0, 'DiscountPercent': 15.0, 'DocumentLinesBinAllocations': [{'BinAbsEntry': 24, 'Quantity': 1}]}]}
2025-09-14 12:52:21,042 - sync_service - INFO - API log added to SAP: sap - CreditNotes - success
2025-09-14 12:52:21,044 - sync_service - INFO - Successfully created credit note with DocEntry: 1952
2025-09-14 12:52:21,046 - sync_service - INFO - Successfully created credit note 1952 for return order #1635
2025-09-14 12:52:21,046 - sync_service - INFO - Adding tags ['sap_return_synced', 'sap_return_1952'] to order gid://shopify/Order/6383666757698
2025-09-14 12:52:21,047 - sync_service - INFO - GraphQL query attempt 1/3 for retrieving order gid://shopify/Order/6383666757698
2025-09-14 12:52:21,048 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    tags\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-14 12:52:31,065 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 12:52:31,750 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 12:52:31,751 - sync_service - WARNING - GraphQL query attempt 1 failed for order gid://shopify/Order/6383666757698: GraphQL query error for store local: 
2025-09-14 12:52:31,752 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-14 12:52:32,754 - sync_service - INFO - GraphQL query attempt 2/3 for retrieving order gid://shopify/Order/6383666757698
2025-09-14 12:52:32,756 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrder($id: ID!) {\n                order(id: $id) {\n                    id\n                    tags\n                }\n            }\n            ', 'variables': {'id': 'gid://shopify/Order/6383666757698'}}, 'response': None, 'status': None}
2025-09-14 12:52:33,260 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'order': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['returntest', 'salestest', 'sap_invoice_23163', 'sap_invoice_synced', 'sap_payment_22349', 'sap_payment_synced']}}, 'status': 'success'}
2025-09-14 12:52:33,262 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n                            mutation orderUpdate($input: OrderInput!) {\n                                orderUpdate(input: $input) {\n                                    order {\n                                        id\n                                        tags\n                                    }\n                                    userErrors {\n                                        field\n                                        message\n                                    }\n                                }\n                            }\n                            ', 'variables': {'input': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['sap_return_synced', 'returntest', 'sap_invoice_23163', 'sap_payment_synced', 'sap_return_1952', 'sap_invoice_synced', 'salestest', 'sap_payment_22349']}}}, 'response': None, 'status': None}
2025-09-14 12:52:33,892 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orderUpdate': {'order': {'id': 'gid://shopify/Order/6383666757698', 'tags': ['returntest', 'salestest', 'sap_invoice_23163', 'sap_invoice_synced', 'sap_payment_22349', 'sap_payment_synced', 'sap_return_1952', 'sap_return_synced']}, 'userErrors': []}}, 'status': 'success'}
2025-09-14 12:52:33,894 - sync_service - INFO - Successfully added tags to order gid://shopify/Order/6383666757698
2025-09-14 12:52:33,895 - sync_service - INFO - ‚úÖ Successfully processed return order #1635 -> Credit Note 1952
2025-09-14 12:52:33,895 - sync_service - INFO - Returns sync completed for store local: 1 successful, 0 errors
2025-09-14 12:52:33,896 - sync_service - INFO - Processing returns for store: international
2025-09-14 12:52:33,896 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 12:52:33,897 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 12:52:33,897 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 12:52:34,489 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 12:52:34,490 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 12:52:34,491 - sync_service - INFO - No returned orders to process for store international
2025-09-14 12:52:34,492 - sync_service - INFO - Returns sync completed: 1 successful, 0 errors
2025-09-14 13:01:15,502 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 13:01:15,503 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 13:01:15,531 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 13:01:15,531 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 13:01:15,533 - sync_service - INFO - Starting all syncs...
2025-09-14 13:01:15,533 - sync_service - INFO - Starting new items sync...
2025-09-14 13:01:15,534 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 13:01:15,534 - sync_service - INFO - Fetching new items for store: local
2025-09-14 13:01:16,271 - sync_service - INFO - SAP login successful
2025-09-14 13:01:17,655 - sync_service - INFO - SAP logging client login successful
2025-09-14 13:01:18,347 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 13:01:18,348 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 13:01:18,348 - sync_service - INFO - Fetching new items for store: international
2025-09-14 13:01:19,712 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 13:01:19,716 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 13:01:19,719 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 13:01:19,720 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 13:01:19,721 - sync_service - INFO - Starting stock change sync...
2025-09-14 13:01:19,722 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 13:01:19,722 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 13:01:21,113 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 13:01:21,114 - sync_service - INFO - No stock changes found for store local.
2025-09-14 13:01:21,115 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 13:01:22,769 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 13:01:22,772 - sync_service - INFO - No stock changes found for store international.
2025-09-14 13:01:22,774 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 13:01:22,775 - sync_service - INFO - Starting item changes sync...
2025-09-14 13:01:22,776 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 13:01:22,779 - sync_service - INFO - Processing item changes for store: local
2025-09-14 13:01:23,809 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 13:01:23,809 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 13:01:23,810 - sync_service - INFO - No item changes found for store local
2025-09-14 13:01:23,810 - sync_service - INFO - Processing item changes for store: international
2025-09-14 13:01:25,375 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 13:01:25,376 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 13:01:25,376 - sync_service - INFO - No item changes found for store international
2025-09-14 13:01:25,377 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 13:01:25,378 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 13:01:25,378 - sync_service - INFO - Starting price changes sync...
2025-09-14 13:01:25,379 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 13:01:25,379 - sync_service - INFO - Processing price changes for store: local
2025-09-14 13:01:26,819 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 13:01:26,820 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 13:01:26,821 - sync_service - INFO - No price changes found for store local
2025-09-14 13:01:26,821 - sync_service - INFO - Processing price changes for store: international
2025-09-14 13:01:28,183 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 13:01:28,183 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 13:01:28,184 - sync_service - INFO - No price changes found for store international
2025-09-14 13:01:28,184 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 13:01:28,185 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 13:01:28,185 - sync_service - INFO - Starting sales orders sync...
2025-09-14 13:01:28,186 - sync_service - INFO - Starting orders sync...
2025-09-14 13:01:28,186 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 13:01:28,186 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:38,209 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 13:01:38,466 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 13:01:38,466 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 13:01:38,467 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 13:01:40,474 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:50,472 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 13:01:51,423 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 13:01:51,424 - sync_service - WARNING - GraphQL attempt 2/3 failed: GraphQL query error for store local: 
2025-09-14 13:01:51,425 - sync_service - INFO - Retrying in 4 seconds...
2025-09-14 13:01:55,433 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:55,941 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:55,942 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 13:01:55,943 - sync_service - INFO - No orders to process for store local
2025-09-14 13:01:55,943 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 13:01:55,944 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:56,452 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:56,452 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 13:01:56,453 - sync_service - INFO - No orders to process for store international
2025-09-14 13:01:56,453 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 13:01:56,454 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 13:01:56,456 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 13:01:56,458 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 13:01:56,459 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:56,940 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:56,941 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 13:01:56,942 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 13:01:56,942 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:57,399 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:57,399 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 13:01:57,400 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 13:01:57,400 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 13:01:57,401 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 13:01:57,401 - sync_service - INFO - Starting returns sync...
2025-09-14 13:01:57,401 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 13:01:57,402 - sync_service - INFO - Processing returns for store: local
2025-09-14 13:01:57,402 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 13:01:57,402 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 13:01:57,403 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:57,908 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:57,909 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 13:01:57,909 - sync_service - INFO - No returned orders to process for store local
2025-09-14 13:01:57,910 - sync_service - INFO - Processing returns for store: international
2025-09-14 13:01:57,910 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 13:01:57,910 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 13:01:57,910 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 13:01:58,428 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 13:01:58,429 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 13:01:58,429 - sync_service - INFO - No returned orders to process for store international
2025-09-14 13:01:58,430 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 14:27:44,057 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 14:27:44,058 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 14:27:44,141 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 14:27:44,144 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 14:27:44,147 - sync_service - INFO - Starting all syncs...
2025-09-14 14:27:44,148 - sync_service - INFO - Starting new items sync...
2025-09-14 14:27:44,148 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 14:27:44,149 - sync_service - INFO - Fetching new items for store: local
2025-09-14 14:27:44,964 - sync_service - INFO - SAP login successful
2025-09-14 14:27:46,394 - sync_service - INFO - SAP logging client login successful
2025-09-14 14:27:47,089 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 14:27:47,091 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 14:27:47,092 - sync_service - INFO - Fetching new items for store: international
2025-09-14 14:27:48,464 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 14:27:48,466 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 14:27:48,467 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 14:27:48,479 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 14:27:48,480 - sync_service - INFO - Starting stock change sync...
2025-09-14 14:27:48,481 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 14:27:48,481 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 14:27:50,828 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 14:27:50,829 - sync_service - INFO - No stock changes found for store local.
2025-09-14 14:27:50,830 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 14:27:52,564 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 14:27:52,566 - sync_service - INFO - No stock changes found for store international.
2025-09-14 14:27:52,567 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 14:27:52,568 - sync_service - INFO - Starting item changes sync...
2025-09-14 14:27:52,570 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 14:27:52,571 - sync_service - INFO - Processing item changes for store: local
2025-09-14 14:27:53,115 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 14:27:53,116 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 14:27:53,117 - sync_service - INFO - No item changes found for store local
2025-09-14 14:27:53,118 - sync_service - INFO - Processing item changes for store: international
2025-09-14 14:27:54,399 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 14:27:54,401 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 14:27:54,402 - sync_service - INFO - No item changes found for store international
2025-09-14 14:27:54,403 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 14:27:54,404 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 14:27:54,405 - sync_service - INFO - Starting price changes sync...
2025-09-14 14:27:54,406 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 14:27:54,407 - sync_service - INFO - Processing price changes for store: local
2025-09-14 14:27:55,760 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 14:27:55,762 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 14:27:55,763 - sync_service - INFO - No price changes found for store local
2025-09-14 14:27:55,763 - sync_service - INFO - Processing price changes for store: international
2025-09-14 14:27:57,079 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 14:27:57,081 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 14:27:57,082 - sync_service - INFO - No price changes found for store international
2025-09-14 14:27:57,083 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 14:27:57,083 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 14:27:57,084 - sync_service - INFO - Starting sales orders sync...
2025-09-14 14:27:57,085 - sync_service - INFO - Starting orders sync...
2025-09-14 14:27:57,086 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 14:27:57,087 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:27:57,688 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:27:57,689 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 14:27:57,690 - sync_service - INFO - No orders to process for store local
2025-09-14 14:27:57,691 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 14:27:57,692 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:27:58,273 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:27:58,275 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 14:27:58,275 - sync_service - INFO - No orders to process for store international
2025-09-14 14:27:58,276 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 14:27:58,276 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 14:27:58,276 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 14:27:58,277 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 14:27:58,277 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:27:58,746 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:27:58,747 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 14:27:58,748 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 14:27:58,748 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:27:59,385 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:27:59,433 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 14:27:59,438 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 14:27:59,447 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 14:27:59,463 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 14:27:59,624 - sync_service - INFO - Starting returns sync...
2025-09-14 14:27:59,777 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 14:27:59,800 - sync_service - INFO - Processing returns for store: local
2025-09-14 14:28:00,017 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 14:28:00,036 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 14:28:00,294 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:28:08,846 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:28:08,848 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 14:28:08,850 - sync_service - INFO - No returned orders to process for store local
2025-09-14 14:28:08,852 - sync_service - INFO - Processing returns for store: international
2025-09-14 14:28:08,854 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 14:28:08,860 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 14:28:08,863 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 14:28:09,387 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 14:28:09,389 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 14:28:09,392 - sync_service - INFO - No returned orders to process for store international
2025-09-14 14:28:09,394 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:03:55,033 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:03:55,034 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:03:55,103 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:03:55,105 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:03:55,108 - sync_service - INFO - Starting all syncs...
2025-09-14 15:03:55,110 - sync_service - INFO - Starting new items sync...
2025-09-14 15:03:55,111 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:03:55,112 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:03:55,948 - sync_service - INFO - SAP login successful
2025-09-14 15:03:57,400 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:03:58,114 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:03:58,118 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:03:58,120 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:03:59,550 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:03:59,553 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:03:59,555 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:03:59,556 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:03:59,558 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:03:59,559 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:03:59,560 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:04:01,034 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:04:01,038 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:04:01,041 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:04:02,411 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:04:02,415 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:04:02,417 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:04:02,419 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:04:02,422 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:04:02,424 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:04:02,981 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:04:02,983 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:04:02,984 - sync_service - INFO - No item changes found for store local
2025-09-14 15:04:02,985 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:04:04,287 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:04:04,288 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:04:04,288 - sync_service - INFO - No item changes found for store international
2025-09-14 15:04:04,289 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:04:04,289 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:04:04,290 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:04:04,290 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:04:04,290 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:04:05,603 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:04:05,606 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:04:05,608 - sync_service - INFO - No price changes found for store local
2025-09-14 15:04:05,610 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:04:06,920 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:04:06,921 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:04:06,922 - sync_service - INFO - No price changes found for store international
2025-09-14 15:04:06,922 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:04:06,923 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:04:06,923 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:04:06,924 - sync_service - INFO - Starting orders sync...
2025-09-14 15:04:06,924 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:04:06,925 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:16,935 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:04:17,216 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:04:17,217 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:04:17,218 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:04:19,242 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:19,976 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385537417282', 'name': '#1646', 'createdAt': '2025-09-11T13:26:01Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1005', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992043667522', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166205227074', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'cash', 'amountSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:26:01Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6388101414978', 'name': '#1653', 'createdAt': '2025-09-12T20:15:48Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '6020.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8153121161282', 'firstName': 'Layan', 'lastName': 'Mahmoud', 'email': 'layanmahmoud1978@gmail.com', 'phone': None, 'addresses': [{'address1': 'Fifth settlement south academy area E villa 252', 'address2': 'Villa', 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01004782174'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Fifth settlement south academy area E villa 252', 'address2': 'Villa', 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01004782174', 'firstName': 'Layan', 'lastName': 'Mahmoud', 'company': None}, 'billingAddress': {'address1': 'Fifth settlement south academy area E villa 252', 'address2': 'Villa', 'city': 'New cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01004782174', 'firstName': 'Layan', 'lastName': 'Mahmoud', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15997776068674', 'name': 'Essence Bangle - Orange', 'quantity': 1, 'sku': 'FG-0000620', 'originalUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '5900.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42194952257602', 'sku': 'FG-0000620', 'price': '5900.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7490852651074', 'title': 'Essence Bangle'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8170047537218', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob', 'amountSet': {'shopMoney': {'amount': '6020.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-12T20:13:57Z', 'receiptJson': '{"payment_id":"rSv4qEWve3AXjoGRhTDbNdrvm"}'}]}}, {'node': {'id': 'gid://shopify/Order/6388273119298', 'name': '#1654', 'createdAt': '2025-09-12T21:24:38Z', 'displayFinancialStatus': 'PENDING', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '3000.0', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '2800.0', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '200.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8153268518978', 'firstName': 'Rahma', 'lastName': 'Refaat', 'email': 'rtrafaat@gmail.com', 'phone': None, 'addresses': [{'address1': 'Ibrahim Bahi 3', 'address2': 'Floor 3, appartment 7', 'city': 'Cairo', 'province': 'Cairo', 'zip': '11511', 'country': 'Egypt', 'phone': '01023870020'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': {'address1': 'Ibrahim Bahi 3', 'address2': 'Floor 3, appartment 7', 'city': 'Cairo', 'province': 'Cairo', 'zip': '11511', 'country': 'Egypt', 'phone': '01023870020', 'firstName': 'Rahma', 'lastName': 'Refaat', 'company': None}, 'billingAddress': {'address1': 'Ibrahim Bahi 3', 'address2': 'Floor 3, appartment 7', 'city': 'Cairo', 'province': 'Cairo', 'zip': '11511', 'country': 'Egypt', 'phone': '01023870020', 'firstName': 'Rahma', 'lastName': 'Refaat', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15998167056450', 'name': 'Ember Ring - Sage Green / M/L', 'quantity': 1, 'sku': 'FG-0000696', 'originalUnitPriceSet': {'shopMoney': {'amount': '2800.0', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '2800.0', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42234487472194', 'sku': 'FG-0000696', 'price': '2800.00', 'compareAtPrice': None, 'product': {'id': 'gid://shopify/Product/7490853371970', 'title': 'Ember Ring'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8170309124162', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '3000.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-12T21:24:36Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg4MjczMTE5Mjk4LCJsYXN0X3ZhbHVlIjoxNzU3NzEyMjc4MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:04:19,979 - sync_service - INFO - Retrieved 4 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:04:19,979 - sync_service - INFO - Processing 4 orders from store local
2025-09-14 15:04:19,981 - sync_service - INFO - Processing order #1646 (ID: gid://shopify/Order/6385537417282)
2025-09-14 15:04:19,982 - sync_service - INFO - Processing order: #1646 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:04:19,983 - sync_service - INFO - Payment Gateway: cash | Card Type: Unknown | Amount: 8.5
2025-09-14 15:04:20,323 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:04:21,082 - sync_service - INFO - Created customer in SAP: C0021093
2025-09-14 15:04:21,083 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:04:21,087 - sync_service - INFO - Using location-based costing codes for order #1646: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:04:21,088 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:04:21,089 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:04:21,090 - sync_service - INFO - Added POS receipt number to invoice: 1-1005
2025-09-14 15:04:21,672 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:22,301 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:04:22,304 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:04:22,305 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:04:22,306 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:04:22,307 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:04:22,307 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:04:22,636 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:04:23,004 - sync_service - INFO - Created customer in SAP: C0021094
2025-09-14 15:04:23,005 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:04:23,007 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:04:23,008 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:04:23,009 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:04:23,010 - sync_service - INFO - Added POS receipt number to invoice: 1-1006
2025-09-14 15:04:23,972 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:24,602 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:04:24,604 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:04:24,605 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:04:24,605 - sync_service - INFO - Processing order #1653 (ID: gid://shopify/Order/6388101414978)
2025-09-14 15:04:24,606 - sync_service - INFO - Processing order: #1653 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:04:24,607 - sync_service - INFO - Payment Gateway: Paymob | Card Type: Unknown | Amount: 6020.0
2025-09-14 15:04:24,607 - sync_service - INFO - üîë ONLINE PAYMENT ID: rSv4qEWve3AXjoGRhTDbNdrvm
2025-09-14 15:04:24,608 - sync_service - INFO - üìç SHIP TO: Layan Mahmoud | Fifth settlement south academy area E villa 252 | New cairo, Cairo | 01004782174
2025-09-14 15:04:24,609 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Fifth settlement south academy area E villa 252, Villa, New cairo
Cairo, Egypt
2025-09-14 15:04:24,609 - sync_service - INFO - üìç BILL TO: Layan Mahmoud | Fifth settlement south academy area E villa 252 | New cairo, Cairo | 01004782174
2025-09-14 15:04:24,610 - sync_service - INFO - üìç SAP BILLING ADDRESS: Fifth settlement south academy area E villa 252, Villa, New cairo
Cairo, Egypt
2025-09-14 15:04:24,939 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:04:25,315 - sync_service - INFO - Created customer in SAP: C0021095
2025-09-14 15:04:25,316 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000620', VariantSKU='fg-0000620', Name='essence bangle - orange'
2025-09-14 15:04:25,319 - sync_service - INFO - Using location-based costing codes for order #1653: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 15:04:25,320 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:04:25,321 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 15:04:25,911 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:26,936 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:26,938 - sync_service - INFO - Created invoice in SAP: 23164
2025-09-14 15:04:26,939 - sync_service - INFO - Created invoice data: {'DocEntry': 23164, 'DocNum': 200004176}
2025-09-14 15:04:26,940 - sync_service - INFO - Order #1653 is paid - creating incoming payment in SAP
2025-09-14 15:04:26,940 - sync_service - INFO - Online payment - using Paymob account: 10801247
2025-09-14 15:04:27,775 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:04:27,777 - sync_service - INFO - Created incoming payment in SAP: 22350
2025-09-14 15:04:27,779 - sync_service - INFO - Successfully created incoming payment: 22350
2025-09-14 15:04:31,997 - sync_service - INFO - Added tag 'sap_payment_22350' to order gid://shopify/Order/6388101414978
2025-09-14 15:04:33,789 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6388101414978
2025-09-14 15:04:36,759 - sync_service - INFO - Added tag 'sap_invoice_23164' to order gid://shopify/Order/6388101414978
2025-09-14 15:04:38,442 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6388101414978
2025-09-14 15:04:38,443 - sync_service - INFO - Successfully processed order #1653
2025-09-14 15:04:38,444 - sync_service - INFO - ‚úÖ Processed order #1653 -> SAP Invoice: 23164
2025-09-14 15:04:38,445 - sync_service - INFO -    üîë Payment ID: rSv4qEWve3AXjoGRhTDbNdrvm
2025-09-14 15:04:38,445 - sync_service - INFO -    üí≥ Gateway: Paymob | Amount: 6020.0
2025-09-14 15:04:38,446 - sync_service - INFO -    üìç Ship To: Layan Mahmoud - New cairo
2025-09-14 15:04:38,446 - sync_service - INFO -    üìç Bill To: Layan Mahmoud - New cairo
2025-09-14 15:04:38,447 - sync_service - INFO - Processing order #1654 (ID: gid://shopify/Order/6388273119298)
2025-09-14 15:04:38,447 - sync_service - INFO - Processing order: #1654 | Payment: PENDING | Fulfillment: FULFILLED
2025-09-14 15:04:38,448 - sync_service - INFO - Payment Gateway: Unknown | Card Type: Unknown | Amount: 0.0
2025-09-14 15:04:38,448 - sync_service - INFO - üìç SHIP TO: Rahma Refaat | Ibrahim Bahi 3 | Cairo, Cairo | 01023870020
2025-09-14 15:04:38,449 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Ibrahim Bahi 3, Floor 3, appartment 7, 11511
Cairo, Cairo, Egypt
2025-09-14 15:04:38,449 - sync_service - INFO - üìç BILL TO: Rahma Refaat | Ibrahim Bahi 3 | Cairo, Cairo | 01023870020
2025-09-14 15:04:38,449 - sync_service - INFO - üìç SAP BILLING ADDRESS: Ibrahim Bahi 3, Floor 3, appartment 7, 11511
Cairo, Cairo, Egypt
2025-09-14 15:04:38,450 - sync_service - INFO - Order #1654 is pending payment - will process anyway
2025-09-14 15:04:38,777 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:04:39,188 - sync_service - INFO - Created customer in SAP: C0021096
2025-09-14 15:04:39,189 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000696', VariantSKU='fg-0000696', Name='ember ring - sage green / m/l'
2025-09-14 15:04:39,190 - sync_service - INFO - Using location-based costing codes for order #1654: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 15:04:39,191 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:04:39,192 - sync_service - INFO - Applied freight expenses for shipping fee 200.0: [{'ExpenseCode': 4, 'LineTotal': 80, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 120, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 15:04:39,764 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:40,791 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:40,793 - sync_service - INFO - Created invoice in SAP: 23165
2025-09-14 15:04:40,794 - sync_service - INFO - Created invoice data: {'DocEntry': 23165, 'DocNum': 200004177}
2025-09-14 15:04:40,795 - sync_service - INFO - Order #1654 is not paid (status: PENDING) - skipping payment creation
2025-09-14 15:04:43,654 - sync_service - INFO - Added tag 'sap_invoice_23165' to order gid://shopify/Order/6388273119298
2025-09-14 15:04:45,537 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6388273119298
2025-09-14 15:04:45,539 - sync_service - INFO - Successfully processed order #1654
2025-09-14 15:04:45,541 - sync_service - INFO - ‚úÖ Processed order #1654 -> SAP Invoice: 23165
2025-09-14 15:04:45,542 - sync_service - INFO -    üí≥ Gateway: Unknown | Amount: 0.0
2025-09-14 15:04:45,543 - sync_service - INFO -    üìç Ship To: Rahma Refaat - Cairo
2025-09-14 15:04:45,544 - sync_service - INFO -    üìç Bill To: Rahma Refaat - Cairo
2025-09-14 15:04:45,545 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:04:45,546 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:46,041 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:04:46,042 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:04:46,044 - sync_service - INFO - No orders to process for store international
2025-09-14 15:04:46,045 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 4, 'success_count': 2, 'error_count': 2, 'details': None}
2025-09-14 15:04:46,046 - sync_service - INFO - Orders sync completed. Processed: 4, Success: 2, Errors: 2
2025-09-14 15:04:46,047 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:04:46,049 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:04:46,050 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:46,588 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:04:46,589 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 15:04:46,590 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 15:04:46,591 - sync_service - INFO - Processing payment recovery for order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:04:46,592 - sync_service - INFO - Processing payment recovery for order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:04:46,593 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:04:47,141 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:04:47,143 - sync_service - INFO - Found SAP invoice DocEntry: 23158
2025-09-14 15:04:47,144 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:04:47,703 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:04:47,704 - sync_service - WARNING - Could not determine payment type for source: , identifier: 
2025-09-14 15:04:47,704 - sync_service - INFO - Online payment - using Unknown account: 
2025-09-14 15:04:48,258 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-14 15:04:48,259 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:04:48,261 - sync_service - ERROR - ‚ùå Failed to create payment for order #1636: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:04:49,588 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6383668494402
2025-09-14 15:04:49,589 - sync_service - ERROR - ‚ùå Payment recovery failed for order: Payment creation failed: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:04:49,591 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:50,117 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:04:50,119 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:04:50,120 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:04:50,122 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 15:04:50,123 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 15:04:50,123 - sync_service - INFO - Starting returns sync...
2025-09-14 15:04:50,124 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:04:50,125 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:04:50,126 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:04:50,127 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:04:50,128 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:50,638 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:04:50,638 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:04:50,639 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:04:50,639 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:04:50,639 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:04:50,639 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:04:50,640 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:04:51,149 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:04:51,150 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:04:51,151 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:04:51,152 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:08:02,840 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:08:02,841 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:08:02,913 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:08:02,916 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:08:02,925 - sync_service - INFO - Starting all syncs...
2025-09-14 15:08:02,925 - sync_service - INFO - Starting new items sync...
2025-09-14 15:08:02,926 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:08:02,927 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:08:03,689 - sync_service - INFO - SAP login successful
2025-09-14 15:08:05,072 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:08:05,774 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:08:05,778 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:08:05,782 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:08:07,183 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:08:07,185 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:08:07,186 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:08:07,187 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:08:07,188 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:08:07,189 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:08:07,189 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:08:08,601 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:08:08,605 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:08:08,607 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:08:09,975 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:08:09,976 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:08:09,978 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:08:09,979 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:08:09,980 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:08:09,981 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:08:10,533 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:08:10,537 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:08:10,539 - sync_service - INFO - No item changes found for store local
2025-09-14 15:08:10,541 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:08:11,870 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:08:11,871 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:08:11,872 - sync_service - INFO - No item changes found for store international
2025-09-14 15:08:11,872 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:08:11,872 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:08:11,873 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:08:11,873 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:08:11,873 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:08:13,170 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:08:13,171 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:08:13,172 - sync_service - INFO - No price changes found for store local
2025-09-14 15:08:13,172 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:08:14,472 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:08:14,473 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:08:14,474 - sync_service - INFO - No price changes found for store international
2025-09-14 15:08:14,475 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:08:14,476 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:08:14,477 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:08:14,478 - sync_service - INFO - Starting orders sync...
2025-09-14 15:08:14,479 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:08:14,480 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:24,501 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:08:24,785 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:08:24,787 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:08:24,788 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:08:26,800 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:27,419 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385537417282', 'name': '#1646', 'createdAt': '2025-09-11T13:26:01Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1005', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992043667522', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166205227074', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'cash', 'amountSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:26:01Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:08:27,422 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:08:27,425 - sync_service - INFO - Processing 2 orders from store local
2025-09-14 15:08:27,426 - sync_service - INFO - Processing order #1646 (ID: gid://shopify/Order/6385537417282)
2025-09-14 15:08:27,428 - sync_service - INFO - Processing order: #1646 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:08:27,429 - sync_service - INFO - Payment Gateway: cash | Card Type: Unknown | Amount: 8.5
2025-09-14 15:08:27,832 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:08:28,567 - sync_service - INFO - Created customer in SAP: C0021097
2025-09-14 15:08:28,569 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:08:28,572 - sync_service - INFO - Using location-based costing codes for order #1646: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:08:28,573 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:08:28,575 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:08:28,576 - sync_service - INFO - Added POS receipt number to invoice: 1-1005
2025-09-14 15:08:29,227 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:08:29,861 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:08:29,864 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:08:29,866 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:08:29,868 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:08:29,869 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:08:29,871 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:08:30,205 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:08:30,587 - sync_service - INFO - Created customer in SAP: C0021098
2025-09-14 15:08:30,589 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:08:30,591 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:08:30,592 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:08:30,594 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:08:30,595 - sync_service - INFO - Added POS receipt number to invoice: 1-1006
2025-09-14 15:08:31,638 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:08:32,345 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:08:32,348 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:08:32,350 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:08:32,352 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:08:32,354 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:42,383 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:08:42,654 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:08:42,655 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:08:42,656 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:08:44,673 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:45,159 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:08:45,161 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:08:45,163 - sync_service - INFO - No orders to process for store international
2025-09-14 15:08:45,164 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-14 15:08:45,166 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 0, Errors: 2
2025-09-14 15:08:45,168 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:08:45,169 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:08:45,170 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:45,689 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:08:45,690 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 15:08:45,691 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 15:08:45,691 - sync_service - INFO - Processing payment recovery for order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:08:45,692 - sync_service - INFO - Processing payment recovery for order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:08:45,692 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:08:46,220 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:08:46,222 - sync_service - INFO - Found SAP invoice DocEntry: 23158
2025-09-14 15:08:46,222 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:08:46,770 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:08:46,773 - sync_service - INFO - Online payment - using Unknown account: 
2025-09-14 15:08:47,318 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-14 15:08:47,320 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:08:47,321 - sync_service - ERROR - ‚ùå Failed to create payment for order #1636: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:08:48,533 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6383668494402
2025-09-14 15:08:48,534 - sync_service - ERROR - ‚ùå Payment recovery failed for order: Payment creation failed: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:08:48,535 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:49,021 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:08:49,023 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:08:49,023 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:08:49,023 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 15:08:49,024 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 15:08:49,024 - sync_service - INFO - Starting returns sync...
2025-09-14 15:08:49,025 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:08:49,025 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:08:49,025 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:08:49,026 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:08:49,026 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:49,503 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:08:49,505 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:08:49,506 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:08:49,507 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:08:49,508 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:08:49,508 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:08:49,509 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:08:50,016 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:08:50,017 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:08:50,017 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:08:50,017 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:14:56,564 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:14:56,567 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:14:56,634 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:14:56,638 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:14:56,644 - sync_service - INFO - Starting all syncs...
2025-09-14 15:14:56,645 - sync_service - INFO - Starting new items sync...
2025-09-14 15:14:56,647 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:14:56,648 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:14:57,457 - sync_service - INFO - SAP login successful
2025-09-14 15:14:58,931 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:15:00,010 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:15:00,012 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:15:00,014 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:15:01,415 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:15:01,421 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:15:01,423 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:15:01,426 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:15:01,429 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:15:01,430 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:15:01,431 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:15:02,916 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:15:02,918 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:15:02,919 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:15:04,376 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:15:04,384 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:15:04,385 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:15:04,386 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:15:04,387 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:15:04,388 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:15:04,959 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:15:04,960 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:15:04,961 - sync_service - INFO - No item changes found for store local
2025-09-14 15:15:04,962 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:15:06,298 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:15:06,303 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:15:06,306 - sync_service - INFO - No item changes found for store international
2025-09-14 15:15:06,308 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:15:06,310 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:15:06,311 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:15:06,315 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:15:06,317 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:15:07,668 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:15:07,670 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:15:07,670 - sync_service - INFO - No price changes found for store local
2025-09-14 15:15:07,670 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:15:09,001 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:15:09,003 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:15:09,004 - sync_service - INFO - No price changes found for store international
2025-09-14 15:15:09,005 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:15:09,006 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:15:09,006 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:15:09,007 - sync_service - INFO - Starting orders sync...
2025-09-14 15:15:09,008 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:15:09,009 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:09,619 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385537417282', 'name': '#1646', 'createdAt': '2025-09-11T13:26:01Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1005', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992043667522', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166205227074', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'cash', 'amountSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:26:01Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:15:09,622 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:15:09,624 - sync_service - INFO - Processing 2 orders from store local
2025-09-14 15:15:09,624 - sync_service - INFO - Processing order #1646 (ID: gid://shopify/Order/6385537417282)
2025-09-14 15:15:09,626 - sync_service - INFO - Processing order: #1646 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:15:09,627 - sync_service - INFO - Payment Gateway: cash | Card Type: Unknown | Amount: 8.5
2025-09-14 15:15:09,967 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:15:10,404 - sync_service - INFO - Created customer in SAP: C0021099
2025-09-14 15:15:10,406 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:15:10,407 - sync_service - INFO - Using location-based costing codes for order #1646: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:15:10,409 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:15:10,409 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:15:10,409 - sync_service - INFO - Added POS receipt number to invoice: 1-1005
2025-09-14 15:15:11,505 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:15:12,211 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:15:12,214 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:15:12,216 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:15:12,217 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:15:12,219 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:15:12,219 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:15:12,568 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:15:13,044 - sync_service - INFO - Created customer in SAP: C0021100
2025-09-14 15:15:13,046 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:15:13,049 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:15:13,051 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:15:13,053 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:15:13,054 - sync_service - INFO - Added POS receipt number to invoice: 1-1006
2025-09-14 15:15:13,735 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:15:14,385 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:15:14,388 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:15:14,390 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Quantity falls into negative inventory  [DocumentLines.ItemCode][line: 1]"
      }
   }
}

2025-09-14 15:15:14,391 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:15:14,393 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:14,930 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:15:14,934 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:15:14,936 - sync_service - INFO - No orders to process for store international
2025-09-14 15:15:14,937 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-14 15:15:14,939 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 0, Errors: 2
2025-09-14 15:15:14,941 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:15:14,942 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:15:14,943 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:15,468 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:15:15,470 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:15:15,470 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:15:15,471 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:15,975 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:15:15,976 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:15:15,976 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:15:15,977 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:15:15,978 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:15:15,978 - sync_service - INFO - Starting returns sync...
2025-09-14 15:15:15,979 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:15:15,979 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:15:15,981 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:15:15,982 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:15:15,983 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:26,000 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:15:26,308 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:15:26,308 - sync_service - WARNING - GraphQL query attempt 1 failed for store local: GraphQL query error for store local: 
2025-09-14 15:15:26,309 - sync_service - INFO - Waiting 1 seconds before retry...
2025-09-14 15:15:27,311 - sync_service - INFO - GraphQL query attempt 2/3 for store local
2025-09-14 15:15:27,315 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:27,809 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:15:27,811 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:15:27,813 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:15:27,815 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:15:27,816 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:15:27,817 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:15:27,818 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:15:28,341 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:15:28,343 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:15:28,344 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:15:28,345 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:21:13,342 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:21:13,342 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:21:13,371 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:21:13,373 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:21:13,375 - sync_service - INFO - Starting all syncs...
2025-09-14 15:21:13,375 - sync_service - INFO - Starting new items sync...
2025-09-14 15:21:13,376 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:21:13,376 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:21:14,121 - sync_service - INFO - SAP login successful
2025-09-14 15:21:15,483 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:21:16,168 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:21:16,171 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:21:16,172 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:21:17,517 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:21:17,519 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:21:17,521 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:21:17,522 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:21:17,523 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:21:17,524 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:21:17,525 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:21:18,918 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:21:18,920 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:21:18,921 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:21:20,254 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:21:20,257 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:21:20,258 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:21:20,259 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:21:20,259 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:21:20,259 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:21:20,789 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:21:20,790 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:21:20,790 - sync_service - INFO - No item changes found for store local
2025-09-14 15:21:20,791 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:21:22,095 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:21:22,098 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:21:22,100 - sync_service - INFO - No item changes found for store international
2025-09-14 15:21:22,102 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:21:22,103 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:21:22,104 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:21:22,105 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:21:22,106 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:21:23,408 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:21:23,410 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:21:23,411 - sync_service - INFO - No price changes found for store local
2025-09-14 15:21:23,413 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:21:24,633 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:21:24,634 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:21:24,635 - sync_service - INFO - No price changes found for store international
2025-09-14 15:21:24,635 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:21:24,636 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:21:24,637 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:21:24,637 - sync_service - INFO - Starting orders sync...
2025-09-14 15:21:24,638 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:21:24,639 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:25,337 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385537417282', 'name': '#1646', 'createdAt': '2025-09-11T13:26:01Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1005', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992043667522', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166205227074', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'cash', 'amountSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:26:01Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:21:25,339 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:21:25,340 - sync_service - INFO - Processing 2 orders from store local
2025-09-14 15:21:25,341 - sync_service - INFO - Processing order #1646 (ID: gid://shopify/Order/6385537417282)
2025-09-14 15:21:25,342 - sync_service - INFO - Processing order: #1646 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:21:25,343 - sync_service - INFO - Payment Gateway: cash | Card Type: Unknown | Amount: 8.5
2025-09-14 15:21:25,668 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:21:26,042 - sync_service - INFO - Created customer in SAP: C0021101
2025-09-14 15:21:26,043 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:21:26,044 - sync_service - INFO - Using location-based costing codes for order #1646: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:21:26,045 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:21:26,046 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:21:26,047 - sync_service - INFO - Added POS receipt number to invoice: 1-1005
2025-09-14 15:21:26,996 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:21:27,769 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:21:27,771 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130028) Please Fill the Discount Reason"
      }
   }
}

2025-09-14 15:21:27,772 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130028) Please Fill the Discount Reason"
      }
   }
}

2025-09-14 15:21:27,773 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:21:27,774 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:21:27,774 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:21:28,096 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:21:28,470 - sync_service - INFO - Created customer in SAP: C0021102
2025-09-14 15:21:28,471 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:21:28,473 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:21:28,474 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:21:28,475 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:21:28,476 - sync_service - INFO - Added POS receipt number to invoice: 1-1006
2025-09-14 15:21:29,056 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:21:29,820 - sync_service - INFO - API log added to SAP: sap - Invoices - failure
2025-09-14 15:21:29,823 - sync_service - ERROR - Failed to create invoice in SAP: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130028) Please Fill the Discount Reason"
      }
   }
}

2025-09-14 15:21:29,824 - sync_service - ERROR - ‚ùå Failed to process order: HTTP 400: {
   "error" : {
      "code" : -1116,
      "message" : {
         "lang" : "en-us",
         "value" : "(130028) Please Fill the Discount Reason"
      }
   }
}

2025-09-14 15:21:29,825 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:21:29,825 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:39,839 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:21:40,101 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:21:40,103 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:21:40,105 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:21:42,113 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:42,668 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:21:42,671 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:21:42,671 - sync_service - INFO - No orders to process for store international
2025-09-14 15:21:42,671 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 0, 'error_count': 2, 'details': None}
2025-09-14 15:21:42,672 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 0, Errors: 2
2025-09-14 15:21:42,672 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:21:42,672 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:21:42,673 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:43,239 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:21:43,240 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 15:21:43,240 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 15:21:43,241 - sync_service - INFO - Processing payment recovery for order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:21:43,241 - sync_service - INFO - Processing payment recovery for order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:21:43,242 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:21:43,777 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:21:43,780 - sync_service - INFO - Found SAP invoice DocEntry: 23158
2025-09-14 15:21:43,781 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:21:44,333 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:21:44,334 - sync_service - INFO - Payment recovery debug - source_name: '', gateway: 'Unknown', location_type: 'online', location_mapping: {'type': 'online', 'warehouse': 'SW', 'location_cc': 'ONL', 'department_cc': 'SAL', 'activity_cc': 'OnlineS', 'bin_location': 24, 'group_code': 110, 'series': {'invoices': 82, 'credit_notes': 85, 'incoming_payments': 15}, 'bank_transfers': {'local': {'Tuyingo': '10801245', 'Loadbugs': '10801238', 'Payfort': '10801236', 'Paymob': '10801247'}, 'international': {'N-Genius Online by Network': '10801237'}}}
2025-09-14 15:21:44,335 - sync_service - INFO - Payment recovery debug - determined payment_type: 'PaidOnline'
2025-09-14 15:21:44,336 - sync_service - INFO - Online payment - using Unknown account: 
2025-09-14 15:21:44,899 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-14 15:21:44,900 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:21:44,901 - sync_service - ERROR - ‚ùå Failed to create payment for order #1636: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:21:46,157 - sync_service - INFO - Added tag 'sap_payment_failed' to order gid://shopify/Order/6383668494402
2025-09-14 15:21:46,158 - sync_service - ERROR - ‚ùå Payment recovery failed for order: Payment creation failed: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:21:46,159 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:56,178 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:21:56,855 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:21:56,857 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:21:56,857 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:21:58,860 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:59,355 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:21:59,357 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:21:59,359 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:21:59,361 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 15:21:59,362 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 15:21:59,364 - sync_service - INFO - Starting returns sync...
2025-09-14 15:21:59,365 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:21:59,366 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:21:59,368 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:21:59,370 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:21:59,373 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:21:59,872 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:21:59,873 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:21:59,874 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:21:59,874 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:21:59,875 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:21:59,875 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:21:59,876 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:22:00,374 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:22:00,375 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:22:00,375 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:22:00,376 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:26:17,349 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:26:17,350 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:26:17,373 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:26:17,373 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:26:17,375 - sync_service - INFO - Starting all syncs...
2025-09-14 15:26:17,375 - sync_service - INFO - Starting new items sync...
2025-09-14 15:26:17,376 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:26:17,376 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:26:18,471 - sync_service - INFO - SAP login successful
2025-09-14 15:26:20,136 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:26:20,836 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:26:20,839 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:26:20,840 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:26:22,284 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:26:22,285 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:26:22,286 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:26:22,286 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:26:22,287 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:26:22,287 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:26:22,287 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:26:23,617 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:26:23,619 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:26:23,620 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:26:24,909 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:26:24,909 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:26:24,909 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:26:24,910 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:26:24,910 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:26:24,910 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:26:25,444 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:26:25,447 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:26:25,448 - sync_service - INFO - No item changes found for store local
2025-09-14 15:26:25,449 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:26:26,655 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:26:26,658 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:26:26,659 - sync_service - INFO - No item changes found for store international
2025-09-14 15:26:26,660 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:26:26,661 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:26:26,662 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:26:26,663 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:26:26,664 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:26:27,892 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:26:27,894 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:26:27,896 - sync_service - INFO - No price changes found for store local
2025-09-14 15:26:27,897 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:26:29,168 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:26:29,169 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:26:29,170 - sync_service - INFO - No price changes found for store international
2025-09-14 15:26:29,170 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:26:29,171 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:26:29,172 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:26:29,172 - sync_service - INFO - Starting orders sync...
2025-09-14 15:26:29,173 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:26:29,173 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:26:29,784 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385537417282', 'name': '#1646', 'createdAt': '2025-09-11T13:26:01Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1005', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992043667522', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166205227074', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'cash', 'amountSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:26:01Z', 'receiptJson': '{}'}]}}, {'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:26:29,786 - sync_service - INFO - Retrieved 2 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:26:29,786 - sync_service - INFO - Processing 2 orders from store local
2025-09-14 15:26:29,789 - sync_service - INFO - Processing order #1646 (ID: gid://shopify/Order/6385537417282)
2025-09-14 15:26:29,791 - sync_service - INFO - Processing order: #1646 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:26:29,792 - sync_service - INFO - Payment Gateway: cash | Card Type: Unknown | Amount: 8.5
2025-09-14 15:26:30,118 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:26:30,492 - sync_service - INFO - Created customer in SAP: C0021103
2025-09-14 15:26:30,493 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:26:30,495 - sync_service - INFO - Using location-based costing codes for order #1646: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:26:30,497 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:26:30,498 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:26:30,499 - sync_service - INFO - Added POS receipt number to invoice: 1-1005
2025-09-14 15:26:31,407 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:26:32,648 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:26:32,651 - sync_service - INFO - Created invoice in SAP: 23166
2025-09-14 15:26:32,653 - sync_service - INFO - Created invoice data: {'DocEntry': 23166, 'DocNum': 100018882}
2025-09-14 15:26:32,654 - sync_service - INFO - Order #1646 is paid - creating incoming payment in SAP
2025-09-14 15:26:32,655 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:26:33,476 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:26:33,478 - sync_service - INFO - Created incoming payment in SAP: 22351
2025-09-14 15:26:33,479 - sync_service - INFO - Successfully created incoming payment: 22351
2025-09-14 15:26:46,269 - sync_service - INFO - Added tag 'sap_payment_22351' to order gid://shopify/Order/6385537417282
2025-09-14 15:26:47,989 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385537417282
2025-09-14 15:26:50,756 - sync_service - INFO - Added tag 'sap_invoice_23166' to order gid://shopify/Order/6385537417282
2025-09-14 15:26:52,522 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385537417282
2025-09-14 15:26:52,525 - sync_service - INFO - Successfully processed order #1646
2025-09-14 15:26:52,526 - sync_service - INFO - ‚úÖ Processed order #1646 -> SAP Invoice: 23166
2025-09-14 15:26:52,527 - sync_service - INFO -    üí≥ Gateway: cash | Amount: 8.5
2025-09-14 15:26:52,528 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:26:52,529 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:26:52,530 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:26:52,873 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:26:53,256 - sync_service - INFO - Created customer in SAP: C0021104
2025-09-14 15:26:53,258 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:26:53,259 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:26:53,260 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:26:53,261 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:26:53,262 - sync_service - INFO - Added POS receipt number to invoice: 1-1006
2025-09-14 15:26:53,841 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:26:54,759 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:26:54,760 - sync_service - INFO - Created invoice in SAP: 23167
2025-09-14 15:26:54,761 - sync_service - INFO - Created invoice data: {'DocEntry': 23167, 'DocNum': 100018883}
2025-09-14 15:26:54,761 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 15:26:54,762 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:26:55,563 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:26:55,566 - sync_service - INFO - Created incoming payment in SAP: 22352
2025-09-14 15:26:55,567 - sync_service - INFO - Successfully created incoming payment: 22352
2025-09-14 15:27:01,769 - sync_service - INFO - Added tag 'sap_payment_22352' to order gid://shopify/Order/6385541120066
2025-09-14 15:27:03,511 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:27:06,278 - sync_service - INFO - Added tag 'sap_invoice_23167' to order gid://shopify/Order/6385541120066
2025-09-14 15:27:14,643 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:27:14,645 - sync_service - INFO - Successfully processed order #1647
2025-09-14 15:27:14,646 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23167
2025-09-14 15:27:14,648 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 15:27:14,649 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:27:14,650 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:27:15,137 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:27:15,139 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:27:15,141 - sync_service - INFO - No orders to process for store international
2025-09-14 15:27:15,142 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 2, 'success_count': 2, 'error_count': 0, 'details': None}
2025-09-14 15:27:15,144 - sync_service - INFO - Orders sync completed. Processed: 2, Success: 2, Errors: 0
2025-09-14 15:27:15,145 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:27:15,146 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:27:15,148 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:27:15,651 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:27:15,651 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:27:15,652 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:27:15,653 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:27:16,137 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:27:16,138 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:27:16,141 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:27:16,142 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:27:16,143 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:27:16,145 - sync_service - INFO - Starting returns sync...
2025-09-14 15:27:16,146 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:27:16,147 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:27:16,149 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:27:16,150 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:27:16,151 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:27:16,644 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:27:16,644 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:27:16,645 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:27:16,646 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:27:16,647 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:27:16,648 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:27:16,648 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:27:17,125 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:27:17,126 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:27:17,128 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:27:17,129 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:29:23,394 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:29:23,394 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:29:23,409 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:29:23,410 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:29:23,411 - sync_service - INFO - Starting all syncs...
2025-09-14 15:29:23,412 - sync_service - INFO - Starting new items sync...
2025-09-14 15:29:23,412 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:29:23,412 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:29:24,106 - sync_service - INFO - SAP login successful
2025-09-14 15:29:25,402 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:29:26,033 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:29:26,034 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:29:26,046 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:29:27,360 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:29:27,362 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:29:27,363 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:29:27,364 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:29:27,364 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:29:27,365 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:29:27,366 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:29:28,684 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:29:28,685 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:29:28,686 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:29:29,969 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:29:29,971 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:29:29,972 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:29:29,973 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:29:29,974 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:29:29,974 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:29:30,506 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:29:30,507 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:29:30,508 - sync_service - INFO - No item changes found for store local
2025-09-14 15:29:30,509 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:29:31,745 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:29:31,747 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:29:31,748 - sync_service - INFO - No item changes found for store international
2025-09-14 15:29:31,748 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:29:31,749 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:29:31,750 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:29:31,751 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:29:31,751 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:29:32,948 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:29:32,951 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:29:32,952 - sync_service - INFO - No price changes found for store local
2025-09-14 15:29:32,964 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:29:34,170 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:29:34,172 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:29:34,173 - sync_service - INFO - No price changes found for store international
2025-09-14 15:29:34,173 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:29:34,174 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:29:34,174 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:29:34,175 - sync_service - INFO - Starting orders sync...
2025-09-14 15:29:34,176 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:29:34,176 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:29:44,197 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:29:44,465 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:29:44,467 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:29:44,468 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:29:46,493 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:29:56,521 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:29:57,216 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:29:57,218 - sync_service - WARNING - GraphQL attempt 2/3 failed: GraphQL query error for store local: 
2025-09-14 15:29:57,219 - sync_service - INFO - Retrying in 4 seconds...
2025-09-14 15:30:01,239 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:01,743 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:30:01,745 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:30:01,746 - sync_service - INFO - No orders to process for store local
2025-09-14 15:30:01,747 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:30:01,748 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:02,242 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:30:02,243 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:30:02,244 - sync_service - INFO - No orders to process for store international
2025-09-14 15:30:02,244 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:30:02,245 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 15:30:02,245 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:30:02,246 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:30:02,247 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:02,779 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:30:02,781 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 15:30:02,781 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 15:30:02,782 - sync_service - INFO - Processing payment recovery for order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:30:02,783 - sync_service - INFO - Processing payment recovery for order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:30:02,784 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:30:03,731 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:30:03,732 - sync_service - INFO - Found SAP invoice DocEntry: 23158
2025-09-14 15:30:03,733 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:30:04,277 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:30:04,278 - sync_service - INFO - COD payment - using COD account:  (courier: Tuyingo)
2025-09-14 15:30:04,832 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - failure
2025-09-14 15:30:04,833 - sync_service - ERROR - Failed to create incoming payment in SAP: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:30:04,834 - sync_service - ERROR - ‚ùå Failed to create payment for order #1636: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:30:09,855 - sync_service - ERROR - Error adding tag to order gid://shopify/Order/6383668494402: 
2025-09-14 15:30:09,859 - sync_service - WARNING - Failed to add payment failed tag for #1636: 
2025-09-14 15:30:09,861 - sync_service - ERROR - ‚ùå Payment recovery failed for order: Payment creation failed: HTTP 400: {
   "error" : {
      "code" : -10,
      "message" : {
         "lang" : "en-us",
         "value" : "Account for bank transfer has not been defined "
      }
   }
}

2025-09-14 15:30:09,862 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:19,876 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:30:20,157 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:30:20,161 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:30:20,162 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:30:22,163 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:22,634 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:30:22,636 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:30:22,637 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:30:22,638 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 15:30:22,638 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 0, Skipped: 0, Errors: 1
2025-09-14 15:30:22,639 - sync_service - INFO - Starting returns sync...
2025-09-14 15:30:22,639 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:30:22,640 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:30:22,640 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:30:22,641 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:30:22,641 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:23,122 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:30:23,124 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:30:23,126 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:30:23,127 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:30:23,128 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:30:23,129 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:30:23,131 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:30:23,633 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:30:23,635 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:30:23,637 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:30:23,638 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:30:45,499 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:30:45,499 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:30:45,518 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:30:45,518 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:30:45,520 - sync_service - INFO - Starting all syncs...
2025-09-14 15:30:45,520 - sync_service - INFO - Starting new items sync...
2025-09-14 15:30:45,520 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:30:45,521 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:30:46,247 - sync_service - INFO - SAP login successful
2025-09-14 15:30:47,552 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:30:48,243 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:30:48,244 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:30:48,245 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:30:49,606 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:30:49,609 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:30:49,612 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:30:49,614 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:30:49,615 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:30:49,615 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:30:49,616 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:30:51,075 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:30:51,077 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:30:51,078 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:30:52,410 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:30:52,415 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:30:52,422 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:30:52,433 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:30:52,434 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:30:52,449 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:30:52,994 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:30:52,998 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:30:53,001 - sync_service - INFO - No item changes found for store local
2025-09-14 15:30:53,005 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:30:54,298 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:30:54,304 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:30:54,307 - sync_service - INFO - No item changes found for store international
2025-09-14 15:30:54,308 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:30:54,309 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:30:54,321 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:30:54,325 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:30:54,333 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:30:55,861 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:30:55,864 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:30:55,866 - sync_service - INFO - No price changes found for store local
2025-09-14 15:30:55,869 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:30:57,258 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:30:57,265 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:30:57,268 - sync_service - INFO - No price changes found for store international
2025-09-14 15:30:57,274 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:30:57,278 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:30:57,283 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:30:57,286 - sync_service - INFO - Starting orders sync...
2025-09-14 15:30:57,297 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:30:57,302 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:07,410 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:31:07,781 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:31:07,795 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:31:07,804 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:31:09,807 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:10,454 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '120.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158'], 'shippingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'billingAddress': {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'company': None}, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15987999703106', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:31:10,459 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:31:10,461 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 15:31:10,463 - sync_service - INFO - Processing order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:31:10,466 - sync_service - INFO - Processing order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:31:10,469 - sync_service - INFO - Payment Gateway: Cash on Delivery (COD) | Card Type: Unknown | Amount: 128.5
2025-09-14 15:31:10,472 - sync_service - INFO - üîë ONLINE PAYMENT ID: gid://shopify/OrderTransaction/8174601011266
2025-09-14 15:31:10,474 - sync_service - INFO - üìç SHIP TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-14 15:31:10,477 - sync_service - INFO - üìç SAP DELIVERY ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-14 15:31:10,480 - sync_service - INFO - üìç BILL TO: Nermin Ahmed | Nasr City | Nasr City, Cairo | +201001234561
2025-09-14 15:31:10,482 - sync_service - INFO - üìç SAP BILLING ADDRESS: Nasr City, Nasr City, Cairo
Egypt
2025-09-14 15:31:10,853 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:31:11,652 - sync_service - INFO - Created customer in SAP: C0021105
2025-09-14 15:31:11,654 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:31:11,655 - sync_service - INFO - Using location-based costing codes for order #1636: {'COGSCostingCode': 'ONL', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'OnlineS', 'CostingCode': 'ONL', 'CostingCode2': 'SAL', 'CostingCode3': 'OnlineS', 'Warehouse': 'SW'}
2025-09-14 15:31:11,656 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:31:11,658 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:31:11,659 - sync_service - INFO - Applied freight expenses for shipping fee 120.0: [{'ExpenseCode': 4, 'LineTotal': 30, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}, {'ExpenseCode': 6, 'LineTotal': 90, 'DistributionRule': 'ONL', 'DistributionRule2': 'SAL', 'DistributionRule3': 'OnlineS'}]
2025-09-14 15:31:12,282 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:31:12,284 - sync_service - INFO - Order 6383668494402 already exists in SAP with DocEntry: 23158
2025-09-14 15:31:12,286 - sync_service - INFO - Order #1636 already exists in SAP with DocEntry: 23158
2025-09-14 15:31:14,041 - sync_service - INFO - Added tag 'sap_invoice_23158' to order gid://shopify/Order/6383668494402
2025-09-14 15:31:15,619 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6383668494402
2025-09-14 15:31:15,624 - sync_service - ERROR - ‚ùå Failed to process order: None
2025-09-14 15:31:15,627 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:31:15,629 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:25,666 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:31:25,928 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:31:25,930 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:31:25,931 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:31:27,928 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:28,435 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:31:28,435 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:31:28,436 - sync_service - INFO - No orders to process for store international
2025-09-14 15:31:28,436 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 0, 'error_count': 1, 'details': None}
2025-09-14 15:31:28,436 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 0, Errors: 1
2025-09-14 15:31:28,437 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:31:28,437 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:31:28,437 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:28,988 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6383668494402', 'name': '#1636', 'createdAt': '2025-09-10T09:44:09Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'web', 'sourceIdentifier': None, 'totalPriceSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'customer': {'id': 'gid://shopify/Customer/8147855999042', 'firstName': 'Nermin', 'lastName': 'Ahmed', 'email': 'test@test.com', 'phone': None, 'addresses': [{'address1': 'Zayed', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'Nasr City', 'address2': None, 'city': 'Nasr City', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}, {'address1': 'zayedddd', 'address2': None, 'city': 'Zayed', 'province': 'Giza', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': [{'node': {'namespace': 'custom', 'key': 'courier', 'value': '["4 - Tuyingo"]'}}]}, 'tags': ['salestest', 'sap_invoice_23158', 'sap_invoice_synced'], 'transactions': [{'id': 'gid://shopify/OrderTransaction/8163383083074', 'kind': 'SALE', 'status': 'PENDING', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-10T09:44:08Z', 'receiptJson': '{}'}, {'id': 'gid://shopify/OrderTransaction/8174601011266', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Cash on Delivery (COD)', 'amountSet': {'shopMoney': {'amount': '128.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-14T11:47:54Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2MzgzNjY4NDk0NDAyLCJsYXN0X3ZhbHVlIjoxNzU3NDk3NDQ5MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:31:28,988 - sync_service - INFO - Retrieved 1 orders that need payment recovery from Shopify store local
2025-09-14 15:31:28,990 - sync_service - INFO - Processing 1 orders for payment recovery from store local
2025-09-14 15:31:28,991 - sync_service - INFO - Processing payment recovery for order #1636 (ID: gid://shopify/Order/6383668494402)
2025-09-14 15:31:28,993 - sync_service - INFO - Processing payment recovery for order: #1636 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:31:28,993 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:31:29,520 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:31:29,521 - sync_service - INFO - Found SAP invoice DocEntry: 23158
2025-09-14 15:31:29,523 - sync_service - INFO - Found SAP invoice DocEntry: 23158 for order #1636
2025-09-14 15:31:30,053 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:31:30,056 - sync_service - INFO - COD payment - using COD account: 10801245 (courier: Tuyingo)
2025-09-14 15:31:30,873 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:31:30,874 - sync_service - INFO - Created incoming payment in SAP: 22353
2025-09-14 15:31:30,874 - sync_service - INFO - ‚úÖ Successfully created payment for order #1636 -> SAP Invoice: 23158 -> Payment: 22353
2025-09-14 15:31:32,087 - sync_service - INFO - Added tag 'sap_payment_22353' to order gid://shopify/Order/6383668494402
2025-09-14 15:31:37,114 - sync_service - ERROR - Error adding tag to order gid://shopify/Order/6383668494402: 
2025-09-14 15:31:37,115 - sync_service - INFO - ‚úÖ Payment recovery successful for order #1636 -> SAP Invoice: 23158 -> Payment: 22353
2025-09-14 15:31:37,115 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:37,603 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:31:37,604 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:31:37,604 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:31:37,605 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 15:31:37,605 - sync_service - INFO - Payment recovery sync completed. Processed: 1, Success: 1, Skipped: 0, Errors: 0
2025-09-14 15:31:37,605 - sync_service - INFO - Starting returns sync...
2025-09-14 15:31:37,606 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:31:37,606 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:31:37,607 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:31:37,607 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:31:37,608 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:38,065 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:31:38,066 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:31:38,067 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:31:38,067 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:31:38,067 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:31:38,068 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:31:38,068 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:31:38,590 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:31:38,590 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:31:38,591 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:31:38,591 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:35:20,610 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:35:20,611 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:35:20,662 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:35:20,663 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:35:20,666 - sync_service - INFO - Starting all syncs...
2025-09-14 15:35:20,667 - sync_service - INFO - Starting new items sync...
2025-09-14 15:35:20,668 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:35:20,669 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:35:22,027 - sync_service - INFO - SAP login successful
2025-09-14 15:35:25,291 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:35:26,600 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:35:26,603 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:35:26,604 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:35:29,179 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:35:29,183 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:35:29,186 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:35:29,188 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:35:29,190 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:35:29,194 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:35:29,195 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:35:31,856 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:35:31,859 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:35:31,861 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:35:34,341 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:35:34,343 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:35:34,344 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:35:34,344 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:35:34,345 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:35:34,346 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:35:35,911 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:35:35,912 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:35:35,912 - sync_service - INFO - No item changes found for store local
2025-09-14 15:35:35,913 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:35:38,236 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:35:38,238 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:35:38,239 - sync_service - INFO - No item changes found for store international
2025-09-14 15:35:38,240 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:35:38,241 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:35:38,242 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:35:38,242 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:35:38,243 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:35:40,691 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:35:40,691 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:35:40,692 - sync_service - INFO - No price changes found for store local
2025-09-14 15:35:40,692 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:35:43,219 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:35:43,223 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:35:43,226 - sync_service - INFO - No price changes found for store international
2025-09-14 15:35:43,227 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:35:43,229 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:35:43,230 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:35:43,231 - sync_service - INFO - Starting orders sync...
2025-09-14 15:35:43,233 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:35:43,234 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:35:53,259 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:35:53,544 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:35:53,546 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:35:53,548 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:35:55,565 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:05,567 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:36:06,346 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:36:06,348 - sync_service - WARNING - GraphQL attempt 2/3 failed: GraphQL query error for store local: 
2025-09-14 15:36:06,349 - sync_service - INFO - Retrying in 4 seconds...
2025-09-14 15:36:10,357 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:10,858 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:10,859 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:36:10,860 - sync_service - INFO - No orders to process for store local
2025-09-14 15:36:10,860 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:36:10,861 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:11,400 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:11,401 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:36:11,403 - sync_service - INFO - No orders to process for store international
2025-09-14 15:36:11,404 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:36:11,405 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 15:36:11,406 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:36:11,408 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:36:11,408 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:11,910 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:11,911 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:36:11,911 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:36:11,912 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:12,404 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:12,407 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:36:12,409 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:36:12,410 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:36:12,411 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:36:12,412 - sync_service - INFO - Starting returns sync...
2025-09-14 15:36:12,413 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:36:12,415 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:36:12,416 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:36:12,418 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:36:12,419 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:12,952 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:12,953 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:36:12,954 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:36:12,955 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:36:12,956 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:36:12,956 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:36:12,957 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:36:13,453 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:36:13,453 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:36:13,454 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:36:13,456 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:37:53,335 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:37:53,336 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:37:53,368 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:37:53,368 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:37:53,372 - sync_service - INFO - Starting all syncs...
2025-09-14 15:37:53,374 - sync_service - INFO - Starting new items sync...
2025-09-14 15:37:53,375 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:37:53,376 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:37:54,137 - sync_service - INFO - SAP login successful
2025-09-14 15:37:55,548 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:37:56,234 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:37:56,237 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:37:56,240 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:37:57,615 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:37:57,620 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:37:57,622 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:37:57,624 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:37:57,626 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:37:57,627 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:37:57,628 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:37:59,041 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:37:59,044 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:37:59,046 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:38:00,412 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:38:00,417 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:38:00,422 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:38:00,425 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:38:00,426 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:38:00,428 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:38:01,041 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:38:01,060 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:38:01,075 - sync_service - INFO - No item changes found for store local
2025-09-14 15:38:01,079 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:38:02,388 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:38:02,422 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:38:02,428 - sync_service - INFO - No item changes found for store international
2025-09-14 15:38:02,521 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:38:02,526 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:38:02,526 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:38:02,528 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:38:02,540 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:38:03,845 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:38:03,846 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:38:03,848 - sync_service - INFO - No price changes found for store local
2025-09-14 15:38:03,849 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:38:05,152 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:38:05,157 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:38:05,159 - sync_service - INFO - No price changes found for store international
2025-09-14 15:38:05,161 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:38:05,162 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:38:05,164 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:38:05,166 - sync_service - INFO - Starting orders sync...
2025-09-14 15:38:05,168 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:38:05,170 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:39:49,655 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:39:49,655 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:39:49,689 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:39:49,690 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:39:49,693 - sync_service - INFO - Starting all syncs...
2025-09-14 15:39:49,695 - sync_service - INFO - Starting new items sync...
2025-09-14 15:39:49,697 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:39:49,698 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:39:50,518 - sync_service - INFO - SAP login successful
2025-09-14 15:39:51,977 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:39:52,744 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:39:52,746 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:39:52,747 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:39:54,801 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:39:54,803 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:39:54,804 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:39:54,804 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:39:54,805 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:39:54,805 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:39:54,806 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:39:56,336 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:39:56,337 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:39:56,338 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:39:57,700 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:39:57,702 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:39:57,702 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:39:57,703 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:39:57,703 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:39:57,704 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:39:58,228 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:39:58,229 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:39:58,230 - sync_service - INFO - No item changes found for store local
2025-09-14 15:39:58,231 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:45:05,821 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:45:05,822 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:45:05,843 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:45:05,844 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:45:05,848 - sync_service - INFO - Starting all syncs...
2025-09-14 15:45:05,849 - sync_service - INFO - Starting new items sync...
2025-09-14 15:45:05,849 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:45:05,850 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:45:06,781 - sync_service - INFO - SAP login successful
2025-09-14 15:45:08,518 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:45:09,516 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:45:09,518 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:45:09,519 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:45:11,321 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:45:11,324 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:45:11,325 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:45:11,326 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:45:11,328 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:45:11,329 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:45:11,330 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:45:12,899 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:45:12,902 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:45:12,904 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:45:14,235 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:45:14,238 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:45:14,239 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:45:14,240 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:45:14,241 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:45:14,242 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:45:14,773 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:45:14,775 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:45:14,776 - sync_service - INFO - No item changes found for store local
2025-09-14 15:45:14,777 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:45:16,083 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:45:16,087 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:45:16,088 - sync_service - INFO - No item changes found for store international
2025-09-14 15:45:16,090 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:45:16,091 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:45:16,093 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:45:16,094 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:45:16,096 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:45:17,405 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:45:17,406 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:45:17,408 - sync_service - INFO - No price changes found for store local
2025-09-14 15:45:17,409 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:45:18,708 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:45:18,711 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:45:18,713 - sync_service - INFO - No price changes found for store international
2025-09-14 15:45:18,714 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:45:18,716 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:45:18,718 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:45:18,719 - sync_service - INFO - Starting orders sync...
2025-09-14 15:45:18,721 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:45:18,723 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:49:31,278 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:49:31,279 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:49:31,290 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:49:31,291 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:49:31,294 - sync_service - INFO - Starting all syncs...
2025-09-14 15:49:31,294 - sync_service - INFO - Starting new items sync...
2025-09-14 15:49:31,295 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:49:31,296 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:49:31,993 - sync_service - INFO - SAP login successful
2025-09-14 15:49:33,330 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:49:34,000 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:49:34,003 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:49:34,005 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:49:35,335 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:49:35,337 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:49:35,338 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:49:35,338 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:49:35,340 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:49:35,342 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:49:35,343 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:49:36,650 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:49:36,653 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:49:36,655 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:49:37,996 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:49:37,998 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:49:37,999 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:49:38,001 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:49:38,002 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:49:38,004 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:49:38,539 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:49:38,541 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:49:38,542 - sync_service - INFO - No item changes found for store local
2025-09-14 15:49:38,543 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:49:39,848 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:49:39,852 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:49:39,854 - sync_service - INFO - No item changes found for store international
2025-09-14 15:49:39,856 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:49:39,857 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:49:39,858 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:49:39,860 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:49:39,861 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:49:41,186 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:49:41,189 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:49:41,190 - sync_service - INFO - No price changes found for store local
2025-09-14 15:49:41,191 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:49:42,502 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:49:42,504 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:49:42,504 - sync_service - INFO - No price changes found for store international
2025-09-14 15:49:42,504 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:49:42,505 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:49:42,506 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:49:42,506 - sync_service - INFO - Starting orders sync...
2025-09-14 15:49:42,507 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:49:42,507 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:49:43,096 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:49:43,098 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:49:43,098 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 15:49:43,099 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:49:43,100 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:49:43,101 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:49:43,456 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:49:43,833 - sync_service - INFO - Created customer in SAP: C0021106
2025-09-14 15:49:43,835 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:49:43,836 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:49:43,837 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:49:43,837 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:49:43,838 - sync_service - INFO - Added POS receipt number to invoice: 1006
2025-09-14 15:49:44,815 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:49:45,723 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:49:45,725 - sync_service - INFO - Created invoice in SAP: 23168
2025-09-14 15:49:45,727 - sync_service - INFO - Created invoice data: {'DocEntry': 23168, 'DocNum': 100018884}
2025-09-14 15:49:45,729 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 15:49:45,730 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:49:46,532 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:49:46,535 - sync_service - INFO - Created incoming payment in SAP: 22354
2025-09-14 15:49:46,537 - sync_service - INFO - Successfully created incoming payment: 22354
2025-09-14 15:49:48,410 - sync_service - INFO - Added tag 'sap_payment_22354' to order gid://shopify/Order/6385541120066
2025-09-14 15:49:52,656 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:50:06,473 - sync_service - INFO - Added tag 'sap_invoice_23168' to order gid://shopify/Order/6385541120066
2025-09-14 15:50:08,182 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:50:08,185 - sync_service - INFO - Successfully processed order #1647
2025-09-14 15:50:08,186 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23168
2025-09-14 15:50:08,187 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 15:50:08,187 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:50:08,188 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:18,200 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:50:18,478 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:50:18,481 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:50:18,482 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:50:20,494 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:20,987 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:50:20,989 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:50:20,991 - sync_service - INFO - No orders to process for store international
2025-09-14 15:50:20,992 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 15:50:20,993 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 15:50:20,994 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:50:20,995 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:50:20,998 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:21,498 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:50:21,500 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:50:21,502 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:50:21,503 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:31,517 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:50:31,804 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:50:31,806 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:50:31,806 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:50:33,818 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:34,725 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:50:34,727 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:50:34,728 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:50:34,730 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:50:34,731 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:50:34,732 - sync_service - INFO - Starting returns sync...
2025-09-14 15:50:34,733 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:50:34,735 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:50:34,736 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:50:34,737 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:50:34,739 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:35,252 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:50:35,253 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:50:35,253 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:50:35,254 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:50:35,254 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:50:35,255 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:50:35,255 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:50:35,771 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:50:35,772 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:50:35,773 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:50:35,776 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:53:04,874 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:53:04,875 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:53:04,926 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:53:04,928 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:53:04,932 - sync_service - INFO - Starting all syncs...
2025-09-14 15:53:04,936 - sync_service - INFO - Starting new items sync...
2025-09-14 15:53:04,936 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:53:04,936 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:53:05,668 - sync_service - INFO - SAP login successful
2025-09-14 15:53:07,031 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:53:07,731 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:53:07,734 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:53:07,736 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:53:09,122 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:53:09,124 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:53:09,126 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:53:09,127 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:53:09,129 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:53:09,130 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:53:09,131 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:53:10,513 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:53:10,515 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:53:10,515 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:53:11,857 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:53:11,857 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:53:11,858 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:53:11,858 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:53:11,859 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:53:11,860 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:53:12,412 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:53:12,414 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:53:12,415 - sync_service - INFO - No item changes found for store local
2025-09-14 15:53:12,415 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:53:13,717 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:53:13,720 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:53:13,721 - sync_service - INFO - No item changes found for store international
2025-09-14 15:53:13,722 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:53:13,722 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:53:13,723 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:53:13,723 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:53:13,725 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:53:15,022 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:53:15,024 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:53:15,025 - sync_service - INFO - No price changes found for store local
2025-09-14 15:53:15,027 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:53:16,322 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:53:16,323 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:53:16,324 - sync_service - INFO - No price changes found for store international
2025-09-14 15:53:16,325 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:53:16,325 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:53:16,325 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:53:16,327 - sync_service - INFO - Starting orders sync...
2025-09-14 15:53:16,328 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:53:16,330 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:18,266 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:53:18,267 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:53:18,268 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 15:53:18,271 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:53:18,271 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:53:18,272 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:53:19,200 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:53:19,629 - sync_service - INFO - Created customer in SAP: C0021107
2025-09-14 15:53:19,631 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:53:19,632 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:53:19,635 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:53:19,636 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:53:19,638 - sync_service - INFO - Added POS receipt number to invoice: 1006
2025-09-14 15:53:20,631 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:53:21,556 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:53:21,558 - sync_service - INFO - Created invoice in SAP: 23169
2025-09-14 15:53:21,560 - sync_service - INFO - Created invoice data: {'DocEntry': 23169, 'DocNum': 100018885}
2025-09-14 15:53:21,561 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 15:53:21,563 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:53:22,388 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:53:22,391 - sync_service - INFO - Created incoming payment in SAP: 22355
2025-09-14 15:53:22,392 - sync_service - INFO - Successfully created incoming payment: 22355
2025-09-14 15:53:24,219 - sync_service - INFO - Added tag 'sap_payment_22355' to order gid://shopify/Order/6385541120066
2025-09-14 15:53:29,090 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:53:32,153 - sync_service - INFO - Added tag 'sap_invoice_23169' to order gid://shopify/Order/6385541120066
2025-09-14 15:53:33,877 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:53:33,881 - sync_service - INFO - Successfully processed order #1647
2025-09-14 15:53:33,882 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23169
2025-09-14 15:53:33,883 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 15:53:33,883 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:53:33,884 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:43,913 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:53:44,186 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:53:44,187 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:53:44,187 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:53:46,199 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:46,715 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:53:46,718 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:53:46,719 - sync_service - INFO - No orders to process for store international
2025-09-14 15:53:46,721 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 15:53:46,722 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 15:53:46,723 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:53:46,725 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:53:46,727 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:47,267 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:53:47,269 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:53:47,270 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:53:47,271 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:47,770 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:53:47,772 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:53:47,773 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:53:47,774 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:53:47,777 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:53:47,778 - sync_service - INFO - Starting returns sync...
2025-09-14 15:53:47,780 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:53:47,781 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:53:47,782 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:53:47,783 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:53:47,784 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:48,288 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:53:48,289 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:53:48,289 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:53:48,289 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:53:48,290 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:53:48,290 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:53:48,290 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:53:48,808 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:53:48,810 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:53:48,812 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:53:48,814 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:54:07,811 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:54:07,813 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:54:07,882 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:54:07,887 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:54:07,890 - sync_service - INFO - Starting all syncs...
2025-09-14 15:54:07,891 - sync_service - INFO - Starting new items sync...
2025-09-14 15:54:07,891 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:54:07,893 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:54:08,625 - sync_service - INFO - SAP login successful
2025-09-14 15:54:10,588 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:54:11,361 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:54:11,365 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:54:11,368 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:54:12,853 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:54:12,854 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:54:12,855 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:54:12,856 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:54:12,857 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:54:12,858 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:54:12,859 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:54:14,215 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:54:14,217 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:54:14,219 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:54:15,580 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:54:15,582 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:54:15,582 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:54:15,583 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:54:15,583 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:54:15,584 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:54:16,122 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:54:16,123 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:54:16,123 - sync_service - INFO - No item changes found for store local
2025-09-14 15:54:16,125 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:54:17,455 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:54:17,457 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:54:17,458 - sync_service - INFO - No item changes found for store international
2025-09-14 15:54:17,458 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:54:17,461 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:54:17,461 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:54:17,463 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:54:17,464 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:54:18,764 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:54:18,767 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:54:18,768 - sync_service - INFO - No price changes found for store local
2025-09-14 15:54:18,770 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:54:20,066 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:54:20,068 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:54:20,069 - sync_service - INFO - No price changes found for store international
2025-09-14 15:54:20,070 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:54:20,071 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:54:20,072 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:54:20,073 - sync_service - INFO - Starting orders sync...
2025-09-14 15:54:20,074 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:54:20,075 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:30,090 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:54:30,354 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:54:30,355 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:54:30,356 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:54:32,366 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:32,867 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:32,869 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:54:32,872 - sync_service - INFO - No orders to process for store local
2025-09-14 15:54:32,873 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:54:32,875 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:33,392 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:33,393 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:54:33,396 - sync_service - INFO - No orders to process for store international
2025-09-14 15:54:33,397 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:54:33,398 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 15:54:33,399 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:54:33,400 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:54:33,401 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:33,876 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:33,878 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:54:33,879 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:54:33,880 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:34,372 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:34,373 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:54:34,375 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:54:34,376 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:54:34,377 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:54:34,378 - sync_service - INFO - Starting returns sync...
2025-09-14 15:54:34,379 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:54:34,380 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:54:34,382 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:54:34,383 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:54:34,384 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:34,867 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:34,868 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:54:34,870 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:54:34,871 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:54:34,873 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:54:34,874 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:54:34,875 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:54:35,394 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:54:35,396 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:54:35,397 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:54:35,398 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:55:07,994 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:55:07,995 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:55:18,393 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:55:18,394 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:55:29,713 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:55:29,715 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:55:59,590 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:55:59,591 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:55:59,611 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:55:59,614 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:55:59,618 - sync_service - INFO - Starting all syncs...
2025-09-14 15:55:59,619 - sync_service - INFO - Starting new items sync...
2025-09-14 15:55:59,619 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:55:59,620 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:56:00,379 - sync_service - INFO - SAP login successful
2025-09-14 15:56:01,847 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:56:02,559 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:02,563 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:56:02,564 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:56:03,944 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:03,947 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:56:03,948 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:03,950 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:03,951 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:56:03,952 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:56:03,953 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:56:07,448 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:07,449 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:56:07,450 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:56:08,868 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:08,870 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:56:08,870 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:08,871 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:56:08,872 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:56:08,872 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:56:09,457 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:09,460 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:56:09,463 - sync_service - INFO - No item changes found for store local
2025-09-14 15:56:09,464 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:56:10,784 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:10,786 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:56:10,788 - sync_service - INFO - No item changes found for store international
2025-09-14 15:56:10,789 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:10,790 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:10,791 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:56:10,792 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:56:10,793 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:56:12,080 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:12,083 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:56:12,084 - sync_service - INFO - No price changes found for store local
2025-09-14 15:56:12,086 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:56:13,421 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:13,423 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:56:13,423 - sync_service - INFO - No price changes found for store international
2025-09-14 15:56:13,424 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:13,424 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:13,425 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:56:13,426 - sync_service - INFO - Starting orders sync...
2025-09-14 15:56:13,428 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:56:13,429 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:13,948 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:13,950 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:56:13,951 - sync_service - INFO - No orders to process for store local
2025-09-14 15:56:13,953 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:56:13,955 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:14,467 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:14,469 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:56:14,471 - sync_service - INFO - No orders to process for store international
2025-09-14 15:56:14,472 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:14,474 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 15:56:14,475 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:56:14,476 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:56:14,478 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:24,501 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 15:56:24,837 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 15:56:24,838 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 15:56:24,839 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:56:26,840 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:27,337 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:27,339 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:56:27,340 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:56:27,341 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:27,886 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:27,888 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:56:27,888 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:56:27,888 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:27,890 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:56:27,890 - sync_service - INFO - Starting returns sync...
2025-09-14 15:56:27,890 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:56:27,891 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:56:27,891 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:56:27,894 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:56:27,899 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:28,479 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:29,208 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:56:29,262 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:56:29,469 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:56:29,513 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:56:29,685 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:56:29,711 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:30,854 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:56:30,970 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:56:30,989 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:56:31,154 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:56:46,923 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:56:46,924 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:56:46,981 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:56:46,981 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:56:46,983 - sync_service - INFO - Starting all syncs...
2025-09-14 15:56:46,984 - sync_service - INFO - Starting new items sync...
2025-09-14 15:56:46,984 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:56:46,985 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:56:47,705 - sync_service - INFO - SAP login successful
2025-09-14 15:56:49,320 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:56:50,386 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:50,390 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:56:50,391 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:56:52,206 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:52,209 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:56:52,210 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:52,211 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:52,212 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:56:52,213 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:56:52,215 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:56:53,548 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:53,550 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:56:53,552 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:56:54,865 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:54,868 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:56:54,871 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:54,873 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:56:54,874 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:56:54,875 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:56:55,417 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:55,418 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:56:55,420 - sync_service - INFO - No item changes found for store local
2025-09-14 15:56:55,421 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:56:56,715 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:56,718 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:56:56,719 - sync_service - INFO - No item changes found for store international
2025-09-14 15:56:56,721 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:56,722 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:56,723 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:56:56,725 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:56:56,726 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:56:58,021 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:56:58,024 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:56:58,025 - sync_service - INFO - No price changes found for store local
2025-09-14 15:56:58,026 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:56:59,321 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:56:59,323 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:56:59,324 - sync_service - INFO - No price changes found for store international
2025-09-14 15:56:59,325 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:56:59,325 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:56:59,327 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:56:59,328 - sync_service - INFO - Starting orders sync...
2025-09-14 15:56:59,329 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:56:59,331 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:56:59,935 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:56:59,936 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:56:59,936 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 15:56:59,937 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:56:59,937 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:56:59,938 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:57:00,265 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:57:00,643 - sync_service - INFO - Created customer in SAP: C0021108
2025-09-14 15:57:00,645 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:57:00,647 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:57:00,648 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:57:00,649 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:57:00,650 - sync_service - INFO - Added POS receipt number to invoice: 1006
2025-09-14 15:57:01,638 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:57:02,552 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:57:02,556 - sync_service - INFO - Created invoice in SAP: 23170
2025-09-14 15:57:02,557 - sync_service - INFO - Created invoice data: {'DocEntry': 23170, 'DocNum': 100018886}
2025-09-14 15:57:02,558 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 15:57:02,559 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:57:03,365 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:57:03,367 - sync_service - INFO - Created incoming payment in SAP: 22356
2025-09-14 15:57:03,368 - sync_service - INFO - Successfully created incoming payment: 22356
2025-09-14 15:57:05,135 - sync_service - INFO - Added tag 'sap_payment_22356' to order gid://shopify/Order/6385541120066
2025-09-14 15:57:12,232 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:57:14,961 - sync_service - INFO - Added tag 'sap_invoice_23170' to order gid://shopify/Order/6385541120066
2025-09-14 15:57:16,632 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:57:16,636 - sync_service - INFO - Successfully processed order #1647
2025-09-14 15:57:16,638 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23170
2025-09-14 15:57:16,639 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 15:57:16,640 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:57:16,641 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:57:17,459 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:57:17,461 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:57:17,463 - sync_service - INFO - No orders to process for store international
2025-09-14 15:57:17,464 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 15:57:17,465 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 15:57:17,466 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:57:17,466 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:57:17,467 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:57:17,971 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:57:17,973 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:57:17,974 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:57:17,975 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:57:18,885 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:57:18,887 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:57:18,888 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:57:18,888 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:57:18,889 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:57:18,889 - sync_service - INFO - Starting returns sync...
2025-09-14 15:57:18,890 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:57:18,890 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:57:18,890 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:57:18,891 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:57:18,891 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:57:20,469 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:57:20,470 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:57:20,471 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:57:20,471 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:57:20,471 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:57:20,472 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:57:20,473 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:57:20,993 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:57:20,995 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:57:20,996 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:57:20,997 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:57:50,041 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:57:50,041 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:57:50,081 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:57:50,082 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:57:50,084 - sync_service - INFO - Starting all syncs...
2025-09-14 15:57:50,085 - sync_service - INFO - Starting new items sync...
2025-09-14 15:57:50,085 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:57:50,086 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:57:50,819 - sync_service - INFO - SAP login successful
2025-09-14 15:57:52,329 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:57:52,982 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:57:52,983 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:57:52,984 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:57:54,287 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:57:54,290 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:57:54,292 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:57:54,294 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:57:54,294 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:57:54,296 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:57:54,296 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:57:55,595 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:57:55,607 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:57:55,611 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:57:57,006 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:57:57,009 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:57:57,011 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:57:57,011 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:57:57,012 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:57:57,014 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:57:57,571 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:57:57,575 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:57:57,576 - sync_service - INFO - No item changes found for store local
2025-09-14 15:57:57,579 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:57:58,978 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:57:58,981 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:57:58,984 - sync_service - INFO - No item changes found for store international
2025-09-14 15:57:58,986 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:57:58,989 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:57:58,991 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:57:58,995 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:57:59,000 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:58:00,682 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:58:00,686 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:58:00,688 - sync_service - INFO - No price changes found for store local
2025-09-14 15:58:00,689 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:58:02,063 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:58:02,066 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:58:02,068 - sync_service - INFO - No price changes found for store international
2025-09-14 15:58:02,069 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:58:02,070 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:58:02,071 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:58:02,072 - sync_service - INFO - Starting orders sync...
2025-09-14 15:58:02,073 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:58:02,074 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:02,659 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 15:58:02,660 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:58:02,662 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 15:58:02,663 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 15:58:02,665 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 15:58:02,666 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 15:58:02,999 - sync_service - INFO - Creating new customer in SAP
2025-09-14 15:58:03,567 - sync_service - INFO - Created customer in SAP: C0021109
2025-09-14 15:58:03,570 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 15:58:03,572 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 15:58:03,573 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 15:58:03,575 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 15:58:03,578 - sync_service - INFO - Added POS receipt number to invoice: 1006
2025-09-14 15:58:04,568 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:58:05,488 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 15:58:05,489 - sync_service - INFO - Created invoice in SAP: 23171
2025-09-14 15:58:05,490 - sync_service - INFO - Created invoice data: {'DocEntry': 23171, 'DocNum': 100018887}
2025-09-14 15:58:05,491 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 15:58:05,492 - sync_service - INFO - DEBUG: Store payment type determination - Gateway: 'paymob pos', Card Type: 'unknown', Location Mapping: {'type': 'store', 'warehouse': '5A', 'location_cc': 'WAT', 'department_cc': 'SAL', 'activity_cc': 'General', 'group_code': 100, 'series': {'invoices': 80, 'credit_notes': 84, 'incoming_payments': 15}, 'bank_transfers': {'Geidea': '10801235', 'Valu': '10801231', 'Fawry': '10801246', 'Paymob POS': '10801247'}, 'cash': '10801228', 'receipt_number': '1006'}
2025-09-14 15:58:05,496 - sync_service - INFO - DEBUG: Bank transfers available: ['Geidea', 'Valu', 'Fawry', 'Paymob POS']
2025-09-14 15:58:05,498 - sync_service - INFO - DEBUG: Gateway 'paymob pos' NOT found in bank transfers
2025-09-14 15:58:05,498 - sync_service - INFO - DEBUG: Defaulting to Cash payment
2025-09-14 15:58:05,499 - sync_service - INFO - Cash payment at store - using cash account: 10801228
2025-09-14 15:58:06,318 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 15:58:06,321 - sync_service - INFO - Created incoming payment in SAP: 22357
2025-09-14 15:58:06,323 - sync_service - INFO - Successfully created incoming payment: 22357
2025-09-14 15:58:08,037 - sync_service - INFO - Added tag 'sap_payment_22357' to order gid://shopify/Order/6385541120066
2025-09-14 15:58:14,846 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:58:17,629 - sync_service - INFO - Added tag 'sap_invoice_23171' to order gid://shopify/Order/6385541120066
2025-09-14 15:58:19,411 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 15:58:19,415 - sync_service - INFO - Successfully processed order #1647
2025-09-14 15:58:19,417 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23171
2025-09-14 15:58:19,419 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 15:58:19,421 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:58:19,422 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:19,945 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:58:19,946 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:58:19,948 - sync_service - INFO - No orders to process for store international
2025-09-14 15:58:19,950 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 15:58:19,951 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 15:58:19,953 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:58:19,955 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:58:19,956 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:20,446 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:58:20,447 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:58:20,448 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:58:20,448 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:30,453 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:58:30,733 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:58:30,735 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:58:30,737 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:58:32,749 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:33,266 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:58:33,268 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:58:33,270 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:58:33,271 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:58:33,273 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:58:33,274 - sync_service - INFO - Starting returns sync...
2025-09-14 15:58:33,275 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:58:33,276 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:58:33,278 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:58:33,279 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:58:33,281 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:33,769 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:58:33,771 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:58:33,773 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:58:33,774 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:58:33,776 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:58:33,777 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:58:33,779 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:58:34,266 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:58:34,267 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:58:34,267 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:58:34,268 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 15:58:51,494 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:58:51,496 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:58:51,535 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 15:58:51,536 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 15:58:51,538 - sync_service - INFO - Starting all syncs...
2025-09-14 15:58:51,539 - sync_service - INFO - Starting new items sync...
2025-09-14 15:58:51,539 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 15:58:51,539 - sync_service - INFO - Fetching new items for store: local
2025-09-14 15:58:52,257 - sync_service - INFO - SAP login successful
2025-09-14 15:58:53,614 - sync_service - INFO - SAP logging client login successful
2025-09-14 15:58:54,272 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:58:54,277 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 15:58:54,280 - sync_service - INFO - Fetching new items for store: international
2025-09-14 15:58:55,587 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:58:55,589 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 15:58:55,590 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:58:55,591 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:58:55,591 - sync_service - INFO - Starting stock change sync...
2025-09-14 15:58:55,591 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 15:58:55,592 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 15:58:56,903 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:58:56,903 - sync_service - INFO - No stock changes found for store local.
2025-09-14 15:58:56,904 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 15:58:58,233 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:58:58,237 - sync_service - INFO - No stock changes found for store international.
2025-09-14 15:58:58,239 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:58:58,241 - sync_service - INFO - Starting item changes sync...
2025-09-14 15:58:58,243 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 15:58:58,246 - sync_service - INFO - Processing item changes for store: local
2025-09-14 15:58:58,816 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:58:58,855 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 15:58:58,865 - sync_service - INFO - No item changes found for store local
2025-09-14 15:58:58,871 - sync_service - INFO - Processing item changes for store: international
2025-09-14 15:59:01,436 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:59:01,544 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 15:59:01,586 - sync_service - INFO - No item changes found for store international
2025-09-14 15:59:01,590 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:59:01,601 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:59:01,753 - sync_service - INFO - Starting price changes sync...
2025-09-14 15:59:01,757 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 15:59:01,771 - sync_service - INFO - Processing price changes for store: local
2025-09-14 15:59:03,392 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 15:59:03,393 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 15:59:03,404 - sync_service - INFO - No price changes found for store local
2025-09-14 15:59:03,405 - sync_service - INFO - Processing price changes for store: international
2025-09-14 15:59:04,818 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 15:59:04,820 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 15:59:04,821 - sync_service - INFO - No price changes found for store international
2025-09-14 15:59:04,821 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:59:04,822 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 15:59:04,823 - sync_service - INFO - Starting sales orders sync...
2025-09-14 15:59:04,824 - sync_service - INFO - Starting orders sync...
2025-09-14 15:59:04,824 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:59:04,825 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:05,324 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:05,334 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 15:59:05,339 - sync_service - INFO - No orders to process for store local
2025-09-14 15:59:05,342 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 15:59:05,356 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:15,491 - sync_service - ERROR - GraphQL query error for store international: 
2025-09-14 15:59:15,879 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_international - failure
2025-09-14 15:59:15,902 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store international: 
2025-09-14 15:59:15,908 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 15:59:17,929 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:18,437 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:18,438 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 15:59:18,439 - sync_service - INFO - No orders to process for store international
2025-09-14 15:59:18,439 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:59:18,440 - sync_service - INFO - Orders sync completed. Processed: 0, Success: 0, Errors: 0
2025-09-14 15:59:18,441 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:59:18,444 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 15:59:18,444 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:18,924 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:18,926 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 15:59:18,927 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 15:59:18,928 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:19,424 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:19,425 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 15:59:19,425 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 15:59:19,427 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 15:59:19,428 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 15:59:19,429 - sync_service - INFO - Starting returns sync...
2025-09-14 15:59:19,432 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 15:59:19,432 - sync_service - INFO - Processing returns for store: local
2025-09-14 15:59:19,433 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:59:19,434 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 15:59:19,435 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:19,931 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:19,933 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 15:59:19,936 - sync_service - INFO - No returned orders to process for store local
2025-09-14 15:59:19,938 - sync_service - INFO - Processing returns for store: international
2025-09-14 15:59:19,939 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 15:59:19,940 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 15:59:19,942 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 15:59:20,452 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 15:59:20,454 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 15:59:20,455 - sync_service - INFO - No returned orders to process for store international
2025-09-14 15:59:20,456 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
2025-09-14 16:00:04,988 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 16:00:04,989 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 16:00:05,023 - sync_service - INFO - Initialized Shopify client for store: Local Store (local)
2025-09-14 16:00:05,023 - sync_service - INFO - Initialized Shopify client for store: International Store (international)
2025-09-14 16:00:05,025 - sync_service - INFO - Starting all syncs...
2025-09-14 16:00:05,025 - sync_service - INFO - Starting new items sync...
2025-09-14 16:00:05,026 - sync_service - INFO - Starting multi-store new items sync from SAP to Shopify
2025-09-14 16:00:05,026 - sync_service - INFO - Fetching new items for store: local
2025-09-14 16:00:05,774 - sync_service - INFO - SAP login successful
2025-09-14 16:00:07,152 - sync_service - INFO - SAP logging client login successful
2025-09-14 16:00:07,828 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 16:00:07,831 - sync_service - INFO - No new items found in SAP for store local
2025-09-14 16:00:07,833 - sync_service - INFO - Fetching new items for store: international
2025-09-14 16:00:09,211 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_New_ItemsB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 16:00:09,213 - sync_service - INFO - No new items found in SAP for store international
2025-09-14 16:00:09,215 - sync_service - INFO - Sync Event: {'sync_type': 'multi_store_new_items_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 16:00:09,216 - sync_service - INFO - Multi-store new items sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 16:00:09,217 - sync_service - INFO - Starting stock change sync...
2025-09-14 16:00:09,218 - sync_service - INFO - Starting stock change sync using MASHURA_StockChangeB1SLQuery view
2025-09-14 16:00:09,218 - sync_service - INFO - Processing inventory changes for store: local
2025-09-14 16:00:10,630 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 16:00:10,632 - sync_service - INFO - No stock changes found for store local.
2025-09-14 16:00:10,634 - sync_service - INFO - Processing inventory changes for store: international
2025-09-14 16:00:11,999 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_StockChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 16:00:12,001 - sync_service - INFO - No stock changes found for store international.
2025-09-14 16:00:12,002 - sync_service - INFO - Stock change sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 16:00:12,003 - sync_service - INFO - Starting item changes sync...
2025-09-14 16:00:12,003 - sync_service - INFO - Starting item changes sync from SAP to Shopify
2025-09-14 16:00:12,004 - sync_service - INFO - Processing item changes for store: local
2025-09-14 16:00:12,543 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 16:00:12,544 - sync_service - INFO - Found 0 item changes for store local
2025-09-14 16:00:12,546 - sync_service - INFO - No item changes found for store local
2025-09-14 16:00:12,547 - sync_service - INFO - Processing item changes for store: international
2025-09-14 16:00:13,854 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_ItemChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 16:00:13,854 - sync_service - INFO - Found 0 item changes for store international
2025-09-14 16:00:13,855 - sync_service - INFO - No item changes found for store international
2025-09-14 16:00:13,855 - sync_service - INFO - Sync Event: {'sync_type': 'item_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 16:00:13,856 - sync_service - INFO - Item changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 16:00:13,856 - sync_service - INFO - Starting price changes sync...
2025-09-14 16:00:13,856 - sync_service - INFO - Starting price changes sync from SAP to Shopify
2025-09-14 16:00:13,857 - sync_service - INFO - Processing price changes for store: local
2025-09-14 16:00:15,145 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'local' - success
2025-09-14 16:00:15,148 - sync_service - INFO - Found 0 price changes for store local
2025-09-14 16:00:15,150 - sync_service - INFO - No price changes found for store local
2025-09-14 16:00:15,151 - sync_service - INFO - Processing price changes for store: international
2025-09-14 16:00:16,459 - sync_service - INFO - API log added to SAP: sap - view.svc/MASHURA_PriceChangeB1SLQuery?$filter=Shopify_Store eq 'international' - success
2025-09-14 16:00:16,461 - sync_service - INFO - Found 0 price changes for store international
2025-09-14 16:00:16,463 - sync_service - INFO - No price changes found for store international
2025-09-14 16:00:16,464 - sync_service - INFO - Sync Event: {'sync_type': 'price_changes_sap_to_shopify', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 16:00:16,465 - sync_service - INFO - Price changes sync completed: 0 processed, 0 successful, 0 errors
2025-09-14 16:00:16,466 - sync_service - INFO - Starting sales orders sync...
2025-09-14 16:00:16,467 - sync_service - INFO - Starting orders sync...
2025-09-14 16:00:16,468 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 16:00:16,469 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:26,489 - sync_service - ERROR - GraphQL query error for store local: 
2025-09-14 16:00:26,767 - sync_service - INFO - API log added to SAP: shopify - /admin/api/graphql_local - failure
2025-09-14 16:00:26,770 - sync_service - WARNING - GraphQL attempt 1/3 failed: GraphQL query error for store local: 
2025-09-14 16:00:26,771 - sync_service - INFO - Retrying in 2 seconds...
2025-09-14 16:00:28,779 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:29,372 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [{'node': {'id': 'gid://shopify/Order/6385541120066', 'name': '#1647', 'createdAt': '2025-09-11T13:29:15Z', 'displayFinancialStatus': 'PAID', 'displayFulfillmentStatus': 'FULFILLED', 'sourceName': 'pos', 'sourceIdentifier': '70074892354-1-1006', 'totalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'subtotalPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'totalShippingPriceSet': {'shopMoney': {'amount': '0.0', 'currencyCode': 'EGP'}}, 'discountApplications': {'edges': []}, 'customer': {'id': 'gid://shopify/Customer/7539785334850', 'firstName': 'Karim', 'lastName': 'Wafik', 'email': 'karimwafik.kw@gmail.com', 'phone': None, 'addresses': [{'address1': '97 Marghany st., Heliopolis, Cairo, Egypt', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': '21113', 'country': 'Egypt', 'phone': '+201005527292'}, {'address1': 'Stone Residence Compound 306, Third Settlement', 'address2': '9', 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'New Cairo', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'afasfag', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asfasfas', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'asdfasfasf', 'address2': None, 'city': 'Cairo', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '01005527292'}, {'address1': 'nasr city', 'address2': None, 'city': 'nasr city', 'province': 'Cairo', 'zip': None, 'country': 'Egypt', 'phone': '+201001234561'}]}, 'metafields': {'edges': []}, 'tags': ['salestest'], 'shippingAddress': None, 'billingAddress': None, 'lineItems': {'edges': [{'node': {'id': 'gid://shopify/LineItem/15992050679874', 'name': 'Iron Man Necklace - Blue', 'quantity': 1, 'sku': 'FG-0000714', 'originalUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountedUnitPriceSet': {'shopMoney': {'amount': '8.5', 'currencyCode': 'EGP'}}, 'discountAllocations': [], 'variant': {'id': 'gid://shopify/ProductVariant/42444515835970', 'sku': 'FG-0000714', 'price': '8.50', 'compareAtPrice': '10.00', 'product': {'id': 'gid://shopify/Product/7542966190146', 'title': 'Iron Man Necklace'}}}}]}, 'transactions': [{'id': 'gid://shopify/OrderTransaction/8166210338882', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'shopify_store_credit', 'amountSet': {'shopMoney': {'amount': '1.0', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{"account_id":115146818,"debit_operation_id":368017474}'}, {'id': 'gid://shopify/OrderTransaction/8166210371650', 'kind': 'SALE', 'status': 'SUCCESS', 'gateway': 'Paymob POS', 'amountSet': {'shopMoney': {'amount': '7.5', 'currencyCode': 'EGP'}}, 'processedAt': '2025-09-11T13:29:14Z', 'receiptJson': '{}'}]}}], 'pageInfo': {'hasNextPage': False, 'endCursor': 'eyJsYXN0X2lkIjo2Mzg1NTQxMTIwMDY2LCJsYXN0X3ZhbHVlIjoxNzU3NTk3MzU1MDAwfQ=='}}}, 'status': 'success'}
2025-09-14 16:00:29,373 - sync_service - INFO - Retrieved 1 unsynced orders (limited to 5 most recent) from Shopify store local
2025-09-14 16:00:29,373 - sync_service - INFO - Processing 1 orders from store local
2025-09-14 16:00:29,373 - sync_service - INFO - Processing order #1647 (ID: gid://shopify/Order/6385541120066)
2025-09-14 16:00:29,374 - sync_service - INFO - Processing order: #1647 | Payment: PAID | Fulfillment: FULFILLED
2025-09-14 16:00:29,375 - sync_service - INFO - Payment Gateway: Paymob POS | Card Type: Unknown | Amount: 7.5
2025-09-14 16:00:29,708 - sync_service - INFO - Creating new customer in SAP
2025-09-14 16:00:30,451 - sync_service - INFO - Created customer in SAP: C0021110
2025-09-14 16:00:30,453 - sync_service - INFO - Checking line item for gift card: SKU='fg-0000714', VariantSKU='fg-0000714', Name='iron man necklace - blue'
2025-09-14 16:00:30,455 - sync_service - INFO - Using location-based costing codes for order #1647: {'COGSCostingCode': 'WAT', 'COGSCostingCode2': 'SAL', 'COGSCostingCode3': 'General', 'CostingCode': 'WAT', 'CostingCode2': 'SAL', 'CostingCode3': 'General', 'Warehouse': '5A'}
2025-09-14 16:00:30,457 - sync_service - INFO - üéØ Pricing for FG-0000714: Original=10.00, Sale=8.50, Discount=15.0%
2025-09-14 16:00:30,458 - sync_service - INFO - üéÅ No gift card redemptions found in this order
2025-09-14 16:00:30,459 - sync_service - INFO - Added POS receipt number to invoice: 1006
2025-09-14 16:00:31,053 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 16:00:31,967 - sync_service - INFO - API log added to SAP: sap - Invoices - success
2025-09-14 16:00:31,970 - sync_service - INFO - Created invoice in SAP: 23172
2025-09-14 16:00:31,972 - sync_service - INFO - Created invoice data: {'DocEntry': 23172, 'DocNum': 100018888}
2025-09-14 16:00:31,973 - sync_service - INFO - Order #1647 is paid - creating incoming payment in SAP
2025-09-14 16:00:31,974 - sync_service - INFO - Credit card payment at store - using Paymob POS account: 10801247
2025-09-14 16:00:32,793 - sync_service - INFO - API log added to SAP: sap - IncomingPayments - success
2025-09-14 16:00:32,796 - sync_service - INFO - Created incoming payment in SAP: 22358
2025-09-14 16:00:32,798 - sync_service - INFO - Successfully created incoming payment: 22358
2025-09-14 16:00:34,536 - sync_service - INFO - Added tag 'sap_payment_22358' to order gid://shopify/Order/6385541120066
2025-09-14 16:00:41,665 - sync_service - INFO - Added tag 'sap_payment_synced' to order gid://shopify/Order/6385541120066
2025-09-14 16:00:55,652 - sync_service - INFO - Added tag 'sap_invoice_23172' to order gid://shopify/Order/6385541120066
2025-09-14 16:00:57,738 - sync_service - INFO - Added tag 'sap_invoice_synced' to order gid://shopify/Order/6385541120066
2025-09-14 16:00:57,740 - sync_service - INFO - Successfully processed order #1647
2025-09-14 16:00:57,740 - sync_service - INFO - ‚úÖ Processed order #1647 -> SAP Invoice: 23172
2025-09-14 16:00:57,741 - sync_service - INFO -    üí≥ Gateway: Paymob POS | Amount: 7.5
2025-09-14 16:00:57,742 - sync_service - INFO - Fetching orders with filter: tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10
2025-09-14 16:00:57,742 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: false, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Discounts applied ---\n                        discountApplications(first: 10) {\n                        edges {\n                            node {\n                            targetType        # ORDER or LINE_ITEM\n                            allocationMethod  # ACROSS / EACH / ONE\n                            value {\n                                __typename\n                                ... on PricingPercentageValue {\n                                percentage\n                                }\n                                ... on MoneyV2 {\n                                amount\n                                currencyCode\n                                }\n                            }\n                            ... on DiscountCodeApplication {\n                                code\n                            }\n                            ... on AutomaticDiscountApplication {\n                                title\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n                        shippingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n                        billingAddress {\n                        address1\n                        address2\n                        city\n                        province\n                        zip\n                        country\n                        phone\n                        firstName\n                        lastName\n                        company\n                        }\n\n                        # --- Line Items with Discount Allocations ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountAllocations {\n                                allocatedAmount {\n                                    amount\n                                    currencyCode\n                                }\n                                discountApplication {\n                                    __typename\n                                    ... on AutomaticDiscountApplication {\n                                        title\n                                    }\n                                    ... on DiscountCodeApplication {\n                                        code\n                                    }\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions (Gift cards show up here as gateway = "gift_card") ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson   # contains gift_card_id, last_characters etc if gift card used\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:salestest -tag:sap_invoice_synced -tag:sap_invoice_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:58,292 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 16:00:58,294 - sync_service - INFO - Retrieved 0 unsynced orders (limited to 5 most recent) from Shopify store international
2025-09-14 16:00:58,296 - sync_service - INFO - No orders to process for store international
2025-09-14 16:00:58,298 - sync_service - INFO - Sync Event: {'sync_type': 'sales_orders', 'items_processed': 1, 'success_count': 1, 'error_count': 0, 'details': None}
2025-09-14 16:00:58,299 - sync_service - INFO - Orders sync completed. Processed: 1, Success: 1, Errors: 0
2025-09-14 16:00:58,301 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 16:00:58,301 - sync_service - INFO - Starting payment recovery sync...
2025-09-14 16:00:58,303 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:58,839 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 16:00:58,840 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store local
2025-09-14 16:00:58,841 - sync_service - INFO - No orders need payment recovery for store local
2025-09-14 16:00:58,842 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n\n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': '(financial_status:paid OR financial_status:partially_refunded) AND tag:sap_invoice_synced AND -tag:sap_payment_synced AND -tag:sap_payment_failed created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:59,363 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 16:00:59,365 - sync_service - INFO - Retrieved 0 orders that need payment recovery from Shopify store international
2025-09-14 16:00:59,366 - sync_service - INFO - No orders need payment recovery for store international
2025-09-14 16:00:59,367 - sync_service - INFO - Sync Event: {'sync_type': 'payment_recovery', 'items_processed': 0, 'success_count': 0, 'error_count': 0, 'details': None}
2025-09-14 16:00:59,369 - sync_service - INFO - Payment recovery sync completed. Processed: 0, Success: 0, Skipped: 0, Errors: 0
2025-09-14 16:00:59,370 - sync_service - INFO - Starting returns sync...
2025-09-14 16:00:59,371 - sync_service - INFO - Starting returns sync for all stores
2025-09-14 16:00:59,372 - sync_service - INFO - Processing returns for store: local
2025-09-14 16:00:59,373 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 16:00:59,374 - sync_service - INFO - GraphQL query attempt 1/3 for store local
2025-09-14 16:00:59,375 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:00:59,883 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_local', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 16:00:59,885 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store local
2025-09-14 16:00:59,886 - sync_service - INFO - No returned orders to process for store local
2025-09-14 16:00:59,888 - sync_service - INFO - Processing returns for store: international
2025-09-14 16:00:59,889 - sync_service - INFO - Fetching returned orders with filter: tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10
2025-09-14 16:00:59,890 - sync_service - INFO - GraphQL query attempt 1/3 for store international
2025-09-14 16:00:59,891 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': {'query': '\n            query getOrders($first: Int!, $after: String, $query: String) {\n                orders(first: $first, after: $after, sortKey: CREATED_AT, reverse: true, query: $query) {\n                    edges {\n                    node {\n                        id\n                        name\n                        createdAt\n                        displayFinancialStatus\n                        displayFulfillmentStatus\n                        sourceName\n                        sourceIdentifier\n\n                        totalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        subtotalPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n                        totalShippingPriceSet {\n                        shopMoney {\n                            amount\n                            currencyCode\n                        }\n                        }\n\n                        # --- Customer Info ---\n                        customer {\n                        id\n                        firstName\n                        lastName\n                        email\n                        phone\n                        addresses {\n                            address1\n                            address2\n                            city\n                            province\n                            zip\n                            country\n                            phone\n                        }\n                        }\n                        \n                        # --- Metafields ---\n                        metafields(first: 10) {\n                        edges {\n                            node {\n                            namespace\n                            key\n                            value\n                            }\n                        }\n                        }\n                        \n                        # --- Tags ---\n                        tags\n\n                        # --- Line Items ---\n                        lineItems(first: 50) {\n                        edges {\n                            node {\n                            id\n                            name\n                            quantity\n                            sku\n                            originalUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            discountedUnitPriceSet {\n                                shopMoney {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                            variant {\n                                id\n                                sku\n                                price\n                                compareAtPrice\n                                product {\n                                id\n                                title\n                                }\n                            }\n                            }\n                        }\n                        }\n\n                        # --- Transactions ---\n                        transactions(first: 10) {\n                        id\n                        kind\n                        status\n                        gateway\n                        amountSet {\n                            shopMoney {\n                            amount\n                            currencyCode\n                            }\n                        }\n                        processedAt\n                        receiptJson\n                        }\n                    }\n                    }\n                    pageInfo {\n                    hasNextPage\n                    endCursor\n                    }\n                }\n            }\n            ', 'variables': {'first': 10, 'after': None, 'query': 'tag:returntest tag:sap_payment_synced financial_status:partially_refunded -tag:sap_return_synced created_at:>=2025-09-10'}}, 'response': None, 'status': None}
2025-09-14 16:01:00,396 - sync_service - INFO - API Call: {'service': 'shopify', 'endpoint': 'graphql_international', 'request': None, 'response': {'orders': {'edges': [], 'pageInfo': {'hasNextPage': False, 'endCursor': None}}}, 'status': 'success'}
2025-09-14 16:01:00,398 - sync_service - INFO - ‚úÖ Retrieved 0 returned orders (limited to 10 most recent) from Shopify store international
2025-09-14 16:01:00,399 - sync_service - INFO - No returned orders to process for store international
2025-09-14 16:01:00,399 - sync_service - INFO - Returns sync completed: 0 successful, 0 errors
